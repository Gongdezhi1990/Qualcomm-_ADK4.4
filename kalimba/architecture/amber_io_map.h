// *****************************************************************************
// Copyright (c) 2017 Qualcomm Technologies International, Ltd. 
//
// Title      : Kalimba DSP Assembler File
// File name  : /scratch/digital_cc/PerforceWorkspaces/chips_amber/amber/dev/results/audio_sys/regs/asm/io_map.asm
// Creator    : GenKalimbaAsm.pm
// Timestamp  : Mon Dec 19 17:27:28 GMT 2011
//
// This file was generated automatically. It is recommended not to edit it.
//
// *****************************************************************************

.CONST $MM_DOLOOP_START                     0xFFE000; // RW  24 bits
.CONST $_MM_DOLOOP_START                     $MM_DOLOOP_START; // RW  24 bits
.CONST $MM_DOLOOP_END                       0xFFE001; // RW  24 bits
.CONST $_MM_DOLOOP_END                       $MM_DOLOOP_END; // RW  24 bits
.CONST $MM_QUOTIENT                         0xFFE002; // RW  24 bits
.CONST $_MM_QUOTIENT                         $MM_QUOTIENT; // RW  24 bits
.CONST $MM_REM                              0xFFE003; // RW  24 bits
.CONST $_MM_REM                              $MM_REM; // RW  24 bits
.CONST $MM_RINTLINK                         0xFFE004; // RW  24 bits
.CONST $_MM_RINTLINK                         $MM_RINTLINK; // RW  24 bits
.CONST $ARITHMETIC_MODE                     0xFFE005; // RW   5 bits
.CONST $_ARITHMETIC_MODE                     $ARITHMETIC_MODE; // RW   5 bits
.CONST $STACK_START_ADDR                    0xFFE006; // RW  24 bits
.CONST $_STACK_START_ADDR                    $STACK_START_ADDR; // RW  24 bits
.CONST $STACK_END_ADDR                      0xFFE007; // RW  24 bits
.CONST $_STACK_END_ADDR                      $STACK_END_ADDR; // RW  24 bits
.CONST $STACK_POINTER                       0xFFE008; // RW  24 bits
.CONST $_STACK_POINTER                       $STACK_POINTER; // RW  24 bits
.CONST $STACK_OVERFLOW_PC                   0xFFE009; //  R  24 bits
.CONST $_STACK_OVERFLOW_PC                   $STACK_OVERFLOW_PC; //  R  24 bits
.CONST $FRAME_POINTER                       0xFFE00A; // RW  24 bits
.CONST $_FRAME_POINTER                       $FRAME_POINTER; // RW  24 bits
.CONST $BITREVERSE_VAL                      0xFFE00B; // RW  24 bits
.CONST $_BITREVERSE_VAL                      $BITREVERSE_VAL; // RW  24 bits
.CONST $BITREVERSE_DATA                     0xFFE00C; //  R  24 bits
.CONST $_BITREVERSE_DATA                     $BITREVERSE_DATA; //  R  24 bits
.CONST $BITREVERSE_DATA16                   0xFFE00D; //  R  24 bits
.CONST $_BITREVERSE_DATA16                   $BITREVERSE_DATA16; //  R  24 bits
.CONST $BITREVERSE_ADDR                     0xFFE00E; //  R  24 bits
.CONST $_BITREVERSE_ADDR                     $BITREVERSE_ADDR; //  R  24 bits
.CONST $NUM_RUN_CLKS_MS                     0xFFE00F; //  R   8 bits
.CONST $_NUM_RUN_CLKS_MS                     $NUM_RUN_CLKS_MS; //  R   8 bits
.CONST $NUM_RUN_CLKS_LS                     0xFFE010; //  R  24 bits
.CONST $_NUM_RUN_CLKS_LS                     $NUM_RUN_CLKS_LS; //  R  24 bits
.CONST $NUM_INSTRS_MS                       0xFFE011; //  R   8 bits
.CONST $_NUM_INSTRS_MS                       $NUM_INSTRS_MS; //  R   8 bits
.CONST $NUM_INSTRS_LS                       0xFFE012; //  R  24 bits
.CONST $_NUM_INSTRS_LS                       $NUM_INSTRS_LS; //  R  24 bits
.CONST $NUM_CORE_STALLS_MS                  0xFFE013; //  R   8 bits
.CONST $_NUM_CORE_STALLS_MS                  $NUM_CORE_STALLS_MS; //  R   8 bits
.CONST $NUM_CORE_STALLS_LS                  0xFFE014; //  R  24 bits
.CONST $_NUM_CORE_STALLS_LS                  $NUM_CORE_STALLS_LS; //  R  24 bits
.CONST $DBG_COUNTERS_EN                     0xFFE015; // RW   1 bits
.CONST $_DBG_COUNTERS_EN                     $DBG_COUNTERS_EN; // RW   1 bits
.CONST $PC_STATUS                           0xFFE016; //  R  24 bits
.CONST $_PC_STATUS                           $PC_STATUS; //  R  24 bits
.CONST $TEST_REG_0                          0xFFE017; // RW  24 bits
.CONST $_TEST_REG_0                          $TEST_REG_0; // RW  24 bits
.CONST $TEST_REG_1                          0xFFE018; // RW  24 bits
.CONST $_TEST_REG_1                          $TEST_REG_1; // RW  24 bits
.CONST $TEST_REG_2                          0xFFE019; // RW  24 bits
.CONST $_TEST_REG_2                          $TEST_REG_2; // RW  24 bits
.CONST $TEST_REG_3                          0xFFE01A; // RW  24 bits
.CONST $_TEST_REG_3                          $TEST_REG_3; // RW  24 bits
.CONST $CLOCK_DIVIDE_RATE                   0xFFE020; // RW  16 bits
.CONST $_CLOCK_DIVIDE_RATE                   $CLOCK_DIVIDE_RATE; // RW  16 bits
.CONST $PMWIN_ENABLE                        0xFFE021; // RW   1 bits
.CONST $_PMWIN_ENABLE                        $PMWIN_ENABLE; // RW   1 bits
.CONST $PMWIN_NOSIGNX                       0xFFE022; // RW   1 bits
.CONST $_PMWIN_NOSIGNX                       $PMWIN_NOSIGNX; // RW   1 bits
.CONST $PROC_DEEP_SLEEP_EN                  0xFFE023; // RW   1 bits
.CONST $_PROC_DEEP_SLEEP_EN                  $PROC_DEEP_SLEEP_EN; // RW   1 bits
.CONST $INT_GBL_ENABLE                      0xFFE040; // RW   1 bits
.CONST $_INT_GBL_ENABLE                      $INT_GBL_ENABLE; // RW   1 bits
.CONST $INT_UNBLOCK                         0xFFE041; // RW   1 bits
.CONST $_INT_UNBLOCK                         $INT_UNBLOCK; // RW   1 bits
.CONST $INT_ADDR                            0xFFE042; // RW  24 bits
.CONST $_INT_ADDR                            $INT_ADDR; // RW  24 bits
.CONST $INT_CLK_SWITCH_EN                   0xFFE043; // RW   1 bits
.CONST $_INT_CLK_SWITCH_EN                   $INT_CLK_SWITCH_EN; // RW   1 bits
.CONST $INT_CLOCK_DIVIDE_RATE               0xFFE044; // RW  16 bits
.CONST $_INT_CLOCK_DIVIDE_RATE               $INT_CLOCK_DIVIDE_RATE; // RW  16 bits
.CONST $INT_ACK                             0xFFE045; // RW   1 bits
.CONST $_INT_ACK                             $INT_ACK; // RW   1 bits
.CONST $INT_SW0_EVENT                       0xFFE046; // RW   1 bits
.CONST $_INT_SW0_EVENT                       $INT_SW0_EVENT; // RW   1 bits
.CONST $INT_SW1_EVENT                       0xFFE047; // RW   1 bits
.CONST $_INT_SW1_EVENT                       $INT_SW1_EVENT; // RW   1 bits
.CONST $INT_SW2_EVENT                       0xFFE048; // RW   1 bits
.CONST $_INT_SW2_EVENT                       $INT_SW2_EVENT; // RW   1 bits
.CONST $INT_SW3_EVENT                       0xFFE049; // RW   1 bits
.CONST $_INT_SW3_EVENT                       $INT_SW3_EVENT; // RW   1 bits
.CONST $INT_LOW_PRI_SOURCES_EN              0xFFE04A; // RW  24 bits
.CONST $_INT_LOW_PRI_SOURCES_EN              $INT_LOW_PRI_SOURCES_EN; // RW  24 bits
.CONST $INT_MED_PRI_SOURCES_EN              0xFFE04B; // RW  24 bits
.CONST $_INT_MED_PRI_SOURCES_EN              $INT_MED_PRI_SOURCES_EN; // RW  24 bits
.CONST $INT_HIGH_PRI_SOURCES_EN             0xFFE04C; // RW  24 bits
.CONST $_INT_HIGH_PRI_SOURCES_EN             $INT_HIGH_PRI_SOURCES_EN; // RW  24 bits
.CONST $INT_LOAD_INFO                       0xFFE04D; // RW  20 bits
.CONST $_INT_LOAD_INFO                       $INT_LOAD_INFO; // RW  20 bits
.CONST $INT_SAVE_INFO                       0xFFE04E; //  R  19 bits
.CONST $_INT_SAVE_INFO                       $INT_SAVE_INFO; //  R  19 bits
.CONST $INT_SOURCE                          0xFFE04F; //  R   8 bits
.CONST $_INT_SOURCE                          $INT_SOURCE; //  R   8 bits
.CONST $TIMER_TIME                          0xFFE060; //  R  24 bits
.CONST $_TIMER_TIME                          $TIMER_TIME; //  R  24 bits
.CONST $TIMER1_EN                           0xFFE061; // RW   1 bits
.CONST $_TIMER1_EN                           $TIMER1_EN; // RW   1 bits
.CONST $TIMER2_EN                           0xFFE062; // RW   1 bits
.CONST $_TIMER2_EN                           $TIMER2_EN; // RW   1 bits
.CONST $TIMER1_TRIGGER                      0xFFE063; // RW  24 bits
.CONST $_TIMER1_TRIGGER                      $TIMER1_TRIGGER; // RW  24 bits
.CONST $TIMER2_TRIGGER                      0xFFE064; // RW  24 bits
.CONST $_TIMER2_TRIGGER                      $TIMER2_TRIGGER; // RW  24 bits
.CONST $CACHE_CONFIG                        0xFFE080; // RW   4 bits
.CONST $_CACHE_CONFIG                        $CACHE_CONFIG; // RW   4 bits
.CONST $CACHE_HIT0_COUNT_MS                 0xFFE081; //  R   8 bits
.CONST $_CACHE_HIT0_COUNT_MS                 $CACHE_HIT0_COUNT_MS; //  R   8 bits
.CONST $CACHE_HIT0_COUNT_LS                 0xFFE082; //  R  24 bits
.CONST $_CACHE_HIT0_COUNT_LS                 $CACHE_HIT0_COUNT_LS; //  R  24 bits
.CONST $CACHE_HIT1_COUNT_MS                 0xFFE083; //  R   8 bits
.CONST $_CACHE_HIT1_COUNT_MS                 $CACHE_HIT1_COUNT_MS; //  R   8 bits
.CONST $CACHE_HIT1_COUNT_LS                 0xFFE084; //  R  24 bits
.CONST $_CACHE_HIT1_COUNT_LS                 $CACHE_HIT1_COUNT_LS; //  R  24 bits
.CONST $CACHE_MISS_COUNT_MS                 0xFFE085; //  R   8 bits
.CONST $_CACHE_MISS_COUNT_MS                 $CACHE_MISS_COUNT_MS; //  R   8 bits
.CONST $CACHE_MISS_COUNT_LS                 0xFFE086; //  R  24 bits
.CONST $_CACHE_MISS_COUNT_LS                 $CACHE_MISS_COUNT_LS; //  R  24 bits
.CONST $EXCEPTION_EN                        0xFFE0A0; // RW   2 bits
.CONST $_EXCEPTION_EN                        $EXCEPTION_EN; // RW   2 bits
.CONST $EXCEPTION_TYPE                      0xFFE0A1; //  R   3 bits
.CONST $_EXCEPTION_TYPE                      $EXCEPTION_TYPE; //  R   3 bits
.CONST $TRACE_BUFFER_WORD0                  0xFFE0A2; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD0                  $TRACE_BUFFER_WORD0; //  R  24 bits
.CONST $TRACE_BUFFER_WORD1                  0xFFE0A3; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD1                  $TRACE_BUFFER_WORD1; //  R  24 bits
.CONST $TRACE_BUFFER_WORD2                  0xFFE0A4; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD2                  $TRACE_BUFFER_WORD2; //  R  24 bits
.CONST $TRACE_BUFFER_WORD3                  0xFFE0A5; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD3                  $TRACE_BUFFER_WORD3; //  R  24 bits
.CONST $TRACE_BUFFER_WORD4                  0xFFE0A6; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD4                  $TRACE_BUFFER_WORD4; //  R  24 bits
.CONST $TRACE_BUFFER_WORD5                  0xFFE0A7; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD5                  $TRACE_BUFFER_WORD5; //  R  24 bits
.CONST $TRACE_BUFFER_WORD6                  0xFFE0A8; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD6                  $TRACE_BUFFER_WORD6; //  R  24 bits
.CONST $TRACE_BUFFER_WORD7                  0xFFE0A9; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD7                  $TRACE_BUFFER_WORD7; //  R  24 bits
.CONST $TRACE_BUFFER_WORD8                  0xFFE0AA; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD8                  $TRACE_BUFFER_WORD8; //  R  24 bits
.CONST $TRACE_BUFFER_WORD9                  0xFFE0AB; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD9                  $TRACE_BUFFER_WORD9; //  R  24 bits
.CONST $TRACE_BUFFER_WORD10                 0xFFE0AC; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD10                 $TRACE_BUFFER_WORD10; //  R  24 bits
.CONST $TRACE_BUFFER_WORD11                 0xFFE0AD; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD11                 $TRACE_BUFFER_WORD11; //  R  24 bits
.CONST $TRACE_BUFFER_WORD12                 0xFFE0AE; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD12                 $TRACE_BUFFER_WORD12; //  R  24 bits
.CONST $TRACE_BUFFER_WORD13                 0xFFE0AF; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD13                 $TRACE_BUFFER_WORD13; //  R  24 bits
.CONST $TRACE_BUFFER_WORD14                 0xFFE0B0; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD14                 $TRACE_BUFFER_WORD14; //  R  24 bits
.CONST $TRACE_BUFFER_WORD15                 0xFFE0B1; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD15                 $TRACE_BUFFER_WORD15; //  R  24 bits
.CONST $TRACE_BUFFER_WORD16                 0xFFE0B2; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD16                 $TRACE_BUFFER_WORD16; //  R  24 bits
.CONST $TRACE_BUFFER_WORD17                 0xFFE0B3; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD17                 $TRACE_BUFFER_WORD17; //  R  24 bits
.CONST $TRACE_BUFFER_WORD18                 0xFFE0B4; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD18                 $TRACE_BUFFER_WORD18; //  R  24 bits
.CONST $TRACE_BUFFER_WORD19                 0xFFE0B5; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD19                 $TRACE_BUFFER_WORD19; //  R  24 bits
.CONST $TRACE_BUFFER_WORD20                 0xFFE0B6; //  R  24 bits
.CONST $_TRACE_BUFFER_WORD20                 $TRACE_BUFFER_WORD20; //  R  24 bits
.CONST $TRACE_BUFFER_WORD21                 0xFFE0B7; //  R   8 bits
.CONST $_TRACE_BUFFER_WORD21                 $TRACE_BUFFER_WORD21; //  R   8 bits
.CONST $TRACE_BIT_BUFFER                    0xFFE0B8; //  R  32 bits
.CONST $_TRACE_BIT_BUFFER                    $TRACE_BIT_BUFFER; //  R  32 bits
.CONST $_TRACE_BIT_BUFFER_MSW                $TRACE_BIT_BUFFER; //  R 
.CONST $_TRACE_BIT_BUFFER_LSW                0xFFE0B9; //  R 
.CONST $TRACE_POINTERS                      0xFFE0BA; //  R  24 bits
.CONST $_TRACE_POINTERS                      $TRACE_POINTERS; //  R  24 bits
.CONST $TRACE_COMBINER_SAVED_WORD           0xFFE0BB; //  R  32 bits
.CONST $_TRACE_COMBINER_SAVED_WORD           $TRACE_COMBINER_SAVED_WORD; //  R  32 bits
.CONST $_TRACE_COMBINER_SAVED_WORD_MSW       $TRACE_COMBINER_SAVED_WORD; //  R 
.CONST $_TRACE_COMBINER_SAVED_WORD_LSW       0xFFE0BC; //  R 
.CONST $TRACE_PREV_PREV_PC                  0xFFE0BD; //  R  24 bits
.CONST $_TRACE_PREV_PREV_PC                  $TRACE_PREV_PREV_PC; //  R  24 bits
.CONST $TRACE_PREV_PC                       0xFFE0BE; //  R  24 bits
.CONST $_TRACE_PREV_PC                       $TRACE_PREV_PC; //  R  24 bits
.CONST $NVMEM_WIN0_CONFIG                   0xFFE0C0; // RW   5 bits
.CONST $_NVMEM_WIN0_CONFIG                   $NVMEM_WIN0_CONFIG; // RW   5 bits
.CONST $NVMEM_WIN1_CONFIG                   0xFFE0C1; // RW   5 bits
.CONST $_NVMEM_WIN1_CONFIG                   $NVMEM_WIN1_CONFIG; // RW   5 bits
.CONST $NVMEM_WIN2_CONFIG                   0xFFE0C2; // RW   5 bits
.CONST $_NVMEM_WIN2_CONFIG                   $NVMEM_WIN2_CONFIG; // RW   5 bits
.CONST $ROM_PATCH0_EN                       0xFFE0E0; // RW   2 bits
.CONST $_ROM_PATCH0_EN                       $ROM_PATCH0_EN; // RW   2 bits
.CONST $ROM_PATCH0_SOURCE                   0xFFE0E1; // RW  20 bits
.CONST $_ROM_PATCH0_SOURCE                   $ROM_PATCH0_SOURCE; // RW  20 bits
.CONST $ROM_PATCH0_DESTINATION              0xFFE0E2; // RW  16 bits
.CONST $_ROM_PATCH0_DESTINATION              $ROM_PATCH0_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH1_EN                       0xFFE0E3; // RW   2 bits
.CONST $_ROM_PATCH1_EN                       $ROM_PATCH1_EN; // RW   2 bits
.CONST $ROM_PATCH1_SOURCE                   0xFFE0E4; // RW  20 bits
.CONST $_ROM_PATCH1_SOURCE                   $ROM_PATCH1_SOURCE; // RW  20 bits
.CONST $ROM_PATCH1_DESTINATION              0xFFE0E5; // RW  16 bits
.CONST $_ROM_PATCH1_DESTINATION              $ROM_PATCH1_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH2_EN                       0xFFE0E6; // RW   2 bits
.CONST $_ROM_PATCH2_EN                       $ROM_PATCH2_EN; // RW   2 bits
.CONST $ROM_PATCH2_SOURCE                   0xFFE0E7; // RW  20 bits
.CONST $_ROM_PATCH2_SOURCE                   $ROM_PATCH2_SOURCE; // RW  20 bits
.CONST $ROM_PATCH2_DESTINATION              0xFFE0E8; // RW  16 bits
.CONST $_ROM_PATCH2_DESTINATION              $ROM_PATCH2_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH3_EN                       0xFFE0E9; // RW   2 bits
.CONST $_ROM_PATCH3_EN                       $ROM_PATCH3_EN; // RW   2 bits
.CONST $ROM_PATCH3_SOURCE                   0xFFE0EA; // RW  20 bits
.CONST $_ROM_PATCH3_SOURCE                   $ROM_PATCH3_SOURCE; // RW  20 bits
.CONST $ROM_PATCH3_DESTINATION              0xFFE0EB; // RW  16 bits
.CONST $_ROM_PATCH3_DESTINATION              $ROM_PATCH3_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH4_EN                       0xFFE0EC; // RW   2 bits
.CONST $_ROM_PATCH4_EN                       $ROM_PATCH4_EN; // RW   2 bits
.CONST $ROM_PATCH4_SOURCE                   0xFFE0ED; // RW  20 bits
.CONST $_ROM_PATCH4_SOURCE                   $ROM_PATCH4_SOURCE; // RW  20 bits
.CONST $ROM_PATCH4_DESTINATION              0xFFE0EE; // RW  16 bits
.CONST $_ROM_PATCH4_DESTINATION              $ROM_PATCH4_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH5_EN                       0xFFE0EF; // RW   2 bits
.CONST $_ROM_PATCH5_EN                       $ROM_PATCH5_EN; // RW   2 bits
.CONST $ROM_PATCH5_SOURCE                   0xFFE0F0; // RW  20 bits
.CONST $_ROM_PATCH5_SOURCE                   $ROM_PATCH5_SOURCE; // RW  20 bits
.CONST $ROM_PATCH5_DESTINATION              0xFFE0F1; // RW  16 bits
.CONST $_ROM_PATCH5_DESTINATION              $ROM_PATCH5_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH6_EN                       0xFFE0F2; // RW   2 bits
.CONST $_ROM_PATCH6_EN                       $ROM_PATCH6_EN; // RW   2 bits
.CONST $ROM_PATCH6_SOURCE                   0xFFE0F3; // RW  20 bits
.CONST $_ROM_PATCH6_SOURCE                   $ROM_PATCH6_SOURCE; // RW  20 bits
.CONST $ROM_PATCH6_DESTINATION              0xFFE0F4; // RW  16 bits
.CONST $_ROM_PATCH6_DESTINATION              $ROM_PATCH6_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH7_EN                       0xFFE0F5; // RW   2 bits
.CONST $_ROM_PATCH7_EN                       $ROM_PATCH7_EN; // RW   2 bits
.CONST $ROM_PATCH7_SOURCE                   0xFFE0F6; // RW  20 bits
.CONST $_ROM_PATCH7_SOURCE                   $ROM_PATCH7_SOURCE; // RW  20 bits
.CONST $ROM_PATCH7_DESTINATION              0xFFE0F7; // RW  16 bits
.CONST $_ROM_PATCH7_DESTINATION              $ROM_PATCH7_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH8_EN                       0xFFE0F8; // RW   2 bits
.CONST $_ROM_PATCH8_EN                       $ROM_PATCH8_EN; // RW   2 bits
.CONST $ROM_PATCH8_SOURCE                   0xFFE0F9; // RW  20 bits
.CONST $_ROM_PATCH8_SOURCE                   $ROM_PATCH8_SOURCE; // RW  20 bits
.CONST $ROM_PATCH8_DESTINATION              0xFFE0FA; // RW  16 bits
.CONST $_ROM_PATCH8_DESTINATION              $ROM_PATCH8_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH9_EN                       0xFFE0FB; // RW   2 bits
.CONST $_ROM_PATCH9_EN                       $ROM_PATCH9_EN; // RW   2 bits
.CONST $ROM_PATCH9_SOURCE                   0xFFE0FC; // RW  20 bits
.CONST $_ROM_PATCH9_SOURCE                   $ROM_PATCH9_SOURCE; // RW  20 bits
.CONST $ROM_PATCH9_DESTINATION              0xFFE0FD; // RW  16 bits
.CONST $_ROM_PATCH9_DESTINATION              $ROM_PATCH9_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH10_EN                      0xFFE0FE; // RW   2 bits
.CONST $_ROM_PATCH10_EN                      $ROM_PATCH10_EN; // RW   2 bits
.CONST $ROM_PATCH10_SOURCE                  0xFFE0FF; // RW  20 bits
.CONST $_ROM_PATCH10_SOURCE                  $ROM_PATCH10_SOURCE; // RW  20 bits
.CONST $ROM_PATCH10_DESTINATION             0xFFE100; // RW  16 bits
.CONST $_ROM_PATCH10_DESTINATION             $ROM_PATCH10_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH11_EN                      0xFFE101; // RW   2 bits
.CONST $_ROM_PATCH11_EN                      $ROM_PATCH11_EN; // RW   2 bits
.CONST $ROM_PATCH11_SOURCE                  0xFFE102; // RW  20 bits
.CONST $_ROM_PATCH11_SOURCE                  $ROM_PATCH11_SOURCE; // RW  20 bits
.CONST $ROM_PATCH11_DESTINATION             0xFFE103; // RW  16 bits
.CONST $_ROM_PATCH11_DESTINATION             $ROM_PATCH11_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH12_EN                      0xFFE104; // RW   2 bits
.CONST $_ROM_PATCH12_EN                      $ROM_PATCH12_EN; // RW   2 bits
.CONST $ROM_PATCH12_SOURCE                  0xFFE105; // RW  20 bits
.CONST $_ROM_PATCH12_SOURCE                  $ROM_PATCH12_SOURCE; // RW  20 bits
.CONST $ROM_PATCH12_DESTINATION             0xFFE106; // RW  16 bits
.CONST $_ROM_PATCH12_DESTINATION             $ROM_PATCH12_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH13_EN                      0xFFE107; // RW   2 bits
.CONST $_ROM_PATCH13_EN                      $ROM_PATCH13_EN; // RW   2 bits
.CONST $ROM_PATCH13_SOURCE                  0xFFE108; // RW  20 bits
.CONST $_ROM_PATCH13_SOURCE                  $ROM_PATCH13_SOURCE; // RW  20 bits
.CONST $ROM_PATCH13_DESTINATION             0xFFE109; // RW  16 bits
.CONST $_ROM_PATCH13_DESTINATION             $ROM_PATCH13_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH14_EN                      0xFFE10A; // RW   2 bits
.CONST $_ROM_PATCH14_EN                      $ROM_PATCH14_EN; // RW   2 bits
.CONST $ROM_PATCH14_SOURCE                  0xFFE10B; // RW  20 bits
.CONST $_ROM_PATCH14_SOURCE                  $ROM_PATCH14_SOURCE; // RW  20 bits
.CONST $ROM_PATCH14_DESTINATION             0xFFE10C; // RW  16 bits
.CONST $_ROM_PATCH14_DESTINATION             $ROM_PATCH14_DESTINATION; // RW  16 bits
.CONST $ROM_PATCH15_EN                      0xFFE10D; // RW   2 bits
.CONST $_ROM_PATCH15_EN                      $ROM_PATCH15_EN; // RW   2 bits
.CONST $ROM_PATCH15_SOURCE                  0xFFE10E; // RW  20 bits
.CONST $_ROM_PATCH15_SOURCE                  $ROM_PATCH15_SOURCE; // RW  20 bits
.CONST $ROM_PATCH15_DESTINATION             0xFFE10F; // RW  16 bits
.CONST $_ROM_PATCH15_DESTINATION             $ROM_PATCH15_DESTINATION; // RW  16 bits
.CONST $PREFETCH_CONFIG                     0xFFE180; // RW   1 bits
.CONST $_PREFETCH_CONFIG                     $PREFETCH_CONFIG; // RW   1 bits
.CONST $PREFETCH_FLUSH                      0xFFE181; // RW   1 bits
.CONST $_PREFETCH_FLUSH                      $PREFETCH_FLUSH; // RW   1 bits
.CONST $PREFETCH_REQUEST_COUNT_MS           0xFFE182; //  R   8 bits
.CONST $_PREFETCH_REQUEST_COUNT_MS           $PREFETCH_REQUEST_COUNT_MS; //  R   8 bits
.CONST $PREFETCH_REQUEST_COUNT_LS           0xFFE183; //  R  24 bits
.CONST $_PREFETCH_REQUEST_COUNT_LS           $PREFETCH_REQUEST_COUNT_LS; //  R  24 bits
.CONST $PREFETCH_FETCH_COUNT_MS             0xFFE184; //  R   8 bits
.CONST $_PREFETCH_FETCH_COUNT_MS             $PREFETCH_FETCH_COUNT_MS; //  R   8 bits
.CONST $PREFETCH_FETCH_COUNT_LS             0xFFE185; //  R  24 bits
.CONST $_PREFETCH_FETCH_COUNT_LS             $PREFETCH_FETCH_COUNT_LS; //  R  24 bits
.CONST $PREFETCH_WAIT_OUT_COUNT_MS          0xFFE186; //  R   8 bits
.CONST $_PREFETCH_WAIT_OUT_COUNT_MS          $PREFETCH_WAIT_OUT_COUNT_MS; //  R   8 bits
.CONST $PREFETCH_WAIT_OUT_COUNT_LS          0xFFE187; //  R  24 bits
.CONST $_PREFETCH_WAIT_OUT_COUNT_LS          $PREFETCH_WAIT_OUT_COUNT_LS; //  R  24 bits
.CONST $AUDIO_SYS_TEST_REG                  0xFFF000; // RW  24 bits
.CONST $_AUDIO_SYS_TEST_REG                  $AUDIO_SYS_TEST_REG; // RW  24 bits
.CONST $AUDIO_SYS_PIO_DRIVE                 0xFFF001; // RW  16 bits
.CONST $_AUDIO_SYS_PIO_DRIVE                 $AUDIO_SYS_PIO_DRIVE; // RW  16 bits
.CONST $AUDIO_SYS_PIO_DRIVE_ENABLE          0xFFF002; // RW  16 bits
.CONST $_AUDIO_SYS_PIO_DRIVE_ENABLE          $AUDIO_SYS_PIO_DRIVE_ENABLE; // RW  16 bits
.CONST $AUDIO_SYS_PIO_STATUS                0xFFF003; //  R  16 bits
.CONST $_AUDIO_SYS_PIO_STATUS                $AUDIO_SYS_PIO_STATUS; //  R  16 bits
.CONST $AUDIO_SYS_PIO_DRIVE2                0xFFF004; // RW  16 bits
.CONST $_AUDIO_SYS_PIO_DRIVE2                $AUDIO_SYS_PIO_DRIVE2; // RW  16 bits
.CONST $AUDIO_SYS_PIO_DRIVE_ENABLE2         0xFFF005; // RW  16 bits
.CONST $_AUDIO_SYS_PIO_DRIVE_ENABLE2         $AUDIO_SYS_PIO_DRIVE_ENABLE2; // RW  16 bits
.CONST $AUDIO_SYS_PIO_STATUS2               0xFFF006; //  R  16 bits
.CONST $_AUDIO_SYS_PIO_STATUS2               $AUDIO_SYS_PIO_STATUS2; //  R  16 bits
.CONST $CLKGEN_TIMER_ENABLES                0xFFF010; // RW   2 bits
.CONST $_CLKGEN_TIMER_ENABLES                $CLKGEN_TIMER_ENABLES; // RW   2 bits
.CONST $CLKGEN_MINMAX_MMU_RATE              0xFFF011; // RW  16 bits
.CONST $_CLKGEN_MINMAX_MMU_RATE              $CLKGEN_MINMAX_MMU_RATE; // RW  16 bits
.CONST $CLKGEN_DEBUG_SELECT                 0xFFF012; // RW   4 bits
.CONST $_CLKGEN_DEBUG_SELECT                 $CLKGEN_DEBUG_SELECT; // RW   4 bits
.CONST $CLKGEN_RANDOM_NUMBER                0xFFF013; //  R  16 bits
.CONST $_CLKGEN_RANDOM_NUMBER                $CLKGEN_RANDOM_NUMBER; //  R  16 bits
.CONST $CLKGEN_TIMER_FAST_STATUS            0xFFF014; //  R  16 bits
.CONST $_CLKGEN_TIMER_FAST_STATUS            $CLKGEN_TIMER_FAST_STATUS; //  R  16 bits
.CONST $CLKGEN_CLOCK_RATE_STATUS            0xFFF015; //  R  12 bits
.CONST $_CLKGEN_CLOCK_RATE_STATUS            $CLKGEN_CLOCK_RATE_STATUS; //  R  12 bits
.CONST $CLKGEN_ENABLES                      0xFFF016; // RW  10 bits
.CONST $_CLKGEN_ENABLES                      $CLKGEN_ENABLES; // RW  10 bits
.CONST $CLKGEN_CLK_REQ_ENABLES              0xFFF017; // RW   2 bits
.CONST $_CLKGEN_CLK_REQ_ENABLES              $CLKGEN_CLK_REQ_ENABLES; // RW   2 bits
.CONST $CLKGEN_ACTIVITY_ENABLES             0xFFF018; // RW  11 bits
.CONST $_CLKGEN_ACTIVITY_ENABLES             $CLKGEN_ACTIVITY_ENABLES; // RW  11 bits
.CONST $CLKGEN_ACTIVITY_STATUS              0xFFF019; //  R  11 bits
.CONST $_CLKGEN_ACTIVITY_STATUS              $CLKGEN_ACTIVITY_STATUS; //  R  11 bits
.CONST $CLKGEN_FM_ENABLES                   0xFFF01A; // RW   8 bits
.CONST $_CLKGEN_FM_ENABLES                   $CLKGEN_FM_ENABLES; // RW   8 bits
.CONST $CLKGEN_FM_CLK_REQ_ENABLES           0xFFF01B; // RW   1 bits
.CONST $_CLKGEN_FM_CLK_REQ_ENABLES           $CLKGEN_FM_CLK_REQ_ENABLES; // RW   1 bits
.CONST $CLKGEN_AUDIO_ENABLES                0xFFF01C; // RW  16 bits
.CONST $_CLKGEN_AUDIO_ENABLES                $CLKGEN_AUDIO_ENABLES; // RW  16 bits
.CONST $CLKGEN_AUDIO_ENABLES2               0xFFF01D; // RW   4 bits
.CONST $_CLKGEN_AUDIO_ENABLES2               $CLKGEN_AUDIO_ENABLES2; // RW   4 bits
.CONST $CLKGEN_AUDIO_CLK_REQ_ENABLES        0xFFF01E; // RW   5 bits
.CONST $_CLKGEN_AUDIO_CLK_REQ_ENABLES        $CLKGEN_AUDIO_CLK_REQ_ENABLES; // RW   5 bits
.CONST $CLKGEN_SQIF_CFG                     0xFFF01F; // RW   4 bits
.CONST $_CLKGEN_SQIF_CFG                     $CLKGEN_SQIF_CFG; // RW   4 bits
.CONST $CLKGEN_STATUS                       0xFFF020; //  R  16 bits
.CONST $_CLKGEN_STATUS                       $CLKGEN_STATUS; //  R  16 bits
.CONST $BUS_INT_SELECT                      0xFFF030; // RW   2 bits
.CONST $_BUS_INT_SELECT                      $BUS_INT_SELECT; // RW   2 bits
.CONST $BUS_INT_MASK                        0xFFF031; // RW  16 bits
.CONST $_BUS_INT_MASK                        $BUS_INT_MASK; // RW  16 bits
.CONST $BUS_INT_CLEAR                       0xFFF032; // RW  16 bits
.CONST $_BUS_INT_CLEAR                       $BUS_INT_CLEAR; // RW  16 bits
.CONST $BUS_INT_STATUS                      0xFFF033; //  R  16 bits
.CONST $_BUS_INT_STATUS                      $BUS_INT_STATUS; //  R  16 bits
.CONST $BUS_INT_CONFIG                      0xFFF034; // RW  10 bits
.CONST $_BUS_INT_CONFIG                      $BUS_INT_CONFIG; // RW  10 bits
.CONST $BUS_INT_CONFIG_STATUS               0xFFF035; //  R  10 bits
.CONST $_BUS_INT_CONFIG_STATUS               $BUS_INT_CONFIG_STATUS; //  R  10 bits
.CONST $BUS_INT_MASK_STATUS                 0xFFF036; //  R  16 bits
.CONST $_BUS_INT_MASK_STATUS                 $BUS_INT_MASK_STATUS; //  R  16 bits
.CONST $BUS_MESSAGE_TX_DESTINATION          0xFFF040; // RW   9 bits
.CONST $_BUS_MESSAGE_TX_DESTINATION          $BUS_MESSAGE_TX_DESTINATION; // RW   9 bits
.CONST $BUS_MESSAGE_TX_LIMIT                0xFFF041; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_LIMIT                $BUS_MESSAGE_TX_LIMIT; // RW  16 bits
.CONST $BUS_MESSAGE_TX_RETRY_GAP            0xFFF042; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_RETRY_GAP            $BUS_MESSAGE_TX_RETRY_GAP; // RW  16 bits
.CONST $BUS_MESSAGE_TX_STOP                 0xFFF043; // RW   1 bits
.CONST $_BUS_MESSAGE_TX_STOP                 $BUS_MESSAGE_TX_STOP; // RW   1 bits
.CONST $BUS_MESSAGE_TX_BODY0                0xFFF044; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_BODY0                $BUS_MESSAGE_TX_BODY0; // RW  16 bits
.CONST $BUS_MESSAGE_TX_BODY1                0xFFF045; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_BODY1                $BUS_MESSAGE_TX_BODY1; // RW  16 bits
.CONST $BUS_MESSAGE_TX_BODY2                0xFFF046; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_BODY2                $BUS_MESSAGE_TX_BODY2; // RW  16 bits
.CONST $BUS_MESSAGE_TX_BODY3                0xFFF047; // RW  16 bits
.CONST $_BUS_MESSAGE_TX_BODY3                $BUS_MESSAGE_TX_BODY3; // RW  16 bits
.CONST $BUS_MESSAGE_TX_COUNT                0xFFF048; //  R  16 bits
.CONST $_BUS_MESSAGE_TX_COUNT                $BUS_MESSAGE_TX_COUNT; //  R  16 bits
.CONST $BUS_MESSAGE_RX_ACK                  0xFFF049; // RW   1 bits
.CONST $_BUS_MESSAGE_RX_ACK                  $BUS_MESSAGE_RX_ACK; // RW   1 bits
.CONST $BUS_MESSAGE_RX_BODY0                0xFFF04A; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY0                $BUS_MESSAGE_RX_BODY0; //  R  16 bits
.CONST $BUS_MESSAGE_RX_BODY1                0xFFF04B; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY1                $BUS_MESSAGE_RX_BODY1; //  R  16 bits
.CONST $BUS_MESSAGE_RX_BODY2                0xFFF04C; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY2                $BUS_MESSAGE_RX_BODY2; //  R  16 bits
.CONST $BUS_MESSAGE_RX_BODY3                0xFFF04D; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY3                $BUS_MESSAGE_RX_BODY3; //  R  16 bits
.CONST $BUS_MESSAGE_RX_BODY4                0xFFF04E; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY4                $BUS_MESSAGE_RX_BODY4; //  R  16 bits
.CONST $BUS_MESSAGE_RX_BODY5                0xFFF04F; //  R  16 bits
.CONST $_BUS_MESSAGE_RX_BODY5                $BUS_MESSAGE_RX_BODY5; //  R  16 bits
.CONST $BUS_MESSAGE_TX_HEADER               0xFFF050; // RW  32 bits
.CONST $_BUS_MESSAGE_TX_HEADER               $BUS_MESSAGE_TX_HEADER; // RW  32 bits
.CONST $_BUS_MESSAGE_TX_HEADER_MSW           $BUS_MESSAGE_TX_HEADER; // RW 
.CONST $_BUS_MESSAGE_TX_HEADER_LSW           0xFFF051; // RW 
.CONST $SQIF_INST                           0xFFF060; // RW  16 bits
.CONST $_SQIF_INST                           $SQIF_INST; // RW  16 bits
.CONST $SQIF_CONF                           0xFFF061; // RW  15 bits
.CONST $_SQIF_CONF                           $SQIF_CONF; // RW  15 bits
.CONST $SQIF_CTRL                           0xFFF062; // RW  16 bits
.CONST $_SQIF_CTRL                           $SQIF_CTRL; // RW  16 bits
.CONST $SQIF_PEEK                           0xFFF063; //  R   8 bits
.CONST $_SQIF_PEEK                           $SQIF_PEEK; //  R   8 bits
.CONST $SQIF_PEEK_GO                        0xFFF064; // RW   1 bits
.CONST $_SQIF_PEEK_GO                        $SQIF_PEEK_GO; // RW   1 bits
.CONST $SQIF_POKE                           0xFFF065; // RW   8 bits
.CONST $_SQIF_POKE                           $SQIF_POKE; // RW   8 bits
.CONST $SQIF_POKE_LAST                      0xFFF066; // RW   8 bits
.CONST $_SQIF_POKE_LAST                      $SQIF_POKE_LAST; // RW   8 bits
.CONST $LPC_BUS_STATUS                      0xFFF070; //  R   9 bits
.CONST $_LPC_BUS_STATUS                      $LPC_BUS_STATUS; //  R   9 bits
.CONST $LPC_M_CFG                           0xFFF071; // RW  14 bits
.CONST $_LPC_M_CFG                           $LPC_M_CFG; // RW  14 bits
.CONST $LPC_M_CFG_STATUS                    0xFFF072; //  R  13 bits
.CONST $_LPC_M_CFG_STATUS                    $LPC_M_CFG_STATUS; //  R  13 bits
.CONST $LPC_M_LINK_CTL                      0xFFF073; // RW   8 bits
.CONST $_LPC_M_LINK_CTL                      $LPC_M_LINK_CTL; // RW   8 bits
.CONST $LPC_M_LINK_CTL_STATUS               0xFFF074; //  R   7 bits
.CONST $_LPC_M_LINK_CTL_STATUS               $LPC_M_LINK_CTL_STATUS; //  R   7 bits
.CONST $LPC_M_LINK_RST                      0xFFF075; // RW   1 bits
.CONST $_LPC_M_LINK_RST                      $LPC_M_LINK_RST; // RW   1 bits
.CONST $LPC_PAD_CONFIG                      0xFFF076; // RW  12 bits
.CONST $_LPC_PAD_CONFIG                      $LPC_PAD_CONFIG; // RW  12 bits
.CONST $LPC_STATUS                          0xFFF077; //  R   1 bits
.CONST $_LPC_STATUS                          $LPC_STATUS; //  R   1 bits
.CONST $LPC_S_LINK_CTL                      0xFFF078; //  R   7 bits
.CONST $_LPC_S_LINK_CTL                      $LPC_S_LINK_CTL; //  R   7 bits
.CONST $LPC_M_ADDR_OFFSET                   0xFFF079; // RW   8 bits
.CONST $_LPC_M_ADDR_OFFSET                   $LPC_M_ADDR_OFFSET; // RW   8 bits
.CONST $SUB_SYS_CHIP_VERSION                0xFFF080; //  R  16 bits
.CONST $_SUB_SYS_CHIP_VERSION                $SUB_SYS_CHIP_VERSION; //  R  16 bits
.CONST $SUB_SYS_MAILBOX0                    0xFFF081; // RW  16 bits
.CONST $_SUB_SYS_MAILBOX0                    $SUB_SYS_MAILBOX0; // RW  16 bits
.CONST $SUB_SYS_MAILBOX1                    0xFFF082; // RW  16 bits
.CONST $_SUB_SYS_MAILBOX1                    $SUB_SYS_MAILBOX1; // RW  16 bits
.CONST $SUB_SYS_MAILBOX2                    0xFFF083; // RW  16 bits
.CONST $_SUB_SYS_MAILBOX2                    $SUB_SYS_MAILBOX2; // RW  16 bits
.CONST $SUB_SYS_MAILBOX3                    0xFFF084; // RW  16 bits
.CONST $_SUB_SYS_MAILBOX3                    $SUB_SYS_MAILBOX3; // RW  16 bits
.CONST $SUB_SYS_REG_SRC_HASH                0xFFF085; //  R  16 bits
.CONST $_SUB_SYS_REG_SRC_HASH                $SUB_SYS_REG_SRC_HASH; //  R  16 bits
.CONST $SUB_SYS_DEBUG_SELECT                0xFFF086; // RW   6 bits
.CONST $_SUB_SYS_DEBUG_SELECT                $SUB_SYS_DEBUG_SELECT; // RW   6 bits
.CONST $SUB_SYS_DEBUG_STATUS                0xFFF087; //  R  32 bits
.CONST $_SUB_SYS_DEBUG_STATUS                $SUB_SYS_DEBUG_STATUS; //  R  32 bits
.CONST $_SUB_SYS_DEBUG_STATUS_MSW            $SUB_SYS_DEBUG_STATUS; //  R 
.CONST $_SUB_SYS_DEBUG_STATUS_LSW            0xFFF088; //  R 
.CONST $SUB_SYS_TRANSACTION_MUX_DBG_SEL     0xFFF089; // RW   6 bits
.CONST $_SUB_SYS_TRANSACTION_MUX_DBG_SEL     $SUB_SYS_TRANSACTION_MUX_DBG_SEL; // RW   6 bits
.CONST $SUB_SYS_MISC_ENABLES                0xFFF08A; // RW   7 bits
.CONST $_SUB_SYS_MISC_ENABLES                $SUB_SYS_MISC_ENABLES; // RW   7 bits
.CONST $SUB_SYS_RST_STATUS                  0xFFF08B; // RW   3 bits
.CONST $_SUB_SYS_RST_STATUS                  $SUB_SYS_RST_STATUS; // RW   3 bits
.CONST $SUB_SYS_P0_INTERRUPT1               0xFFF08C; // RW  16 bits
.CONST $_SUB_SYS_P0_INTERRUPT1               $SUB_SYS_P0_INTERRUPT1; // RW  16 bits
.CONST $SUB_SYS_P0_INTERRUPT2               0xFFF08D; // RW  16 bits
.CONST $_SUB_SYS_P0_INTERRUPT2               $SUB_SYS_P0_INTERRUPT2; // RW  16 bits
.CONST $SUB_SYS_ID                          0xFFF093; //  R   4 bits
.CONST $_SUB_SYS_ID                          $SUB_SYS_ID; //  R   4 bits
.CONST $PIO_SELECT0                         0xFFF0A0; // RW   5 bits
.CONST $_PIO_SELECT0                         $PIO_SELECT0; // RW   5 bits
.CONST $PIO_SELECT1                         0xFFF0A1; // RW   5 bits
.CONST $_PIO_SELECT1                         $PIO_SELECT1; // RW   5 bits
.CONST $PIO_SELECT2                         0xFFF0A2; // RW   5 bits
.CONST $_PIO_SELECT2                         $PIO_SELECT2; // RW   5 bits
.CONST $PIO_SELECT3                         0xFFF0A3; // RW   5 bits
.CONST $_PIO_SELECT3                         $PIO_SELECT3; // RW   5 bits
.CONST $PIO_SELECT4                         0xFFF0A4; // RW   5 bits
.CONST $_PIO_SELECT4                         $PIO_SELECT4; // RW   5 bits
.CONST $PIO_SELECT5                         0xFFF0A5; // RW   5 bits
.CONST $_PIO_SELECT5                         $PIO_SELECT5; // RW   5 bits
.CONST $PIO_SELECT6                         0xFFF0A6; // RW   5 bits
.CONST $_PIO_SELECT6                         $PIO_SELECT6; // RW   5 bits
.CONST $PIO_SELECT7                         0xFFF0A7; // RW   5 bits
.CONST $_PIO_SELECT7                         $PIO_SELECT7; // RW   5 bits
.CONST $PIO_SELECT8                         0xFFF0A8; // RW   5 bits
.CONST $_PIO_SELECT8                         $PIO_SELECT8; // RW   5 bits
.CONST $PIO_SELECT9                         0xFFF0A9; // RW   5 bits
.CONST $_PIO_SELECT9                         $PIO_SELECT9; // RW   5 bits
.CONST $PIO_SELECT10                        0xFFF0AA; // RW   5 bits
.CONST $_PIO_SELECT10                        $PIO_SELECT10; // RW   5 bits
.CONST $PIO_SELECT11                        0xFFF0AB; // RW   5 bits
.CONST $_PIO_SELECT11                        $PIO_SELECT11; // RW   5 bits
.CONST $PIO_SELECT12                        0xFFF0AC; // RW   5 bits
.CONST $_PIO_SELECT12                        $PIO_SELECT12; // RW   5 bits
.CONST $PIO_SELECT13                        0xFFF0AD; // RW   5 bits
.CONST $_PIO_SELECT13                        $PIO_SELECT13; // RW   5 bits
.CONST $PIO_SELECT14                        0xFFF0AE; // RW   5 bits
.CONST $_PIO_SELECT14                        $PIO_SELECT14; // RW   5 bits
.CONST $PIO_SELECT15                        0xFFF0AF; // RW   5 bits
.CONST $_PIO_SELECT15                        $PIO_SELECT15; // RW   5 bits
.CONST $PIO_SELECT16                        0xFFF0B0; // RW   5 bits
.CONST $_PIO_SELECT16                        $PIO_SELECT16; // RW   5 bits
.CONST $PIO_SELECT17                        0xFFF0B1; // RW   5 bits
.CONST $_PIO_SELECT17                        $PIO_SELECT17; // RW   5 bits
.CONST $PIO_SELECT18                        0xFFF0B2; // RW   5 bits
.CONST $_PIO_SELECT18                        $PIO_SELECT18; // RW   5 bits
.CONST $PIO_SELECT19                        0xFFF0B3; // RW   5 bits
.CONST $_PIO_SELECT19                        $PIO_SELECT19; // RW   5 bits
.CONST $PIO_SELECT20                        0xFFF0B4; // RW   5 bits
.CONST $_PIO_SELECT20                        $PIO_SELECT20; // RW   5 bits
.CONST $PIO_SELECT21                        0xFFF0B5; // RW   5 bits
.CONST $_PIO_SELECT21                        $PIO_SELECT21; // RW   5 bits
.CONST $PIO_SELECT22                        0xFFF0B6; // RW   5 bits
.CONST $_PIO_SELECT22                        $PIO_SELECT22; // RW   5 bits
.CONST $PIO_SELECT23                        0xFFF0B7; // RW   5 bits
.CONST $_PIO_SELECT23                        $PIO_SELECT23; // RW   5 bits
.CONST $PIO_SELECT24                        0xFFF0B8; // RW   5 bits
.CONST $_PIO_SELECT24                        $PIO_SELECT24; // RW   5 bits
.CONST $PIO_SELECT25                        0xFFF0B9; // RW   5 bits
.CONST $_PIO_SELECT25                        $PIO_SELECT25; // RW   5 bits
.CONST $PIO_SELECT26                        0xFFF0BA; // RW   5 bits
.CONST $_PIO_SELECT26                        $PIO_SELECT26; // RW   5 bits
.CONST $PIO_SELECT27                        0xFFF0BB; // RW   5 bits
.CONST $_PIO_SELECT27                        $PIO_SELECT27; // RW   5 bits
.CONST $PIO_SELECT28                        0xFFF0BC; // RW   5 bits
.CONST $_PIO_SELECT28                        $PIO_SELECT28; // RW   5 bits
.CONST $PIO_SELECT29                        0xFFF0BD; // RW   5 bits
.CONST $_PIO_SELECT29                        $PIO_SELECT29; // RW   5 bits
.CONST $PIO_SELECT30                        0xFFF0BE; // RW   5 bits
.CONST $_PIO_SELECT30                        $PIO_SELECT30; // RW   5 bits
.CONST $PIO_SELECT31                        0xFFF0BF; // RW   5 bits
.CONST $_PIO_SELECT31                        $PIO_SELECT31; // RW   5 bits
.CONST $PIO_OUTPUT_INVERT                   0xFFF0C0; // RW  16 bits
.CONST $_PIO_OUTPUT_INVERT                   $PIO_OUTPUT_INVERT; // RW  16 bits
.CONST $PIO_PULL_STRONG_SEL                 0xFFF0C1; // RW  16 bits
.CONST $_PIO_PULL_STRONG_SEL                 $PIO_PULL_STRONG_SEL; // RW  16 bits
.CONST $PIO_PULL_UP_SEL                     0xFFF0C2; // RW  16 bits
.CONST $_PIO_PULL_UP_SEL                     $PIO_PULL_UP_SEL; // RW  16 bits
.CONST $PIO_STICKY_EN                       0xFFF0C3; // RW  16 bits
.CONST $_PIO_STICKY_EN                       $PIO_STICKY_EN; // RW  16 bits
.CONST $PIO_PULL_EN                         0xFFF0C4; // RW  16 bits
.CONST $_PIO_PULL_EN                         $PIO_PULL_EN; // RW  16 bits
.CONST $PIO_SLEW_EN                         0xFFF0C5; // RW  16 bits
.CONST $_PIO_SLEW_EN                         $PIO_SLEW_EN; // RW  16 bits
.CONST $PIO_DRIVE_STRENGTH                  0xFFF0C6; // RW  32 bits
.CONST $_PIO_DRIVE_STRENGTH                  $PIO_DRIVE_STRENGTH; // RW  32 bits
.CONST $_PIO_DRIVE_STRENGTH_MSW              $PIO_DRIVE_STRENGTH; // RW 
.CONST $_PIO_DRIVE_STRENGTH_LSW              0xFFF0C7; // RW 
.CONST $PIO_PULL_STRONG_SEL2                0xFFF0C8; // RW  16 bits
.CONST $_PIO_PULL_STRONG_SEL2                $PIO_PULL_STRONG_SEL2; // RW  16 bits
.CONST $PIO_PULL_UP_SEL2                    0xFFF0C9; // RW  16 bits
.CONST $_PIO_PULL_UP_SEL2                    $PIO_PULL_UP_SEL2; // RW  16 bits
.CONST $PIO_STICKY_EN2                      0xFFF0CA; // RW  16 bits
.CONST $_PIO_STICKY_EN2                      $PIO_STICKY_EN2; // RW  16 bits
.CONST $PIO_PULL_EN2                        0xFFF0CB; // RW  16 bits
.CONST $_PIO_PULL_EN2                        $PIO_PULL_EN2; // RW  16 bits
.CONST $PIO_OUTPUT_INVERT2                  0xFFF0CC; // RW  16 bits
.CONST $_PIO_OUTPUT_INVERT2                  $PIO_OUTPUT_INVERT2; // RW  16 bits
.CONST $PIO_SLEW_EN2                        0xFFF0CD; // RW  16 bits
.CONST $_PIO_SLEW_EN2                        $PIO_SLEW_EN2; // RW  16 bits
.CONST $PIO_DRIVE_STRENGTH2                 0xFFF0CE; // RW  32 bits
.CONST $_PIO_DRIVE_STRENGTH2                 $PIO_DRIVE_STRENGTH2; // RW  32 bits
.CONST $_PIO_DRIVE_STRENGTH2_MSW             $PIO_DRIVE_STRENGTH2; // RW 
.CONST $_PIO_DRIVE_STRENGTH2_LSW             0xFFF0CF; // RW 
.CONST $PIO_DIG_MIC_DATA_SELECT             0xFFF0D0; // RW   5 bits
.CONST $_PIO_DIG_MIC_DATA_SELECT             $PIO_DIG_MIC_DATA_SELECT; // RW   5 bits
.CONST $PIO_DIG_MIC1_DATA_SELECT            0xFFF0D1; // RW   5 bits
.CONST $_PIO_DIG_MIC1_DATA_SELECT            $PIO_DIG_MIC1_DATA_SELECT; // RW   5 bits
.CONST $PIO_DIG_MIC2_DATA_SELECT            0xFFF0D2; // RW   5 bits
.CONST $_PIO_DIG_MIC2_DATA_SELECT            $PIO_DIG_MIC2_DATA_SELECT; // RW   5 bits
.CONST $BAC_OUTBOUND_VML_BUFFER_HANDLE      0xFFF0E0; // RW  12 bits
.CONST $_BAC_OUTBOUND_VML_BUFFER_HANDLE      $BAC_OUTBOUND_VML_BUFFER_HANDLE; // RW  12 bits
.CONST $BAC_OUTBOUND_VML_WRITEBACK_PARAMS   0xFFF0E1; // RW  19 bits
.CONST $_BAC_OUTBOUND_VML_WRITEBACK_PARAMS   $BAC_OUTBOUND_VML_WRITEBACK_PARAMS; // RW  19 bits
.CONST $BAC_OUTBOUND_VML_TRIG_VML           0xFFF0E2; // RW   1 bits
.CONST $_BAC_OUTBOUND_VML_TRIG_VML           $BAC_OUTBOUND_VML_TRIG_VML; // RW   1 bits
.CONST $BAC_OUTBOUND_VML_STATUS             0xFFF0E3; //  R   5 bits
.CONST $_BAC_OUTBOUND_VML_STATUS             $BAC_OUTBOUND_VML_STATUS; //  R   5 bits
.CONST $BAC_OUTBOUND_VML_READ_OFFSET        0xFFF0E4; //  R  18 bits
.CONST $_BAC_OUTBOUND_VML_READ_OFFSET        $BAC_OUTBOUND_VML_READ_OFFSET; //  R  18 bits
.CONST $BAC_RW0_MAPPING                     0xFFF0E5; // RW  12 bits
.CONST $_BAC_RW0_MAPPING                     $BAC_RW0_MAPPING; // RW  12 bits
.CONST $BAC_RW0_PARAMS                      0xFFF0E6; // RW   6 bits
.CONST $_BAC_RW0_PARAMS                      $BAC_RW0_PARAMS; // RW   6 bits
.CONST $BAC_RW0_OFFSET                      0xFFF0E7; // RW  24 bits
.CONST $_BAC_RW0_OFFSET                      $BAC_RW0_OFFSET; // RW  24 bits
.CONST $BAC_RW1_MAPPING                     0xFFF0E8; // RW  12 bits
.CONST $_BAC_RW1_MAPPING                     $BAC_RW1_MAPPING; // RW  12 bits
.CONST $BAC_RW1_PARAMS                      0xFFF0E9; // RW   6 bits
.CONST $_BAC_RW1_PARAMS                      $BAC_RW1_PARAMS; // RW   6 bits
.CONST $BAC_RW1_OFFSET                      0xFFF0EA; // RW  24 bits
.CONST $_BAC_RW1_OFFSET                      $BAC_RW1_OFFSET; // RW  24 bits
.CONST $BAC_RW2_MAPPING                     0xFFF0EB; // RW  12 bits
.CONST $_BAC_RW2_MAPPING                     $BAC_RW2_MAPPING; // RW  12 bits
.CONST $BAC_RW2_PARAMS                      0xFFF0EC; // RW   6 bits
.CONST $_BAC_RW2_PARAMS                      $BAC_RW2_PARAMS; // RW   6 bits
.CONST $BAC_RW2_OFFSET                      0xFFF0ED; // RW  24 bits
.CONST $_BAC_RW2_OFFSET                      $BAC_RW2_OFFSET; // RW  24 bits
.CONST $BAC_RW3_MAPPING                     0xFFF0EE; // RW  12 bits
.CONST $_BAC_RW3_MAPPING                     $BAC_RW3_MAPPING; // RW  12 bits
.CONST $BAC_RW3_PARAMS                      0xFFF0EF; // RW   6 bits
.CONST $_BAC_RW3_PARAMS                      $BAC_RW3_PARAMS; // RW   6 bits
.CONST $BAC_RW3_OFFSET                      0xFFF0F0; // RW  24 bits
.CONST $_BAC_RW3_OFFSET                      $BAC_RW3_OFFSET; // RW  24 bits
.CONST $BAC_RW_VML_ERROR_INT_STATUS         0xFFF0F1; //  R  16 bits
.CONST $_BAC_RW_VML_ERROR_INT_STATUS         $BAC_RW_VML_ERROR_INT_STATUS; //  R  16 bits
.CONST $BAC_RW_ACCESS_ERROR_INT_STATUS      0xFFF0F2; //  R  16 bits
.CONST $_BAC_RW_ACCESS_ERROR_INT_STATUS      $BAC_RW_ACCESS_ERROR_INT_STATUS; //  R  16 bits
.CONST $BAC_RW_VML_ERROR_INT_CLEAR          0xFFF0F3; // RW   4 bits
.CONST $_BAC_RW_VML_ERROR_INT_CLEAR          $BAC_RW_VML_ERROR_INT_CLEAR; // RW   4 bits
.CONST $BAC_RW_ACCESS_ERROR_INT_CLEAR       0xFFF0F4; // RW   4 bits
.CONST $_BAC_RW_ACCESS_ERROR_INT_CLEAR       $BAC_RW_ACCESS_ERROR_INT_CLEAR; // RW   4 bits
.CONST $BAC_HOST_BLOCK_ID                   0xFFF0F5; // RW   4 bits
.CONST $_BAC_HOST_BLOCK_ID                   $BAC_HOST_BLOCK_ID; // RW   4 bits
.CONST $BAC_HOST_WRITE_REQ_EN               0xFFF0F6; // RW   1 bits
.CONST $_BAC_HOST_WRITE_REQ_EN               $BAC_HOST_WRITE_REQ_EN; // RW   1 bits
.CONST $BAC_HOST_ACCESS_ERROR_INT_STATUS    0xFFF0F7; //  R   4 bits
.CONST $_BAC_HOST_ACCESS_ERROR_INT_STATUS    $BAC_HOST_ACCESS_ERROR_INT_STATUS; //  R   4 bits
.CONST $BAC_HOST_ACCESS_ERROR_INT_CLEAR     0xFFF0F8; // RW   1 bits
.CONST $_BAC_HOST_ACCESS_ERROR_INT_CLEAR     $BAC_HOST_ACCESS_ERROR_INT_CLEAR; // RW   1 bits
.CONST $BAC_BUFFER_HANDLE_BLOCK_OFFSET      0xFFF0F9; // RW  16 bits
.CONST $_BAC_BUFFER_HANDLE_BLOCK_OFFSET      $BAC_BUFFER_HANDLE_BLOCK_OFFSET; // RW  16 bits
.CONST $BAC_LOCAL_ADPTR_CLEAR               0xFFF0FA; // RW   4 bits
.CONST $_BAC_LOCAL_ADPTR_CLEAR               $BAC_LOCAL_ADPTR_CLEAR; // RW   4 bits
.CONST $ROM_CTRL_PM_48KX64_LS               0xFFF100; // RW   1 bits
.CONST $_ROM_CTRL_PM_48KX64_LS               $ROM_CTRL_PM_48KX64_LS; // RW   1 bits
.CONST $ROM_CTRL_PM_48KX64_SD               0xFFF101; // RW   1 bits
.CONST $_ROM_CTRL_PM_48KX64_SD               $ROM_CTRL_PM_48KX64_SD; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_AWAKE_DS         0xFFF102; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_AWAKE_DS         $RAM_CTRL_PM0_1KX32_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_AWAKE_LS         0xFFF103; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_AWAKE_LS         $RAM_CTRL_PM0_1KX32_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_AWAKE_SD         0xFFF104; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_AWAKE_SD         $RAM_CTRL_PM0_1KX32_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_AWAKE_DS         0xFFF105; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_AWAKE_DS         $RAM_CTRL_PM1_1KX32_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_AWAKE_LS         0xFFF106; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_AWAKE_LS         $RAM_CTRL_PM1_1KX32_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_AWAKE_SD         0xFFF107; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_AWAKE_SD         $RAM_CTRL_PM1_1KX32_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_AWAKE_DS         0xFFF108; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_AWAKE_DS         $RAM_CTRL_PM2_2KX32_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_AWAKE_LS         0xFFF109; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_AWAKE_LS         $RAM_CTRL_PM2_2KX32_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_AWAKE_SD         0xFFF10A; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_AWAKE_SD         $RAM_CTRL_PM2_2KX32_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_AWAKE_DS         0xFFF10B; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_AWAKE_DS         $RAM_CTRL_DM0_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_AWAKE_LS         0xFFF10C; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_AWAKE_LS         $RAM_CTRL_DM0_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_AWAKE_SD         0xFFF10D; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_AWAKE_SD         $RAM_CTRL_DM0_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_AWAKE_DS         0xFFF10E; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_AWAKE_DS         $RAM_CTRL_DM1_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_AWAKE_LS         0xFFF10F; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_AWAKE_LS         $RAM_CTRL_DM1_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_AWAKE_SD         0xFFF110; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_AWAKE_SD         $RAM_CTRL_DM1_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_AWAKE_DS         0xFFF111; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_AWAKE_DS         $RAM_CTRL_DM2_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_AWAKE_LS         0xFFF112; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_AWAKE_LS         $RAM_CTRL_DM2_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_AWAKE_SD         0xFFF113; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_AWAKE_SD         $RAM_CTRL_DM2_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_AWAKE_DS         0xFFF114; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_AWAKE_DS         $RAM_CTRL_DM3_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_AWAKE_LS         0xFFF115; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_AWAKE_LS         $RAM_CTRL_DM3_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_AWAKE_SD         0xFFF116; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_AWAKE_SD         $RAM_CTRL_DM3_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_AWAKE_DS         0xFFF117; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_AWAKE_DS         $RAM_CTRL_DM4_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_AWAKE_LS         0xFFF118; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_AWAKE_LS         $RAM_CTRL_DM4_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_AWAKE_SD         0xFFF119; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_AWAKE_SD         $RAM_CTRL_DM4_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_AWAKE_DS         0xFFF11A; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_AWAKE_DS         $RAM_CTRL_DM5_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_AWAKE_LS         0xFFF11B; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_AWAKE_LS         $RAM_CTRL_DM5_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_AWAKE_SD         0xFFF11C; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_AWAKE_SD         $RAM_CTRL_DM5_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_AWAKE_DS         0xFFF11D; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_AWAKE_DS         $RAM_CTRL_DM6_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_AWAKE_LS         0xFFF11E; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_AWAKE_LS         $RAM_CTRL_DM6_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_AWAKE_SD         0xFFF11F; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_AWAKE_SD         $RAM_CTRL_DM6_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_AWAKE_DS         0xFFF120; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_AWAKE_DS         $RAM_CTRL_DM7_2KX24_AWAKE_DS; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_AWAKE_LS         0xFFF121; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_AWAKE_LS         $RAM_CTRL_DM7_2KX24_AWAKE_LS; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_AWAKE_SD         0xFFF122; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_AWAKE_SD         $RAM_CTRL_DM7_2KX24_AWAKE_SD; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_ASLEEP_DS        0xFFF12E; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_ASLEEP_DS        $RAM_CTRL_PM0_1KX32_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_ASLEEP_LS        0xFFF12F; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_ASLEEP_LS        $RAM_CTRL_PM0_1KX32_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_PM0_1KX32_ASLEEP_SD        0xFFF130; // RW   1 bits
.CONST $_RAM_CTRL_PM0_1KX32_ASLEEP_SD        $RAM_CTRL_PM0_1KX32_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_ASLEEP_DS        0xFFF131; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_ASLEEP_DS        $RAM_CTRL_PM1_1KX32_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_ASLEEP_LS        0xFFF132; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_ASLEEP_LS        $RAM_CTRL_PM1_1KX32_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_PM1_1KX32_ASLEEP_SD        0xFFF133; // RW   1 bits
.CONST $_RAM_CTRL_PM1_1KX32_ASLEEP_SD        $RAM_CTRL_PM1_1KX32_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_ASLEEP_DS        0xFFF134; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_ASLEEP_DS        $RAM_CTRL_PM2_2KX32_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_ASLEEP_LS        0xFFF135; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_ASLEEP_LS        $RAM_CTRL_PM2_2KX32_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_PM2_2KX32_ASLEEP_SD        0xFFF136; // RW   1 bits
.CONST $_RAM_CTRL_PM2_2KX32_ASLEEP_SD        $RAM_CTRL_PM2_2KX32_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_ASLEEP_DS        0xFFF137; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_ASLEEP_DS        $RAM_CTRL_DM0_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_ASLEEP_LS        0xFFF138; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_ASLEEP_LS        $RAM_CTRL_DM0_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM0_2KX24_ASLEEP_SD        0xFFF139; // RW   1 bits
.CONST $_RAM_CTRL_DM0_2KX24_ASLEEP_SD        $RAM_CTRL_DM0_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_ASLEEP_DS        0xFFF13A; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_ASLEEP_DS        $RAM_CTRL_DM1_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_ASLEEP_LS        0xFFF13B; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_ASLEEP_LS        $RAM_CTRL_DM1_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM1_2KX24_ASLEEP_SD        0xFFF13C; // RW   1 bits
.CONST $_RAM_CTRL_DM1_2KX24_ASLEEP_SD        $RAM_CTRL_DM1_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_ASLEEP_DS        0xFFF13D; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_ASLEEP_DS        $RAM_CTRL_DM2_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_ASLEEP_LS        0xFFF13E; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_ASLEEP_LS        $RAM_CTRL_DM2_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM2_2KX24_ASLEEP_SD        0xFFF13F; // RW   1 bits
.CONST $_RAM_CTRL_DM2_2KX24_ASLEEP_SD        $RAM_CTRL_DM2_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_ASLEEP_DS        0xFFF140; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_ASLEEP_DS        $RAM_CTRL_DM3_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_ASLEEP_LS        0xFFF141; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_ASLEEP_LS        $RAM_CTRL_DM3_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM3_2KX24_ASLEEP_SD        0xFFF142; // RW   1 bits
.CONST $_RAM_CTRL_DM3_2KX24_ASLEEP_SD        $RAM_CTRL_DM3_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_ASLEEP_DS        0xFFF143; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_ASLEEP_DS        $RAM_CTRL_DM4_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_ASLEEP_LS        0xFFF144; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_ASLEEP_LS        $RAM_CTRL_DM4_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM4_2KX24_ASLEEP_SD        0xFFF145; // RW   1 bits
.CONST $_RAM_CTRL_DM4_2KX24_ASLEEP_SD        $RAM_CTRL_DM4_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_ASLEEP_DS        0xFFF146; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_ASLEEP_DS        $RAM_CTRL_DM5_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_ASLEEP_LS        0xFFF147; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_ASLEEP_LS        $RAM_CTRL_DM5_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM5_2KX24_ASLEEP_SD        0xFFF148; // RW   1 bits
.CONST $_RAM_CTRL_DM5_2KX24_ASLEEP_SD        $RAM_CTRL_DM5_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_ASLEEP_DS        0xFFF149; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_ASLEEP_DS        $RAM_CTRL_DM6_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_ASLEEP_LS        0xFFF14A; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_ASLEEP_LS        $RAM_CTRL_DM6_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM6_2KX24_ASLEEP_SD        0xFFF14B; // RW   1 bits
.CONST $_RAM_CTRL_DM6_2KX24_ASLEEP_SD        $RAM_CTRL_DM6_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_ASLEEP_DS        0xFFF14C; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_ASLEEP_DS        $RAM_CTRL_DM7_2KX24_ASLEEP_DS; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_ASLEEP_LS        0xFFF14D; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_ASLEEP_LS        $RAM_CTRL_DM7_2KX24_ASLEEP_LS; // RW   1 bits
.CONST $RAM_CTRL_DM7_2KX24_ASLEEP_SD        0xFFF14E; // RW   1 bits
.CONST $_RAM_CTRL_DM7_2KX24_ASLEEP_SD        $RAM_CTRL_DM7_2KX24_ASLEEP_SD; // RW   1 bits
.CONST $AUDIO_CONFIG1                       0xFFF200; // RW  16 bits
.CONST $_AUDIO_CONFIG1                       $AUDIO_CONFIG1; // RW  16 bits
.CONST $AUDIO_CONFIG2                       0xFFF201; // RW  16 bits
.CONST $_AUDIO_CONFIG2                       $AUDIO_CONFIG2; // RW  16 bits
.CONST $AUDIO_CONFIG3                       0xFFF202; // RW  16 bits
.CONST $_AUDIO_CONFIG3                       $AUDIO_CONFIG3; // RW  16 bits
.CONST $AUDIO_CONFIG4                       0xFFF203; // RW  16 bits
.CONST $_AUDIO_CONFIG4                       $AUDIO_CONFIG4; // RW  16 bits
.CONST $AUDIO_CONFIG5                       0xFFF204; // RW  16 bits
.CONST $_AUDIO_CONFIG5                       $AUDIO_CONFIG5; // RW  16 bits
.CONST $AUDIO_CONFIG6                       0xFFF205; // RW  16 bits
.CONST $_AUDIO_CONFIG6                       $AUDIO_CONFIG6; // RW  16 bits
.CONST $AUDIO_CONFIG7                       0xFFF206; // RW  16 bits
.CONST $_AUDIO_CONFIG7                       $AUDIO_CONFIG7; // RW  16 bits
.CONST $AUDIO_ENABLES                       0xFFF207; // RW  16 bits
.CONST $_AUDIO_ENABLES                       $AUDIO_ENABLES; // RW  16 bits
.CONST $AUDIO_ENABLES2                      0xFFF208; // RW   2 bits
.CONST $_AUDIO_ENABLES2                      $AUDIO_ENABLES2; // RW   2 bits
.CONST $AUDIO_FM_CONFIG                     0xFFF209; // RW  13 bits
.CONST $_AUDIO_FM_CONFIG                     $AUDIO_FM_CONFIG; // RW  13 bits
.CONST $AUDIO_IN_BUFFER_SLOTS_10            0xFFF20A; // RW  16 bits
.CONST $_AUDIO_IN_BUFFER_SLOTS_10            $AUDIO_IN_BUFFER_SLOTS_10; // RW  16 bits
.CONST $AUDIO_IN_BUFFER_SLOTS_32            0xFFF20B; // RW  16 bits
.CONST $_AUDIO_IN_BUFFER_SLOTS_32            $AUDIO_IN_BUFFER_SLOTS_32; // RW  16 bits
.CONST $AUDIO_IN_BUFFER_SLOTS_54            0xFFF20C; // RW  16 bits
.CONST $_AUDIO_IN_BUFFER_SLOTS_54            $AUDIO_IN_BUFFER_SLOTS_54; // RW  16 bits
.CONST $AUDIO_IN_BUFFER_SLOTS_76            0xFFF20D; // RW  16 bits
.CONST $_AUDIO_IN_BUFFER_SLOTS_76            $AUDIO_IN_BUFFER_SLOTS_76; // RW  16 bits
.CONST $AUDIO_IN_EVENT_MASK                 0xFFF20E; // RW   8 bits
.CONST $_AUDIO_IN_EVENT_MASK                 $AUDIO_IN_EVENT_MASK; // RW   8 bits
.CONST $AUDIO_IN_EVENT_TYPE                 0xFFF20F; //  R   8 bits
.CONST $_AUDIO_IN_EVENT_TYPE                 $AUDIO_IN_EVENT_TYPE; //  R   8 bits
.CONST $AUDIO_OUT_BUFFER_SLOTS_10           0xFFF210; // RW  16 bits
.CONST $_AUDIO_OUT_BUFFER_SLOTS_10           $AUDIO_OUT_BUFFER_SLOTS_10; // RW  16 bits
.CONST $AUDIO_OUT_BUFFER_SLOTS_32           0xFFF211; // RW  16 bits
.CONST $_AUDIO_OUT_BUFFER_SLOTS_32           $AUDIO_OUT_BUFFER_SLOTS_32; // RW  16 bits
.CONST $AUDIO_OUT_BUFFER_SLOTS_54           0xFFF212; // RW  16 bits
.CONST $_AUDIO_OUT_BUFFER_SLOTS_54           $AUDIO_OUT_BUFFER_SLOTS_54; // RW  16 bits
.CONST $AUDIO_OUT_BUFFER_SLOTS_76           0xFFF213; // RW  16 bits
.CONST $_AUDIO_OUT_BUFFER_SLOTS_76           $AUDIO_OUT_BUFFER_SLOTS_76; // RW  16 bits
.CONST $AUDIO_OUT_EVENT_MASK                0xFFF214; // RW   4 bits
.CONST $_AUDIO_OUT_EVENT_MASK                $AUDIO_OUT_EVENT_MASK; // RW   4 bits
.CONST $AUDIO_OUT_EVENT_TYPE                0xFFF215; //  R   4 bits
.CONST $_AUDIO_OUT_EVENT_TYPE                $AUDIO_OUT_EVENT_TYPE; //  R   4 bits
.CONST $AUDIO_PCM_REG_BANK_SELECT           0xFFF216; // RW   1 bits
.CONST $_AUDIO_PCM_REG_BANK_SELECT           $AUDIO_PCM_REG_BANK_SELECT; // RW   1 bits
.CONST $AUDIO_STATUS                        0xFFF217; //  R  12 bits
.CONST $_AUDIO_STATUS                        $AUDIO_STATUS; //  R  12 bits
.CONST $AUDIO_STATUS2                       0xFFF218; //  R  12 bits
.CONST $_AUDIO_STATUS2                       $AUDIO_STATUS2; //  R  12 bits
.CONST $AUDIO_STATUS3                       0xFFF219; //  R  12 bits
.CONST $_AUDIO_STATUS3                       $AUDIO_STATUS3; //  R  12 bits
.CONST $AUDIO_STATUS4                       0xFFF21A; //  R  12 bits
.CONST $_AUDIO_STATUS4                       $AUDIO_STATUS4; //  R  12 bits
.CONST $AUDIO_TEST_ENABLES                  0xFFF21B; // RW   5 bits
.CONST $_AUDIO_TEST_ENABLES                  $AUDIO_TEST_ENABLES; // RW   5 bits
.CONST $AUDIO_ANA_CTRL_L0                   0xFFF220; // RW  16 bits
.CONST $_AUDIO_ANA_CTRL_L0                   $AUDIO_ANA_CTRL_L0; // RW  16 bits
.CONST $AUDIO_ANA_CTRL_L1                   0xFFF221; // RW  16 bits
.CONST $_AUDIO_ANA_CTRL_L1                   $AUDIO_ANA_CTRL_L1; // RW  16 bits
.CONST $AUDIO_ANA_CTRL_R0                   0xFFF222; // RW  16 bits
.CONST $_AUDIO_ANA_CTRL_R0                   $AUDIO_ANA_CTRL_R0; // RW  16 bits
.CONST $AUDIO_ANA_CTRL_R1                   0xFFF223; // RW  16 bits
.CONST $_AUDIO_ANA_CTRL_R1                   $AUDIO_ANA_CTRL_R1; // RW  16 bits
.CONST $FM_ANA_BIST_ADC_CTRL                0xFFF240; // RW  16 bits
.CONST $_FM_ANA_BIST_ADC_CTRL                $FM_ANA_BIST_ADC_CTRL; // RW  16 bits
.CONST $FM_ANA_BIST_ADC_HW_RSSI_CTRL        0xFFF241; // RW  16 bits
.CONST $_FM_ANA_BIST_ADC_HW_RSSI_CTRL        $FM_ANA_BIST_ADC_HW_RSSI_CTRL; // RW  16 bits
.CONST $FM_ANA_BIST_ADC_HW_RSSI_LVL         0xFFF242; // RW  10 bits
.CONST $_FM_ANA_BIST_ADC_HW_RSSI_LVL         $FM_ANA_BIST_ADC_HW_RSSI_LVL; // RW  10 bits
.CONST $FM_ANA_BIST_ADC_LVL                 0xFFF243; // RW  10 bits
.CONST $_FM_ANA_BIST_ADC_LVL                 $FM_ANA_BIST_ADC_LVL; // RW  10 bits
.CONST $FM_ANA_BIST_ADC_STATUS              0xFFF244; //  R  16 bits
.CONST $_FM_ANA_BIST_ADC_STATUS              $FM_ANA_BIST_ADC_STATUS; //  R  16 bits
.CONST $FM_ANA_CTRL0                        0xFFF245; // RW  16 bits
.CONST $_FM_ANA_CTRL0                        $FM_ANA_CTRL0; // RW  16 bits
.CONST $FM_ANA_CTRL1                        0xFFF246; // RW  16 bits
.CONST $_FM_ANA_CTRL1                        $FM_ANA_CTRL1; // RW  16 bits
.CONST $FM_ANA_CTRL2                        0xFFF247; // RW  16 bits
.CONST $_FM_ANA_CTRL2                        $FM_ANA_CTRL2; // RW  16 bits
.CONST $FM_ANA_CTRL3                        0xFFF248; // RW  16 bits
.CONST $_FM_ANA_CTRL3                        $FM_ANA_CTRL3; // RW  16 bits
.CONST $FM_ANA_CTRL4                        0xFFF249; // RW  16 bits
.CONST $_FM_ANA_CTRL4                        $FM_ANA_CTRL4; // RW  16 bits
.CONST $FM_ANA_CTRL5                        0xFFF24A; // RW  16 bits
.CONST $_FM_ANA_CTRL5                        $FM_ANA_CTRL5; // RW  16 bits
.CONST $FM_ANA_CTRL6                        0xFFF24B; // RW  16 bits
.CONST $_FM_ANA_CTRL6                        $FM_ANA_CTRL6; // RW  16 bits
.CONST $FM_ANA_CTRL7                        0xFFF24C; // RW  16 bits
.CONST $_FM_ANA_CTRL7                        $FM_ANA_CTRL7; // RW  16 bits
.CONST $FM_ANA_CTRL8                        0xFFF24D; // RW  16 bits
.CONST $_FM_ANA_CTRL8                        $FM_ANA_CTRL8; // RW  16 bits
.CONST $FM_ANA_CTRL9                        0xFFF24E; // RW  16 bits
.CONST $_FM_ANA_CTRL9                        $FM_ANA_CTRL9; // RW  16 bits
.CONST $FM_ANA_CTRL10                       0xFFF24F; // RW  16 bits
.CONST $_FM_ANA_CTRL10                       $FM_ANA_CTRL10; // RW  16 bits
.CONST $FM_ANA_CTRL11                       0xFFF250; // RW  16 bits
.CONST $_FM_ANA_CTRL11                       $FM_ANA_CTRL11; // RW  16 bits
.CONST $FM_ANA_CTRL12                       0xFFF251; // RW  16 bits
.CONST $_FM_ANA_CTRL12                       $FM_ANA_CTRL12; // RW  16 bits
.CONST $FM_ANA_CTRL13                       0xFFF252; // RW  16 bits
.CONST $_FM_ANA_CTRL13                       $FM_ANA_CTRL13; // RW  16 bits
.CONST $FM_ANA_CTRL14                       0xFFF253; // RW  16 bits
.CONST $_FM_ANA_CTRL14                       $FM_ANA_CTRL14; // RW  16 bits
.CONST $FM_ANA_CTRL15                       0xFFF254; // RW  16 bits
.CONST $_FM_ANA_CTRL15                       $FM_ANA_CTRL15; // RW  16 bits
.CONST $FM_ANA_EMBEDDED_WINDOW_ADDR         0xFFF269; // RW   8 bits
.CONST $_FM_ANA_EMBEDDED_WINDOW_ADDR         $FM_ANA_EMBEDDED_WINDOW_ADDR; // RW   8 bits
.CONST $FM_ANA_EMBEDDED_WINDOW_DATA_READ    0xFFF26A; //  R  16 bits
.CONST $_FM_ANA_EMBEDDED_WINDOW_DATA_READ    $FM_ANA_EMBEDDED_WINDOW_DATA_READ; //  R  16 bits
.CONST $FM_ANA_EMBEDDED_WINDOW_DATA_WRITE   0xFFF26B; // RW  16 bits
.CONST $_FM_ANA_EMBEDDED_WINDOW_DATA_WRITE   $FM_ANA_EMBEDDED_WINDOW_DATA_WRITE; // RW  16 bits
.CONST $FM_ANA_STATUS0                      0xFFF26C; //  R  16 bits
.CONST $_FM_ANA_STATUS0                      $FM_ANA_STATUS0; //  R  16 bits
.CONST $FM_ANA_STATUS1                      0xFFF26D; //  R  16 bits
.CONST $_FM_ANA_STATUS1                      $FM_ANA_STATUS1; //  R  16 bits
.CONST $FM_ENABLES                          0xFFF271; // RW   9 bits
.CONST $_FM_ENABLES                          $FM_ENABLES; // RW   9 bits
.CONST $FM_AGC_ADC_RESET_CONFIG             0xFFF272; // RW  10 bits
.CONST $_FM_AGC_ADC_RESET_CONFIG             $FM_AGC_ADC_RESET_CONFIG; // RW  10 bits
.CONST $FM_AGC_CONFIG                       0xFFF280; // RW  16 bits
.CONST $_FM_AGC_CONFIG                       $FM_AGC_CONFIG; // RW  16 bits
.CONST $FM_AGC_DCNULL_BANDWIDTH             0xFFF281; // RW  10 bits
.CONST $_FM_AGC_DCNULL_BANDWIDTH             $FM_AGC_DCNULL_BANDWIDTH; // RW  10 bits
.CONST $FM_AGC_DCNULL_FORCE                 0xFFF282; // RW  12 bits
.CONST $_FM_AGC_DCNULL_FORCE                 $FM_AGC_DCNULL_FORCE; // RW  12 bits
.CONST $FM_AGC_DCNULL_RSSI_CONFIG           0xFFF283; // RW  16 bits
.CONST $_FM_AGC_DCNULL_RSSI_CONFIG           $FM_AGC_DCNULL_RSSI_CONFIG; // RW  16 bits
.CONST $FM_AGC_DEBUG_SELECT                 0xFFF284; // RW   3 bits
.CONST $_FM_AGC_DEBUG_SELECT                 $FM_AGC_DEBUG_SELECT; // RW   3 bits
.CONST $FM_AGC_GAIN_DEBUG                   0xFFF285; //  R  16 bits
.CONST $_FM_AGC_GAIN_DEBUG                   $FM_AGC_GAIN_DEBUG; //  R  16 bits
.CONST $FM_AGC_GAIN_FORCE                   0xFFF286; // RW  10 bits
.CONST $_FM_AGC_GAIN_FORCE                   $FM_AGC_GAIN_FORCE; // RW  10 bits
.CONST $FM_AGC_GAIN_MAX                     0xFFF287; // RW   9 bits
.CONST $_FM_AGC_GAIN_MAX                     $FM_AGC_GAIN_MAX; // RW   9 bits
.CONST $FM_AGC_GAIN_MIN                     0xFFF288; // RW   9 bits
.CONST $_FM_AGC_GAIN_MIN                     $FM_AGC_GAIN_MIN; // RW   9 bits
.CONST $FM_AGC_GAIN_TABLE_01_00             0xFFF289; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_01_00             $FM_AGC_GAIN_TABLE_01_00; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_03_02             0xFFF28A; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_03_02             $FM_AGC_GAIN_TABLE_03_02; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_05_04             0xFFF28B; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_05_04             $FM_AGC_GAIN_TABLE_05_04; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_07_06             0xFFF28C; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_07_06             $FM_AGC_GAIN_TABLE_07_06; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_09_08             0xFFF28D; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_09_08             $FM_AGC_GAIN_TABLE_09_08; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_0B_0A             0xFFF28E; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_0B_0A             $FM_AGC_GAIN_TABLE_0B_0A; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_0D_0C             0xFFF28F; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_0D_0C             $FM_AGC_GAIN_TABLE_0D_0C; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_0F_0E             0xFFF290; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_0F_0E             $FM_AGC_GAIN_TABLE_0F_0E; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_11_10             0xFFF291; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_11_10             $FM_AGC_GAIN_TABLE_11_10; // RW  16 bits
.CONST $FM_AGC_GAIN_TABLE_13_12             0xFFF292; // RW  16 bits
.CONST $_FM_AGC_GAIN_TABLE_13_12             $FM_AGC_GAIN_TABLE_13_12; // RW  16 bits
.CONST $FM_AGC_LNA_TUNE_DEBUG               0xFFF293; //  R   6 bits
.CONST $_FM_AGC_LNA_TUNE_DEBUG               $FM_AGC_LNA_TUNE_DEBUG; //  R   6 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_01_00         0xFFF294; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_01_00         $FM_AGC_LNA_TUNE_TABLE_01_00; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_03_02         0xFFF295; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_03_02         $FM_AGC_LNA_TUNE_TABLE_03_02; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_05_04         0xFFF296; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_05_04         $FM_AGC_LNA_TUNE_TABLE_05_04; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_07_06         0xFFF297; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_07_06         $FM_AGC_LNA_TUNE_TABLE_07_06; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_09_08         0xFFF298; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_09_08         $FM_AGC_LNA_TUNE_TABLE_09_08; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_0B_0A         0xFFF299; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_0B_0A         $FM_AGC_LNA_TUNE_TABLE_0B_0A; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_0D_0C         0xFFF29A; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_0D_0C         $FM_AGC_LNA_TUNE_TABLE_0D_0C; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_0F_0E         0xFFF29B; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_0F_0E         $FM_AGC_LNA_TUNE_TABLE_0F_0E; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_11_10         0xFFF29C; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_11_10         $FM_AGC_LNA_TUNE_TABLE_11_10; // RW  12 bits
.CONST $FM_AGC_LNA_TUNE_TABLE_13_12         0xFFF29D; // RW  12 bits
.CONST $_FM_AGC_LNA_TUNE_TABLE_13_12         $FM_AGC_LNA_TUNE_TABLE_13_12; // RW  12 bits
.CONST $FM_AGC_RSSI_DELAY                   0xFFF29E; // RW   6 bits
.CONST $_FM_AGC_RSSI_DELAY                   $FM_AGC_RSSI_DELAY; // RW   6 bits
.CONST $FM_AGC_THRESH_ADC                   0xFFF29F; // RW  16 bits
.CONST $_FM_AGC_THRESH_ADC                   $FM_AGC_THRESH_ADC; // RW  16 bits
.CONST $FM_AGC_THRESH_RSSI                  0xFFF2A0; // RW  16 bits
.CONST $_FM_AGC_THRESH_RSSI                  $FM_AGC_THRESH_RSSI; // RW  16 bits
.CONST $FM_DEMOD_AGGR_RSSI                  0xFFF2A1; //  R   9 bits
.CONST $_FM_DEMOD_AGGR_RSSI                  $FM_DEMOD_AGGR_RSSI; //  R   9 bits
.CONST $FM_DEMOD_AUDIO_PAUSE_DURATION       0xFFF2A2; // RW   6 bits
.CONST $_FM_DEMOD_AUDIO_PAUSE_DURATION       $FM_DEMOD_AUDIO_PAUSE_DURATION; // RW   6 bits
.CONST $FM_DEMOD_AUDIO_PAUSE_IGNORE         0xFFF2A3; // RW   6 bits
.CONST $_FM_DEMOD_AUDIO_PAUSE_IGNORE         $FM_DEMOD_AUDIO_PAUSE_IGNORE; // RW   6 bits
.CONST $FM_DEMOD_AUDIO_PAUSE_THRESHOLD      0xFFF2A4; // RW   8 bits
.CONST $_FM_DEMOD_AUDIO_PAUSE_THRESHOLD      $FM_DEMOD_AUDIO_PAUSE_THRESHOLD; // RW   8 bits
.CONST $FM_DEMOD_AVG_POWER_IM               0xFFF2A5; //  R  16 bits
.CONST $_FM_DEMOD_AVG_POWER_IM               $FM_DEMOD_AVG_POWER_IM; //  R  16 bits
.CONST $FM_DEMOD_AVG_POWER_RE               0xFFF2A6; //  R  16 bits
.CONST $_FM_DEMOD_AVG_POWER_RE               $FM_DEMOD_AVG_POWER_RE; //  R  16 bits
.CONST $FM_DEMOD_BLEND_STEREO_THRESHOLD     0xFFF2A7; // RW  16 bits
.CONST $_FM_DEMOD_BLEND_STEREO_THRESHOLD     $FM_DEMOD_BLEND_STEREO_THRESHOLD; // RW  16 bits
.CONST $FM_DEMOD_CLOCK_RATE_CONFIG          0xFFF2A8; // RW   7 bits
.CONST $_FM_DEMOD_CLOCK_RATE_CONFIG          $FM_DEMOD_CLOCK_RATE_CONFIG; // RW   7 bits
.CONST $FM_DEMOD_CONFIG                     0xFFF2A9; // RW  16 bits
.CONST $_FM_DEMOD_CONFIG                     $FM_DEMOD_CONFIG; // RW  16 bits
.CONST $FM_DEMOD_CONFIG2                    0xFFF2AA; // RW  11 bits
.CONST $_FM_DEMOD_CONFIG2                    $FM_DEMOD_CONFIG2; // RW  11 bits
.CONST $FM_DEMOD_DEBUG_READ                 0xFFF2AB; //  R  16 bits
.CONST $_FM_DEMOD_DEBUG_READ                 $FM_DEMOD_DEBUG_READ; //  R  16 bits
.CONST $FM_DEMOD_DEBUG_SELECT               0xFFF2AC; // RW   5 bits
.CONST $_FM_DEMOD_DEBUG_SELECT               $FM_DEMOD_DEBUG_SELECT; // RW   5 bits
.CONST $FM_DEMOD_DIG_RSSI                   0xFFF2AD; //  R  16 bits
.CONST $_FM_DEMOD_DIG_RSSI                   $FM_DEMOD_DIG_RSSI; //  R  16 bits
.CONST $FM_DEMOD_FILTER_SELECT              0xFFF2AE; // RW  13 bits
.CONST $_FM_DEMOD_FILTER_SELECT              $FM_DEMOD_FILTER_SELECT; // RW  13 bits
.CONST $FM_DEMOD_IF                         0xFFF2AF; // RW  12 bits
.CONST $_FM_DEMOD_IF                         $FM_DEMOD_IF; // RW  12 bits
.CONST $FM_DEMOD_IF_COUNTER                 0xFFF2B0; //  R  16 bits
.CONST $_FM_DEMOD_IF_COUNTER                 $FM_DEMOD_IF_COUNTER; //  R  16 bits
.CONST $FM_DEMOD_IF_COUNTER_ABS             0xFFF2B1; //  R  16 bits
.CONST $_FM_DEMOD_IF_COUNTER_ABS             $FM_DEMOD_IF_COUNTER_ABS; //  R  16 bits
.CONST $FM_DEMOD_IF_COUNTER_INT_TIME        0xFFF2B2; // RW   6 bits
.CONST $_FM_DEMOD_IF_COUNTER_INT_TIME        $FM_DEMOD_IF_COUNTER_INT_TIME; // RW   6 bits
.CONST $FM_DEMOD_IF_THRESHOLD               0xFFF2B3; // RW   8 bits
.CONST $_FM_DEMOD_IF_THRESHOLD               $FM_DEMOD_IF_THRESHOLD; // RW   8 bits
.CONST $FM_DEMOD_IMAGE_TRIM_AMPLI           0xFFF2B4; // RW   9 bits
.CONST $_FM_DEMOD_IMAGE_TRIM_AMPLI           $FM_DEMOD_IMAGE_TRIM_AMPLI; // RW   9 bits
.CONST $FM_DEMOD_IMAGE_TRIM_PHASE           0xFFF2B5; // RW   9 bits
.CONST $_FM_DEMOD_IMAGE_TRIM_PHASE           $FM_DEMOD_IMAGE_TRIM_PHASE; // RW   9 bits
.CONST $FM_DEMOD_IMAGE_TRIM_SMOOTH_CONFIG   0xFFF2B6; // RW  12 bits
.CONST $_FM_DEMOD_IMAGE_TRIM_SMOOTH_CONFIG   $FM_DEMOD_IMAGE_TRIM_SMOOTH_CONFIG; // RW  12 bits
.CONST $FM_DEMOD_MAX_FREQ_DEV               0xFFF2B7; //  R  13 bits
.CONST $_FM_DEMOD_MAX_FREQ_DEV               $FM_DEMOD_MAX_FREQ_DEV; //  R  13 bits
.CONST $FM_DEMOD_MUTE_RSSI                  0xFFF2B8; // RW   4 bits
.CONST $_FM_DEMOD_MUTE_RSSI                  $FM_DEMOD_MUTE_RSSI; // RW   4 bits
.CONST $FM_DEMOD_NARROW_THRESHOLDS          0xFFF2B9; // RW   8 bits
.CONST $_FM_DEMOD_NARROW_THRESHOLDS          $FM_DEMOD_NARROW_THRESHOLDS; // RW   8 bits
.CONST $FM_DEMOD_PILOT_PLL_FREQ             0xFFF2BA; //  R  11 bits
.CONST $_FM_DEMOD_PILOT_PLL_FREQ             $FM_DEMOD_PILOT_PLL_FREQ; //  R  11 bits
.CONST $FM_DEMOD_RAW_ANA_AMP                0xFFF2BB; //  R  16 bits
.CONST $_FM_DEMOD_RAW_ANA_AMP                $FM_DEMOD_RAW_ANA_AMP; //  R  16 bits
.CONST $FM_DEMOD_RAW_ANA_GAIN               0xFFF2BC; //  R   7 bits
.CONST $_FM_DEMOD_RAW_ANA_GAIN               $FM_DEMOD_RAW_ANA_GAIN; //  R   7 bits
.CONST $FM_DEMOD_RAW_IM_DATA                0xFFF2BD; //  R  11 bits
.CONST $_FM_DEMOD_RAW_IM_DATA                $FM_DEMOD_RAW_IM_DATA; //  R  11 bits
.CONST $FM_DEMOD_RAW_RE_DATA                0xFFF2BE; //  R  11 bits
.CONST $_FM_DEMOD_RAW_RE_DATA                $FM_DEMOD_RAW_RE_DATA; //  R  11 bits
.CONST $FM_DEMOD_RDS_BYTE_COUNT_FOR_INT     0xFFF2BF; // RW   8 bits
.CONST $_FM_DEMOD_RDS_BYTE_COUNT_FOR_INT     $FM_DEMOD_RDS_BYTE_COUNT_FOR_INT; // RW   8 bits
.CONST $FM_DEMOD_RSSI_1600K                 0xFFF2C0; //  R  16 bits
.CONST $_FM_DEMOD_RSSI_1600K                 $FM_DEMOD_RSSI_1600K; //  R  16 bits
.CONST $FM_DEMOD_RSSI_320K                  0xFFF2C1; //  R  16 bits
.CONST $_FM_DEMOD_RSSI_320K                  $FM_DEMOD_RSSI_320K; //  R  16 bits
.CONST $FM_DEMOD_RSSI_ADJUST                0xFFF2C2; // RW   9 bits
.CONST $_FM_DEMOD_RSSI_ADJUST                $FM_DEMOD_RSSI_ADJUST; // RW   9 bits
.CONST $FM_DEMOD_RSSI_FILT_SPEED            0xFFF2C3; // RW   8 bits
.CONST $_FM_DEMOD_RSSI_FILT_SPEED            $FM_DEMOD_RSSI_FILT_SPEED; // RW   8 bits
.CONST $FM_DEMOD_RSSI_THRESHOLD             0xFFF2C4; // RW   9 bits
.CONST $_FM_DEMOD_RSSI_THRESHOLD             $FM_DEMOD_RSSI_THRESHOLD; // RW   9 bits
.CONST $FM_DEMOD_SIGNAL_QUALITY             0xFFF2C5; //  R   9 bits
.CONST $_FM_DEMOD_SIGNAL_QUALITY             $FM_DEMOD_SIGNAL_QUALITY; //  R   9 bits
.CONST $FM_DEMOD_SNR_ADJUST                 0xFFF2C6; // RW   9 bits
.CONST $_FM_DEMOD_SNR_ADJUST                 $FM_DEMOD_SNR_ADJUST; // RW   9 bits
.CONST $FM_DEMOD_SNR_LOG                    0xFFF2C7; //  R   9 bits
.CONST $_FM_DEMOD_SNR_LOG                    $FM_DEMOD_SNR_LOG; //  R   9 bits
.CONST $FM_DEMOD_SNR_SMOOTH_CONFIG          0xFFF2C8; // RW  12 bits
.CONST $_FM_DEMOD_SNR_SMOOTH_CONFIG          $FM_DEMOD_SNR_SMOOTH_CONFIG; // RW  12 bits
.CONST $FM_DEMOD_SOFT_MUFFLE_COEFFS         0xFFF2C9; // RW  16 bits
.CONST $_FM_DEMOD_SOFT_MUFFLE_COEFFS         $FM_DEMOD_SOFT_MUFFLE_COEFFS; // RW  16 bits
.CONST $FM_DEMOD_SOFT_MUTE_COEFFS           0xFFF2CA; // RW  16 bits
.CONST $_FM_DEMOD_SOFT_MUTE_COEFFS           $FM_DEMOD_SOFT_MUTE_COEFFS; // RW  16 bits
.CONST $FM_DEMOD_STATUS                     0xFFF2CB; //  R   8 bits
.CONST $_FM_DEMOD_STATUS                     $FM_DEMOD_STATUS; //  R   8 bits
.CONST $FM_DEMOD_STEREO_BLEND_COEFFS        0xFFF2CC; // RW  16 bits
.CONST $_FM_DEMOD_STEREO_BLEND_COEFFS        $FM_DEMOD_STEREO_BLEND_COEFFS; // RW  16 bits
.CONST $FM_DEMOD_STEREO_BLEND_THRESH        0xFFF2CD; // RW  11 bits
.CONST $_FM_DEMOD_STEREO_BLEND_THRESH        $FM_DEMOD_STEREO_BLEND_THRESH; // RW  11 bits
.CONST $FM_DEMOD_STEREO_THRESHOLD           0xFFF2CE; // RW   8 bits
.CONST $_FM_DEMOD_STEREO_THRESHOLD           $FM_DEMOD_STEREO_THRESHOLD; // RW   8 bits
.CONST $FM_DEMOD_THREXT_CONFIG              0xFFF2CF; // RW  11 bits
.CONST $_FM_DEMOD_THREXT_CONFIG              $FM_DEMOD_THREXT_CONFIG; // RW  11 bits
.CONST $FM_DEMOD_THREXT_THR2                0xFFF2D0; // RW   9 bits
.CONST $_FM_DEMOD_THREXT_THR2                $FM_DEMOD_THREXT_THR2; // RW   9 bits
.CONST $FM_DEMOD_THREXT_THR3                0xFFF2D1; // RW  11 bits
.CONST $_FM_DEMOD_THREXT_THR3                $FM_DEMOD_THREXT_THR3; // RW  11 bits
.CONST $FM_DEMOD_TONEREJ_FREQ               0xFFF2D2; // RW  16 bits
.CONST $_FM_DEMOD_TONEREJ_FREQ               $FM_DEMOD_TONEREJ_FREQ; // RW  16 bits
.CONST $FM_DEMOD_TONEREJ_THRESH_ADAPT       0xFFF2D3; // RW   8 bits
.CONST $_FM_DEMOD_TONEREJ_THRESH_ADAPT       $FM_DEMOD_TONEREJ_THRESH_ADAPT; // RW   8 bits
.CONST $FM_DEMOD_TONEREJ_TONE_AMP           0xFFF2D4; //  R  13 bits
.CONST $_FM_DEMOD_TONEREJ_TONE_AMP           $FM_DEMOD_TONEREJ_TONE_AMP; //  R  13 bits
.CONST $FM_DEMOD_TONEREJ_TONE_FREQ          0xFFF2D5; //  R  16 bits
.CONST $_FM_DEMOD_TONEREJ_TONE_FREQ          $FM_DEMOD_TONEREJ_TONE_FREQ; //  R  16 bits
.CONST $FM_DEMOD_TONEREJ_WANT_AMP           0xFFF2D6; //  R  13 bits
.CONST $_FM_DEMOD_TONEREJ_WANT_AMP           $FM_DEMOD_TONEREJ_WANT_AMP; //  R  13 bits
.CONST $FM_RDS_DEC_CONFIG                   0xFFF2D7; // RW  16 bits
.CONST $_FM_RDS_DEC_CONFIG                   $FM_RDS_DEC_CONFIG; // RW  16 bits
.CONST $FM_RDS_DEC_QUALITY                  0xFFF2D8; //  R   3 bits
.CONST $_FM_RDS_DEC_QUALITY                  $FM_RDS_DEC_QUALITY; //  R   3 bits
.CONST $FM_TX_AUDIO_GAIN                    0xFFF2D9; // RW   8 bits
.CONST $_FM_TX_AUDIO_GAIN                    $FM_TX_AUDIO_GAIN; // RW   8 bits
.CONST $FM_TX_CLIPPED                       0xFFF2E0; //  R   1 bits
.CONST $_FM_TX_CLIPPED                       $FM_TX_CLIPPED; //  R   1 bits
.CONST $FM_TX_CLIPPED_RST                   0xFFF2E1; // RW   1 bits
.CONST $_FM_TX_CLIPPED_RST                   $FM_TX_CLIPPED_RST; // RW   1 bits
.CONST $FM_TX_CMP_BOOST_GAIN                0xFFF2E2; // RW  11 bits
.CONST $_FM_TX_CMP_BOOST_GAIN                $FM_TX_CMP_BOOST_GAIN; // RW  11 bits
.CONST $FM_TX_CMP_LIMIT_THRESH              0xFFF2E3; // RW  12 bits
.CONST $_FM_TX_CMP_LIMIT_THRESH              $FM_TX_CMP_LIMIT_THRESH; // RW  12 bits
.CONST $FM_TX_CMP_SETTING                   0xFFF2E4; // RW  14 bits
.CONST $_FM_TX_CMP_SETTING                   $FM_TX_CMP_SETTING; // RW  14 bits
.CONST $FM_TX_CMP_THRESH                    0xFFF2E5; // RW  12 bits
.CONST $_FM_TX_CMP_THRESH                    $FM_TX_CMP_THRESH; // RW  12 bits
.CONST $FM_TX_CONFIG                        0xFFF2E6; // RW  16 bits
.CONST $_FM_TX_CONFIG                        $FM_TX_CONFIG; // RW  16 bits
.CONST $FM_TX_CONST_VAL                     0xFFF2E7; // RW  16 bits
.CONST $_FM_TX_CONST_VAL                     $FM_TX_CONST_VAL; // RW  16 bits
.CONST $FM_TX_LVLDET_CONFIG                 0xFFF2E8; // RW  14 bits
.CONST $_FM_TX_LVLDET_CONFIG                 $FM_TX_LVLDET_CONFIG; // RW  14 bits
.CONST $FM_TX_LVLDET_L_AVG_LVL_STATUS       0xFFF2E9; //  R  13 bits
.CONST $_FM_TX_LVLDET_L_AVG_LVL_STATUS       $FM_TX_LVLDET_L_AVG_LVL_STATUS; //  R  13 bits
.CONST $FM_TX_LVLDET_L_THR_HI               0xFFF2EA; // RW  13 bits
.CONST $_FM_TX_LVLDET_L_THR_HI               $FM_TX_LVLDET_L_THR_HI; // RW  13 bits
.CONST $FM_TX_LVLDET_L_THR_LO               0xFFF2EB; // RW  13 bits
.CONST $_FM_TX_LVLDET_L_THR_LO               $FM_TX_LVLDET_L_THR_LO; // RW  13 bits
.CONST $FM_TX_LVLDET_L_TIME_CFG             0xFFF2EC; // RW  16 bits
.CONST $_FM_TX_LVLDET_L_TIME_CFG             $FM_TX_LVLDET_L_TIME_CFG; // RW  16 bits
.CONST $FM_TX_LVLDET_R_AVG_LVL_STATUS       0xFFF2ED; //  R  13 bits
.CONST $_FM_TX_LVLDET_R_AVG_LVL_STATUS       $FM_TX_LVLDET_R_AVG_LVL_STATUS; //  R  13 bits
.CONST $FM_TX_LVLDET_R_THR_HI               0xFFF2EE; // RW  13 bits
.CONST $_FM_TX_LVLDET_R_THR_HI               $FM_TX_LVLDET_R_THR_HI; // RW  13 bits
.CONST $FM_TX_LVLDET_R_THR_LO               0xFFF2EF; // RW  13 bits
.CONST $_FM_TX_LVLDET_R_THR_LO               $FM_TX_LVLDET_R_THR_LO; // RW  13 bits
.CONST $FM_TX_LVLDET_R_TIME_CFG             0xFFF2F0; // RW  16 bits
.CONST $_FM_TX_LVLDET_R_TIME_CFG             $FM_TX_LVLDET_R_TIME_CFG; // RW  16 bits
.CONST $FM_TX_LVLDET_STATUS                 0xFFF2F1; //  R  16 bits
.CONST $_FM_TX_LVLDET_STATUS                 $FM_TX_LVLDET_STATUS; //  R  16 bits
.CONST $FM_TX_MUX_CLIP                      0xFFF2F2; // RW  15 bits
.CONST $_FM_TX_MUX_CLIP                      $FM_TX_MUX_CLIP; // RW  15 bits
.CONST $FM_TX_MUX_POSTFILTER_CLIP           0xFFF2F3; // RW  15 bits
.CONST $_FM_TX_MUX_POSTFILTER_CLIP           $FM_TX_MUX_POSTFILTER_CLIP; // RW  15 bits
.CONST $FM_TX_PILOT_ERR                     0xFFF2F4; // RW   8 bits
.CONST $_FM_TX_PILOT_ERR                     $FM_TX_PILOT_ERR; // RW   8 bits
.CONST $FM_TX_PILOT_GAIN                    0xFFF2F5; // RW   8 bits
.CONST $_FM_TX_PILOT_GAIN                    $FM_TX_PILOT_GAIN; // RW   8 bits
.CONST $FM_TX_RDS_GAIN                      0xFFF2F6; // RW   8 bits
.CONST $_FM_TX_RDS_GAIN                      $FM_TX_RDS_GAIN; // RW   8 bits
.CONST $FM_TX_SYS_GAIN1                     0xFFF2F7; // RW   8 bits
.CONST $_FM_TX_SYS_GAIN1                     $FM_TX_SYS_GAIN1; // RW   8 bits
.CONST $FM_TX_SYS_GAIN2                     0xFFF2F8; // RW   8 bits
.CONST $_FM_TX_SYS_GAIN2                     $FM_TX_SYS_GAIN2; // RW   8 bits
.CONST $FM_ANA_LO_INT_EVENT_STATUS          0xFFF2F9; //  R   1 bits
.CONST $_FM_ANA_LO_INT_EVENT_STATUS          $FM_ANA_LO_INT_EVENT_STATUS; //  R   1 bits
.CONST $FM_DBG_SEL                          0xFFF300; // RW   9 bits
.CONST $_FM_DBG_SEL                          $FM_DBG_SEL; // RW   9 bits
.CONST $FM_INT_CAUSE                        0xFFF301; //  R  16 bits
.CONST $_FM_INT_CAUSE                        $FM_INT_CAUSE; //  R  16 bits
.CONST $FM_INT_CLEAR                        0xFFF302; // RW  16 bits
.CONST $_FM_INT_CLEAR                        $FM_INT_CLEAR; // RW  16 bits
.CONST $FM_INT_MASK                         0xFFF303; // RW  16 bits
.CONST $_FM_INT_MASK                         $FM_INT_MASK; // RW  16 bits
.CONST $KCODEC_ADC_A_GAIN                   0xFFF310; // RW  16 bits
.CONST $_KCODEC_ADC_A_GAIN                   $KCODEC_ADC_A_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_A_IIR_COEFF              0xFFF311; // RW  12 bits
.CONST $_KCODEC_ADC_A_IIR_COEFF              $KCODEC_ADC_A_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_A_LVL_DET_AVG_LEVEL      0xFFF312; //  R  16 bits
.CONST $_KCODEC_ADC_A_LVL_DET_AVG_LEVEL      $KCODEC_ADC_A_LVL_DET_AVG_LEVEL; //  R  16 bits
.CONST $KCODEC_ADC_A_SAMP_RATE              0xFFF313; // RW   4 bits
.CONST $_KCODEC_ADC_A_SAMP_RATE              $KCODEC_ADC_A_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_A_SAMP_RATE_FINE         0xFFF314; // RW  16 bits
.CONST $_KCODEC_ADC_A_SAMP_RATE_FINE         $KCODEC_ADC_A_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_A_SAMP_RATE_FINE_EXTENSION 0xFFF315; // RW   3 bits
.CONST $_KCODEC_ADC_A_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_A_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_A_WARP                   0xFFF316; // RW  13 bits
.CONST $_KCODEC_ADC_A_WARP                   $KCODEC_ADC_A_WARP; // RW  13 bits
.CONST $KCODEC_ADC_B_GAIN                   0xFFF317; // RW  16 bits
.CONST $_KCODEC_ADC_B_GAIN                   $KCODEC_ADC_B_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_B_IIR_COEFF              0xFFF318; // RW  12 bits
.CONST $_KCODEC_ADC_B_IIR_COEFF              $KCODEC_ADC_B_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_B_LVL_DET_AVG_LEVEL      0xFFF319; //  R  16 bits
.CONST $_KCODEC_ADC_B_LVL_DET_AVG_LEVEL      $KCODEC_ADC_B_LVL_DET_AVG_LEVEL; //  R  16 bits
.CONST $KCODEC_ADC_B_SAMP_RATE              0xFFF31A; // RW   4 bits
.CONST $_KCODEC_ADC_B_SAMP_RATE              $KCODEC_ADC_B_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_B_SAMP_RATE_FINE         0xFFF31B; // RW  16 bits
.CONST $_KCODEC_ADC_B_SAMP_RATE_FINE         $KCODEC_ADC_B_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_B_SAMP_RATE_FINE_EXTENSION 0xFFF31C; // RW   3 bits
.CONST $_KCODEC_ADC_B_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_B_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_B_WARP                   0xFFF31D; // RW  13 bits
.CONST $_KCODEC_ADC_B_WARP                   $KCODEC_ADC_B_WARP; // RW  13 bits
.CONST $KCODEC_ADC_C_GAIN                   0xFFF31E; // RW  16 bits
.CONST $_KCODEC_ADC_C_GAIN                   $KCODEC_ADC_C_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_C_IIR_COEFF              0xFFF31F; // RW  12 bits
.CONST $_KCODEC_ADC_C_IIR_COEFF              $KCODEC_ADC_C_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_C_SAMP_RATE              0xFFF320; // RW   4 bits
.CONST $_KCODEC_ADC_C_SAMP_RATE              $KCODEC_ADC_C_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_C_SAMP_RATE_FINE         0xFFF321; // RW  16 bits
.CONST $_KCODEC_ADC_C_SAMP_RATE_FINE         $KCODEC_ADC_C_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_C_SAMP_RATE_FINE_EXTENSION 0xFFF322; // RW   3 bits
.CONST $_KCODEC_ADC_C_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_C_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_C_WARP                   0xFFF323; // RW  13 bits
.CONST $_KCODEC_ADC_C_WARP                   $KCODEC_ADC_C_WARP; // RW  13 bits
.CONST $KCODEC_ADC_D_GAIN                   0xFFF324; // RW  16 bits
.CONST $_KCODEC_ADC_D_GAIN                   $KCODEC_ADC_D_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_D_IIR_COEFF              0xFFF325; // RW  12 bits
.CONST $_KCODEC_ADC_D_IIR_COEFF              $KCODEC_ADC_D_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_D_SAMP_RATE              0xFFF326; // RW   4 bits
.CONST $_KCODEC_ADC_D_SAMP_RATE              $KCODEC_ADC_D_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_D_SAMP_RATE_FINE         0xFFF327; // RW  16 bits
.CONST $_KCODEC_ADC_D_SAMP_RATE_FINE         $KCODEC_ADC_D_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_D_SAMP_RATE_FINE_EXTENSION 0xFFF328; // RW   3 bits
.CONST $_KCODEC_ADC_D_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_D_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_D_WARP                   0xFFF329; // RW  13 bits
.CONST $_KCODEC_ADC_D_WARP                   $KCODEC_ADC_D_WARP; // RW  13 bits
.CONST $KCODEC_ADC_E_GAIN                   0xFFF32A; // RW  16 bits
.CONST $_KCODEC_ADC_E_GAIN                   $KCODEC_ADC_E_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_E_IIR_COEFF              0xFFF32B; // RW  12 bits
.CONST $_KCODEC_ADC_E_IIR_COEFF              $KCODEC_ADC_E_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_E_SAMP_RATE              0xFFF32C; // RW   4 bits
.CONST $_KCODEC_ADC_E_SAMP_RATE              $KCODEC_ADC_E_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_E_SAMP_RATE_FINE         0xFFF32D; // RW  16 bits
.CONST $_KCODEC_ADC_E_SAMP_RATE_FINE         $KCODEC_ADC_E_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_E_SAMP_RATE_FINE_EXTENSION 0xFFF32E; // RW   3 bits
.CONST $_KCODEC_ADC_E_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_E_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_E_WARP                   0xFFF32F; // RW  13 bits
.CONST $_KCODEC_ADC_E_WARP                   $KCODEC_ADC_E_WARP; // RW  13 bits
.CONST $KCODEC_ADC_F_GAIN                   0xFFF330; // RW  16 bits
.CONST $_KCODEC_ADC_F_GAIN                   $KCODEC_ADC_F_GAIN; // RW  16 bits
.CONST $KCODEC_ADC_F_IIR_COEFF              0xFFF331; // RW  12 bits
.CONST $_KCODEC_ADC_F_IIR_COEFF              $KCODEC_ADC_F_IIR_COEFF; // RW  12 bits
.CONST $KCODEC_ADC_F_SAMP_RATE              0xFFF332; // RW   4 bits
.CONST $_KCODEC_ADC_F_SAMP_RATE              $KCODEC_ADC_F_SAMP_RATE; // RW   4 bits
.CONST $KCODEC_ADC_F_SAMP_RATE_FINE         0xFFF333; // RW  16 bits
.CONST $_KCODEC_ADC_F_SAMP_RATE_FINE         $KCODEC_ADC_F_SAMP_RATE_FINE; // RW  16 bits
.CONST $KCODEC_ADC_F_SAMP_RATE_FINE_EXTENSION 0xFFF334; // RW   3 bits
.CONST $_KCODEC_ADC_F_SAMP_RATE_FINE_EXTENSION $KCODEC_ADC_F_SAMP_RATE_FINE_EXTENSION; // RW   3 bits
.CONST $KCODEC_ADC_F_WARP                   0xFFF335; // RW  13 bits
.CONST $_KCODEC_ADC_F_WARP                   $KCODEC_ADC_F_WARP; // RW  13 bits
.CONST $KCODEC_ADC_IIR_COEFF_ADDR           0xFFF336; // RW   4 bits
.CONST $_KCODEC_ADC_IIR_COEFF_ADDR           $KCODEC_ADC_IIR_COEFF_ADDR; // RW   4 bits
.CONST $KCODEC_ADC_LVL_DET_AVG_TIME         0xFFF337; // RW   5 bits
.CONST $_KCODEC_ADC_LVL_DET_AVG_TIME         $KCODEC_ADC_LVL_DET_AVG_TIME; // RW   5 bits
.CONST $KCODEC_ADC_LVL_DET_HILO_TIME        0xFFF338; // RW  16 bits
.CONST $_KCODEC_ADC_LVL_DET_HILO_TIME        $KCODEC_ADC_LVL_DET_HILO_TIME; // RW  16 bits
.CONST $KCODEC_ADC_LVL_DET_STATUS           0xFFF339; //  R  16 bits
.CONST $_KCODEC_ADC_LVL_DET_STATUS           $KCODEC_ADC_LVL_DET_STATUS; //  R  16 bits
.CONST $KCODEC_ADC_LVL_DET_THRESHOLD_HI     0xFFF33A; // RW  16 bits
.CONST $_KCODEC_ADC_LVL_DET_THRESHOLD_HI     $KCODEC_ADC_LVL_DET_THRESHOLD_HI; // RW  16 bits
.CONST $KCODEC_ADC_LVL_DET_THRESHOLD_LO     0xFFF33B; // RW  16 bits
.CONST $_KCODEC_ADC_LVL_DET_THRESHOLD_LO     $KCODEC_ADC_LVL_DET_THRESHOLD_LO; // RW  16 bits
.CONST $KCODEC_ANA_DAC_GAIN_TIMEOUT         0xFFF33C; // RW  16 bits
.CONST $_KCODEC_ANA_DAC_GAIN_TIMEOUT         $KCODEC_ANA_DAC_GAIN_TIMEOUT; // RW  16 bits
.CONST $KCODEC_CONFIG                       0xFFF33D; // RW  16 bits
.CONST $_KCODEC_CONFIG                       $KCODEC_CONFIG; // RW  16 bits
.CONST $KCODEC_CONFIG_EXTENSION             0xFFF33E; // RW  16 bits
.CONST $_KCODEC_CONFIG_EXTENSION             $KCODEC_CONFIG_EXTENSION; // RW  16 bits
.CONST $KCODEC_CONFIG2                      0xFFF33F; // RW  16 bits
.CONST $_KCODEC_CONFIG2                      $KCODEC_CONFIG2; // RW  16 bits
.CONST $KCODEC_CONFIG2_EXTENSION            0xFFF340; // RW  16 bits
.CONST $_KCODEC_CONFIG2_EXTENSION            $KCODEC_CONFIG2_EXTENSION; // RW  16 bits
.CONST $KCODEC_CONFIG3                      0xFFF341; // RW  16 bits
.CONST $_KCODEC_CONFIG3                      $KCODEC_CONFIG3; // RW  16 bits
.CONST $KCODEC_DAC_A_GAIN                   0xFFF342; // RW  16 bits
.CONST $_KCODEC_DAC_A_GAIN                   $KCODEC_DAC_A_GAIN; // RW  16 bits
.CONST $KCODEC_DAC_A_LVL_DET_AVG_LEVEL      0xFFF343; //  R  16 bits
.CONST $_KCODEC_DAC_A_LVL_DET_AVG_LEVEL      $KCODEC_DAC_A_LVL_DET_AVG_LEVEL; //  R  16 bits
.CONST $KCODEC_DAC_A_SAMP_RATE              0xFFF344; // RW  10 bits
.CONST $_KCODEC_DAC_A_SAMP_RATE              $KCODEC_DAC_A_SAMP_RATE; // RW  10 bits
.CONST $KCODEC_DAC_A_WARP                   0xFFF345; // RW  13 bits
.CONST $_KCODEC_DAC_A_WARP                   $KCODEC_DAC_A_WARP; // RW  13 bits
.CONST $KCODEC_DAC_B_GAIN                   0xFFF346; // RW  16 bits
.CONST $_KCODEC_DAC_B_GAIN                   $KCODEC_DAC_B_GAIN; // RW  16 bits
.CONST $KCODEC_DAC_B_LVL_DET_AVG_LEVEL      0xFFF347; //  R  16 bits
.CONST $_KCODEC_DAC_B_LVL_DET_AVG_LEVEL      $KCODEC_DAC_B_LVL_DET_AVG_LEVEL; //  R  16 bits
.CONST $KCODEC_DAC_B_SAMP_RATE              0xFFF348; // RW  10 bits
.CONST $_KCODEC_DAC_B_SAMP_RATE              $KCODEC_DAC_B_SAMP_RATE; // RW  10 bits
.CONST $KCODEC_DAC_B_WARP                   0xFFF349; // RW  13 bits
.CONST $_KCODEC_DAC_B_WARP                   $KCODEC_DAC_B_WARP; // RW  13 bits
.CONST $KCODEC_DAC_C_GAIN                   0xFFF34A; // RW  16 bits
.CONST $_KCODEC_DAC_C_GAIN                   $KCODEC_DAC_C_GAIN; // RW  16 bits
.CONST $KCODEC_DAC_C_SAMP_RATE              0xFFF34B; // RW  10 bits
.CONST $_KCODEC_DAC_C_SAMP_RATE              $KCODEC_DAC_C_SAMP_RATE; // RW  10 bits
.CONST $KCODEC_DAC_C_WARP                   0xFFF34C; // RW  13 bits
.CONST $_KCODEC_DAC_C_WARP                   $KCODEC_DAC_C_WARP; // RW  13 bits
.CONST $KCODEC_DAC_D_GAIN                   0xFFF34D; // RW  16 bits
.CONST $_KCODEC_DAC_D_GAIN                   $KCODEC_DAC_D_GAIN; // RW  16 bits
.CONST $KCODEC_DAC_D_SAMP_RATE              0xFFF34E; // RW  10 bits
.CONST $_KCODEC_DAC_D_SAMP_RATE              $KCODEC_DAC_D_SAMP_RATE; // RW  10 bits
.CONST $KCODEC_DAC_D_WARP                   0xFFF34F; // RW  13 bits
.CONST $_KCODEC_DAC_D_WARP                   $KCODEC_DAC_D_WARP; // RW  13 bits
.CONST $KCODEC_DAC_LVL_DET_AVG_TIME         0xFFF350; // RW   5 bits
.CONST $_KCODEC_DAC_LVL_DET_AVG_TIME         $KCODEC_DAC_LVL_DET_AVG_TIME; // RW   5 bits
.CONST $KCODEC_DAC_LVL_DET_HILO_TIME        0xFFF351; // RW  16 bits
.CONST $_KCODEC_DAC_LVL_DET_HILO_TIME        $KCODEC_DAC_LVL_DET_HILO_TIME; // RW  16 bits
.CONST $KCODEC_DAC_LVL_DET_STATUS           0xFFF352; //  R  16 bits
.CONST $_KCODEC_DAC_LVL_DET_STATUS           $KCODEC_DAC_LVL_DET_STATUS; //  R  16 bits
.CONST $KCODEC_DAC_LVL_DET_THRESHOLD_HI     0xFFF353; // RW  16 bits
.CONST $_KCODEC_DAC_LVL_DET_THRESHOLD_HI     $KCODEC_DAC_LVL_DET_THRESHOLD_HI; // RW  16 bits
.CONST $KCODEC_DAC_LVL_DET_THRESHOLD_LO     0xFFF354; // RW  16 bits
.CONST $_KCODEC_DAC_LVL_DET_THRESHOLD_LO     $KCODEC_DAC_LVL_DET_THRESHOLD_LO; // RW  16 bits
.CONST $KCODEC_DMIC_CONFIG                  0xFFF355; // RW   9 bits
.CONST $_KCODEC_DMIC_CONFIG                  $KCODEC_DMIC_CONFIG; // RW   9 bits
.CONST $KCODEC_DMIC1_CONFIG                 0xFFF356; // RW   9 bits
.CONST $_KCODEC_DMIC1_CONFIG                 $KCODEC_DMIC1_CONFIG; // RW   9 bits
.CONST $KCODEC_DMIC2_CONFIG                 0xFFF357; // RW   9 bits
.CONST $_KCODEC_DMIC2_CONFIG                 $KCODEC_DMIC2_CONFIG; // RW   9 bits
.CONST $KCODEC_FM_CONFIG                    0xFFF358; // RW   2 bits
.CONST $_KCODEC_FM_CONFIG                    $KCODEC_FM_CONFIG; // RW   2 bits
.CONST $KCODEC_LVL_DET_CONFIG               0xFFF359; // RW  11 bits
.CONST $_KCODEC_LVL_DET_CONFIG               $KCODEC_LVL_DET_CONFIG; // RW  11 bits
.CONST $KCODEC_LVL_EVENT_CLEAR              0xFFF35A; // RW  10 bits
.CONST $_KCODEC_LVL_EVENT_CLEAR              $KCODEC_LVL_EVENT_CLEAR; // RW  10 bits
.CONST $KCODEC_LVL_EVENT_MASK               0xFFF35B; // RW  10 bits
.CONST $_KCODEC_LVL_EVENT_MASK               $KCODEC_LVL_EVENT_MASK; // RW  10 bits
.CONST $KCODEC_LVL_EVENT_STATUS             0xFFF35C; //  R  10 bits
.CONST $_KCODEC_LVL_EVENT_STATUS             $KCODEC_LVL_EVENT_STATUS; //  R  10 bits
.CONST $KCODEC_SIDETONE_CONFIG              0xFFF35D; // RW  16 bits
.CONST $_KCODEC_SIDETONE_CONFIG              $KCODEC_SIDETONE_CONFIG; // RW  16 bits
.CONST $KCODEC_VBAT_FILT_CONFIG             0xFFF35E; // RW  14 bits
.CONST $_KCODEC_VBAT_FILT_CONFIG             $KCODEC_VBAT_FILT_CONFIG; // RW  14 bits
.CONST $PCM_AUDIO_GAIN                      0xFFF370; // RW  10 bits
.CONST $_PCM_AUDIO_GAIN                      $PCM_AUDIO_GAIN; // RW  10 bits
.CONST $PCM_CONFIG1                         0xFFF371; // RW  16 bits
.CONST $_PCM_CONFIG1                         $PCM_CONFIG1; // RW  16 bits
.CONST $PCM_CONFIG2                         0xFFF372; // RW  16 bits
.CONST $_PCM_CONFIG2                         $PCM_CONFIG2; // RW  16 bits
.CONST $PCM_CONFIG3                         0xFFF373; // RW  16 bits
.CONST $_PCM_CONFIG3                         $PCM_CONFIG3; // RW  16 bits
.CONST $PCM_CONFIG4                         0xFFF374; // RW  16 bits
.CONST $_PCM_CONFIG4                         $PCM_CONFIG4; // RW  16 bits
.CONST $PCM_CONFIG5                         0xFFF375; // RW  15 bits
.CONST $_PCM_CONFIG5                         $PCM_CONFIG5; // RW  15 bits
.CONST $PCM_CONFIG6                         0xFFF376; // RW  16 bits
.CONST $_PCM_CONFIG6                         $PCM_CONFIG6; // RW  16 bits
.CONST $PCM_PAD_CONFIG                      0xFFF377; // RW   8 bits
.CONST $_PCM_PAD_CONFIG                      $PCM_PAD_CONFIG; // RW   8 bits
.CONST $PCM_RX_SLOT_CFG                     0xFFF378; // RW  16 bits
.CONST $_PCM_RX_SLOT_CFG                     $PCM_RX_SLOT_CFG; // RW  16 bits
.CONST $PCM_STATUS                          0xFFF379; //  R   4 bits
.CONST $_PCM_STATUS                          $PCM_STATUS; //  R   4 bits
.CONST $PCM_TX_SLOT_CFG                     0xFFF37A; // RW  16 bits
.CONST $_PCM_TX_SLOT_CFG                     $PCM_TX_SLOT_CFG; // RW  16 bits
.CONST $HOST_SYS_CONFIG_ENABLES             0xFFF700; // RW   6 bits
.CONST $_HOST_SYS_CONFIG_ENABLES             $HOST_SYS_CONFIG_ENABLES; // RW   6 bits
.CONST $SDIO_BLOCK_LENGTH                   0xFFF700; //  R  10 bits
.CONST $_SDIO_BLOCK_LENGTH                   $SDIO_BLOCK_LENGTH; //  R  10 bits
.CONST $UART_RST_EN                         0xFFF700; // RW   1 bits
.CONST $_UART_RST_EN                         $UART_RST_EN; // RW   1 bits
.CONST $USB2_HS_INTERPACKET_DELAY           0xFFF700; // RW   8 bits
.CONST $_USB2_HS_INTERPACKET_DELAY           $USB2_HS_INTERPACKET_DELAY; // RW   8 bits
.CONST $HOST_SYS_CONFIG_FORCE_CLK_ENABLES   0xFFF701; // RW  16 bits
.CONST $_HOST_SYS_CONFIG_FORCE_CLK_ENABLES   $HOST_SYS_CONFIG_FORCE_CLK_ENABLES; // RW  16 bits
.CONST $SDIO_CARD_STATE                     0xFFF701; //  R   5 bits
.CONST $_SDIO_CARD_STATE                     $SDIO_CARD_STATE; //  R   5 bits
.CONST $UART_RST_DELAY                      0xFFF701; // RW  10 bits
.CONST $_UART_RST_DELAY                      $UART_RST_DELAY; // RW  10 bits
.CONST $USB2_HS_TIMEOUTS                    0xFFF701; // RW  16 bits
.CONST $_USB2_HS_TIMEOUTS                    $USB2_HS_TIMEOUTS; // RW  16 bits
.CONST $HOST_SYS_CONFIG_MASK_HW_CLK_REQS    0xFFF702; // RW   6 bits
.CONST $_HOST_SYS_CONFIG_MASK_HW_CLK_REQS    $HOST_SYS_CONFIG_MASK_HW_CLK_REQS; // RW   6 bits
.CONST $SDIO_CIS_CONFIG                     0xFFF702; // RW  16 bits
.CONST $_SDIO_CIS_CONFIG                     $SDIO_CIS_CONFIG; // RW  16 bits
.CONST $UART_CONFIG                         0xFFF702; // RW  10 bits
.CONST $_UART_CONFIG                         $UART_CONFIG; // RW  10 bits
.CONST $USB2_FS_TIMEOUTS                    0xFFF702; // RW  16 bits
.CONST $_USB2_FS_TIMEOUTS                    $USB2_FS_TIMEOUTS; // RW  16 bits
.CONST $HOST_SYS_BUILD_OPTIONS              0xFFF703; //  R  16 bits
.CONST $_HOST_SYS_BUILD_OPTIONS              $HOST_SYS_BUILD_OPTIONS; //  R  16 bits
.CONST $SDIO_CIS_CONFIG_INDEX               0xFFF703; // RW   6 bits
.CONST $_SDIO_CIS_CONFIG_INDEX               $SDIO_CIS_CONFIG_INDEX; // RW   6 bits
.CONST $UART_RATE                           0xFFF703; // RW  16 bits
.CONST $_UART_RATE                           $UART_RATE; // RW  16 bits
.CONST $USB2_SOFT_RESET                     0xFFF703; // RW   6 bits
.CONST $_USB2_SOFT_RESET                     $USB2_SOFT_RESET; // RW   6 bits
.CONST $HOST_SYS_BITSERIAL_DATA_OUTPUT_PIO_CTRL 0xFFF704; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_DATA_OUTPUT_PIO_CTRL $HOST_SYS_BITSERIAL_DATA_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_CIS_CONFIG_READ_DATA           0xFFF704; //  R  16 bits
.CONST $_SDIO_CIS_CONFIG_READ_DATA           $SDIO_CIS_CONFIG_READ_DATA; //  R  16 bits
.CONST $UART_STATUS                         0xFFF704; //  R   5 bits
.CONST $_UART_STATUS                         $UART_STATUS; //  R   5 bits
.CONST $USB2_TX_EP_STATUS                   0xFFF704; //  R   8 bits
.CONST $_USB2_TX_EP_STATUS                   $USB2_TX_EP_STATUS; //  R   8 bits
.CONST $HOST_SYS_BITSERIAL_CLK_OUTPUT_PIO_CTRL 0xFFF705; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_CLK_OUTPUT_PIO_CTRL $HOST_SYS_BITSERIAL_CLK_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_CONTROL                        0xFFF705; // RW  10 bits
.CONST $_SDIO_CONTROL                        $SDIO_CONTROL; // RW  10 bits
.CONST $USB2_EXT_TOKEN_HANDSHAKES           0xFFF705; // RW  16 bits
.CONST $_USB2_EXT_TOKEN_HANDSHAKES           $USB2_EXT_TOKEN_HANDSHAKES; // RW  16 bits
.CONST $HOST_SYS_BITSERIAL_SEL_OUTPUT_PIO_CTRL 0xFFF706; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_SEL_OUTPUT_PIO_CTRL $HOST_SYS_BITSERIAL_SEL_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_DEBUG_SEL                      0xFFF706; // RW   8 bits
.CONST $_SDIO_DEBUG_SEL                      $SDIO_DEBUG_SEL; // RW   8 bits
.CONST $USB2_PHY_TYPE                       0xFFF706; // RW   3 bits
.CONST $_USB2_PHY_TYPE                       $USB2_PHY_TYPE; // RW   3 bits
.CONST $HOST_SYS_BITSERIAL_DATA_INPUT_PIO_CTRL 0xFFF707; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_DATA_INPUT_PIO_CTRL $HOST_SYS_BITSERIAL_DATA_INPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_DEBUG_STATUS                   0xFFF707; //  R  16 bits
.CONST $_SDIO_DEBUG_STATUS                   $SDIO_DEBUG_STATUS; //  R  16 bits
.CONST $USB2_UTMI_CTRL                      0xFFF707; // RW  12 bits
.CONST $_USB2_UTMI_CTRL                      $USB2_UTMI_CTRL; // RW  12 bits
.CONST $HOST_SYS_BITSERIAL_CLK_INPUT_PIO_CTRL 0xFFF708; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_CLK_INPUT_PIO_CTRL $HOST_SYS_BITSERIAL_CLK_INPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_EVENT_TYPE                     0xFFF708; //  R   4 bits
.CONST $_SDIO_EVENT_TYPE                     $SDIO_EVENT_TYPE; //  R   4 bits
.CONST $USB2_UTMI_STATUS                    0xFFF708; //  R  14 bits
.CONST $_USB2_UTMI_STATUS                    $USB2_UTMI_STATUS; //  R  14 bits
.CONST $HOST_SYS_BITSERIAL_SEL_INPUT_PIO_CTRL 0xFFF709; // RW   5 bits
.CONST $_HOST_SYS_BITSERIAL_SEL_INPUT_PIO_CTRL $HOST_SYS_BITSERIAL_SEL_INPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_F0_STATUS1                     0xFFF709; //  R  16 bits
.CONST $_SDIO_F0_STATUS1                     $SDIO_F0_STATUS1; //  R  16 bits
.CONST $USB2_UCR_STATE                      0xFFF709; //  R  16 bits
.CONST $_USB2_UCR_STATE                      $USB2_UCR_STATE; //  R  16 bits
.CONST $HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL 0xFFF70A; // RW   5 bits
.CONST $_HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL $HOST_SYS_SDIO_SIDEBAND_INTERRUPT_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_F0_STATUS2                     0xFFF70A; //  R  16 bits
.CONST $_SDIO_F0_STATUS2                     $SDIO_F0_STATUS2; //  R  16 bits
.CONST $USB2_UTMI_CLKS_PER_500NS            0xFFF70A; // RW   8 bits
.CONST $_USB2_UTMI_CLKS_PER_500NS            $USB2_UTMI_CLKS_PER_500NS; // RW   8 bits
.CONST $HOST_SYS_DEBUG_SELECT               0xFFF70B; // RW   8 bits
.CONST $_HOST_SYS_DEBUG_SELECT               $HOST_SYS_DEBUG_SELECT; // RW   8 bits
.CONST $SDIO_FROM_HOST_SCRATCH0             0xFFF70B; //  R   8 bits
.CONST $_SDIO_FROM_HOST_SCRATCH0             $SDIO_FROM_HOST_SCRATCH0; //  R   8 bits
.CONST $USB2_COMPLIANCE_TEST_SUPPORT        0xFFF70B; // RW   1 bits
.CONST $_USB2_COMPLIANCE_TEST_SUPPORT        $USB2_COMPLIANCE_TEST_SUPPORT; // RW   1 bits
.CONST $HOST_SYS_BTM_DEBUG_SELECT           0xFFF70C; // RW   6 bits
.CONST $_HOST_SYS_BTM_DEBUG_SELECT           $HOST_SYS_BTM_DEBUG_SELECT; // RW   6 bits
.CONST $SDIO_FROM_HOST_SCRATCH1             0xFFF70C; //  R   8 bits
.CONST $_SDIO_FROM_HOST_SCRATCH1             $SDIO_FROM_HOST_SCRATCH1; //  R   8 bits
.CONST $UART_INTERRUPT_CC_CURATOR_ENABLE    0xFFF70C; // RW  16 bits
.CONST $_UART_INTERRUPT_CC_CURATOR_ENABLE    $UART_INTERRUPT_CC_CURATOR_ENABLE; // RW  16 bits
.CONST $USB2_FS_PAD_CTRL                    0xFFF70C; // RW  10 bits
.CONST $_USB2_FS_PAD_CTRL                    $USB2_FS_PAD_CTRL; // RW  10 bits
.CONST $HOST_SYS_CLK_80M_DIV                0xFFF70D; // RW   8 bits
.CONST $_HOST_SYS_CLK_80M_DIV                $HOST_SYS_CLK_80M_DIV; // RW   8 bits
.CONST $SDIO_TO_HOST_SCRATCH0               0xFFF70D; // RW   8 bits
.CONST $_SDIO_TO_HOST_SCRATCH0               $SDIO_TO_HOST_SCRATCH0; // RW   8 bits
.CONST $UART_INTERRUPT_CC_CURATOR_EVT_ENABLE 0xFFF70D; // RW  12 bits
.CONST $_UART_INTERRUPT_CC_CURATOR_EVT_ENABLE $UART_INTERRUPT_CC_CURATOR_EVT_ENABLE; // RW  12 bits
.CONST $USB2_FS_PAD_STATUS                  0xFFF70D; //  R   1 bits
.CONST $_USB2_FS_PAD_STATUS                  $USB2_FS_PAD_STATUS; //  R   1 bits
.CONST $SDIO_TO_HOST_SCRATCH1               0xFFF70E; // RW   8 bits
.CONST $_SDIO_TO_HOST_SCRATCH1               $SDIO_TO_HOST_SCRATCH1; // RW   8 bits
.CONST $UART_EVT_DESC_CC_CURATOR_ENABLE     0xFFF70E; // RW  16 bits
.CONST $_UART_EVT_DESC_CC_CURATOR_ENABLE     $UART_EVT_DESC_CC_CURATOR_ENABLE; // RW  16 bits
.CONST $USB2_CURATOR_SSID                   0xFFF70E; // RW   4 bits
.CONST $_USB2_CURATOR_SSID                   $USB2_CURATOR_SSID; // RW   4 bits
.CONST $SDIO_FUNC_DISABLE                   0xFFF70F; // RW   8 bits
.CONST $_SDIO_FUNC_DISABLE                   $SDIO_FUNC_DISABLE; // RW   8 bits
.CONST $UART_EVT_DESC_CC_CURATOR_EVT_ENABLE 0xFFF70F; // RW  12 bits
.CONST $_UART_EVT_DESC_CC_CURATOR_EVT_ENABLE $UART_EVT_DESC_CC_CURATOR_EVT_ENABLE; // RW  12 bits
.CONST $USB2_COMMON_REGS_SS_WRITE_ENABLE    0xFFF70F; // RW  16 bits
.CONST $_USB2_COMMON_REGS_SS_WRITE_ENABLE    $USB2_COMMON_REGS_SS_WRITE_ENABLE; // RW  16 bits
.CONST $HOST_SYS_POWER_ENABLES              0xFFF710; // RW   6 bits
.CONST $_HOST_SYS_POWER_ENABLES              $HOST_SYS_POWER_ENABLES; // RW   6 bits
.CONST $SDIO_HOST_DEEP_SLEEP                0xFFF710; //  R   8 bits
.CONST $_SDIO_HOST_DEEP_SLEEP                $SDIO_HOST_DEEP_SLEEP; //  R   8 bits
.CONST $UART_CURATOR_SSID                   0xFFF710; // RW   4 bits
.CONST $_UART_CURATOR_SSID                   $UART_CURATOR_SSID; // RW   4 bits
.CONST $USB2_SET_ENDPOINT_SSID              0xFFF710; // RW  10 bits
.CONST $_USB2_SET_ENDPOINT_SSID              $USB2_SET_ENDPOINT_SSID; // RW  10 bits
.CONST $HOST_SYS_POWER_STATUS               0xFFF711; //  R   6 bits
.CONST $_HOST_SYS_POWER_STATUS               $HOST_SYS_POWER_STATUS; //  R   6 bits
.CONST $SDIO_MODE                           0xFFF711; // RW  10 bits
.CONST $_SDIO_MODE                           $SDIO_MODE; // RW  10 bits
.CONST $UART_CURATOR_REG_ACCESS_CONTROL     0xFFF711; // RW   5 bits
.CONST $_UART_CURATOR_REG_ACCESS_CONTROL     $UART_CURATOR_REG_ACCESS_CONTROL; // RW   5 bits
.CONST $USB2_CURATOR_INTERRUPT_ENABLE       0xFFF711; // RW   9 bits
.CONST $_USB2_CURATOR_INTERRUPT_ENABLE       $USB2_CURATOR_INTERRUPT_ENABLE; // RW   9 bits
.CONST $HOST_SYS_HIFS_BUILT                 0xFFF712; //  R   6 bits
.CONST $_HOST_SYS_HIFS_BUILT                 $HOST_SYS_HIFS_BUILT; //  R   6 bits
.CONST $SDIO_OP_LENGTH                      0xFFF712; //  R  16 bits
.CONST $_SDIO_OP_LENGTH                      $SDIO_OP_LENGTH; //  R  16 bits
.CONST $UART_COMMON_REGS_SS_WRITE_ENABLE    0xFFF712; // RW  16 bits
.CONST $_UART_COMMON_REGS_SS_WRITE_ENABLE    $UART_COMMON_REGS_SS_WRITE_ENABLE; // RW  16 bits
.CONST $USB2_CURATOR_EVT_DESC_ENABLE        0xFFF712; // RW   9 bits
.CONST $_USB2_CURATOR_EVT_DESC_ENABLE        $USB2_CURATOR_EVT_DESC_ENABLE; // RW   9 bits
.CONST $HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN 0xFFF713; // RW  16 bits
.CONST $_HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN $HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN; // RW  16 bits
.CONST $SDIO_PAD_STATUS                     0xFFF713; //  R   7 bits
.CONST $_SDIO_PAD_STATUS                     $SDIO_PAD_STATUS; //  R   7 bits
.CONST $UART_NUM_SUBSYS_SUPPORTED           0xFFF713; //  R   5 bits
.CONST $_UART_NUM_SUBSYS_SUPPORTED           $UART_NUM_SUBSYS_SUPPORTED; //  R   5 bits
.CONST $USB2_EVENT_STATUS                   0xFFF713; //  R   6 bits
.CONST $_USB2_EVENT_STATUS                   $USB2_EVENT_STATUS; //  R   6 bits
.CONST $HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL  0xFFF714; // RW   5 bits
.CONST $_HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL  $HOST_SYS_UART_DATA_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_PAD_TEST                       0xFFF714; // RW  10 bits
.CONST $_SDIO_PAD_TEST                       $SDIO_PAD_TEST; // RW  10 bits
.CONST $UART_SRU_CONTROL                    0xFFF714; // RW   8 bits
.CONST $_UART_SRU_CONTROL                    $UART_SRU_CONTROL; // RW   8 bits
.CONST $USB2_EVENT_STATUS_CLEAR             0xFFF714; // RW   6 bits
.CONST $_USB2_EVENT_STATUS_CLEAR             $USB2_EVENT_STATUS_CLEAR; // RW   6 bits
.CONST $HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL  0xFFF715; // RW   5 bits
.CONST $_HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL  $HOST_SYS_UART_RTSB_OUTPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_POWER_STATUS                   0xFFF715; //  R   8 bits
.CONST $_SDIO_POWER_STATUS                   $SDIO_POWER_STATUS; //  R   8 bits
.CONST $UART_DEBUG_STATUS                   0xFFF715; //  R  16 bits
.CONST $_UART_DEBUG_STATUS                   $UART_DEBUG_STATUS; //  R  16 bits
.CONST $USB2_NDT_STATUS_BUFFER              0xFFF715; // RW   8 bits
.CONST $_USB2_NDT_STATUS_BUFFER              $USB2_NDT_STATUS_BUFFER; // RW   8 bits
.CONST $HOST_SYS_UART_DATA_INPUT_PIO_CTRL   0xFFF716; // RW   5 bits
.CONST $_HOST_SYS_UART_DATA_INPUT_PIO_CTRL   $HOST_SYS_UART_DATA_INPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_STATE1                         0xFFF716; //  R  16 bits
.CONST $_SDIO_STATE1                         $SDIO_STATE1; //  R  16 bits
.CONST $UART_DEBUG_SELECT                   0xFFF716; // RW   5 bits
.CONST $_UART_DEBUG_SELECT                   $UART_DEBUG_SELECT; // RW   5 bits
.CONST $USB2_NON_SOF_INACTIVITY_TIMEOUT     0xFFF716; // RW  12 bits
.CONST $_USB2_NON_SOF_INACTIVITY_TIMEOUT     $USB2_NON_SOF_INACTIVITY_TIMEOUT; // RW  12 bits
.CONST $HOST_SYS_UART_CTSB_INPUT_PIO_CTRL   0xFFF717; // RW   5 bits
.CONST $_HOST_SYS_UART_CTSB_INPUT_PIO_CTRL   $HOST_SYS_UART_CTSB_INPUT_PIO_CTRL; // RW   5 bits
.CONST $SDIO_STATE2                         0xFFF717; //  R  16 bits
.CONST $_SDIO_STATE2                         $SDIO_STATE2; //  R  16 bits
.CONST $USB2_EVENT_REPORTING_ERROR_STATUS   0xFFF717; //  R  13 bits
.CONST $_USB2_EVENT_REPORTING_ERROR_STATUS   $USB2_EVENT_REPORTING_ERROR_STATUS; //  R  13 bits
.CONST $SDIO_STATE3                         0xFFF718; //  R  16 bits
.CONST $_SDIO_STATE3                         $SDIO_STATE3; //  R  16 bits
.CONST $USB2_BUILD_OPTIONS                  0xFFF718; //  R  15 bits
.CONST $_USB2_BUILD_OPTIONS                  $USB2_BUILD_OPTIONS; //  R  15 bits
.CONST $SDIO_SID_MAP_5_2                    0xFFF719; // RW  16 bits
.CONST $_SDIO_SID_MAP_5_2                    $SDIO_SID_MAP_5_2; // RW  16 bits
.CONST $USB2_SUBSYSTEMS_SUPPORTED           0xFFF719; //  R  16 bits
.CONST $_USB2_SUBSYSTEMS_SUPPORTED           $USB2_SUBSYSTEMS_SUPPORTED; //  R  16 bits
.CONST $SDIO_SID_MAP_7_6                    0xFFF71A; // RW   8 bits
.CONST $_SDIO_SID_MAP_7_6                    $SDIO_SID_MAP_7_6; // RW   8 bits
.CONST $USB2_HSIC_PHY_CONTROL               0xFFF71A; // RW  14 bits
.CONST $_USB2_HSIC_PHY_CONTROL               $USB2_HSIC_PHY_CONTROL; // RW  14 bits
.CONST $SDIO_FUNC_SID_SEL                   0xFFF71B; // RW   8 bits
.CONST $_SDIO_FUNC_SID_SEL                   $SDIO_FUNC_SID_SEL; // RW   8 bits
.CONST $USB2_TX_DATA_FETCH_RAM_POWER_CONTROL 0xFFF71B; // RW   3 bits
.CONST $_USB2_TX_DATA_FETCH_RAM_POWER_CONTROL $USB2_TX_DATA_FETCH_RAM_POWER_CONTROL; // RW   3 bits
.CONST $SDIO_CURATOR_REG_SID                0xFFF71C; // RW   4 bits
.CONST $_SDIO_CURATOR_REG_SID                $SDIO_CURATOR_REG_SID; // RW   4 bits
.CONST $USB2_TX_DATA_FETCH_RAM_DBG_SELECT   0xFFF71C; // RW  10 bits
.CONST $_USB2_TX_DATA_FETCH_RAM_DBG_SELECT   $USB2_TX_DATA_FETCH_RAM_DBG_SELECT; // RW  10 bits
.CONST $SDIO_ACTIVITY_INT_EN                0xFFF71D; // RW   8 bits
.CONST $_SDIO_ACTIVITY_INT_EN                $SDIO_ACTIVITY_INT_EN; // RW   8 bits
.CONST $USB2_TX_DATA_FETCH_RAM_DBG_WRITE    0xFFF71D; // RW  16 bits
.CONST $_USB2_TX_DATA_FETCH_RAM_DBG_WRITE    $USB2_TX_DATA_FETCH_RAM_DBG_WRITE; // RW  16 bits
.CONST $SDIO_ERROR_STATUS                   0xFFF71E; //  R   9 bits
.CONST $_SDIO_ERROR_STATUS                   $SDIO_ERROR_STATUS; //  R   9 bits
.CONST $USB2_TX_DATA_FETCH_RAM_DBG_DO_READ  0xFFF71E; //  W   1 bits
.CONST $_USB2_TX_DATA_FETCH_RAM_DBG_DO_READ  $USB2_TX_DATA_FETCH_RAM_DBG_DO_READ; //  W   1 bits
.CONST $SDIO_PAD_CONTROL                    0xFFF71F; // RW   9 bits
.CONST $_SDIO_PAD_CONTROL                    $SDIO_PAD_CONTROL; // RW   9 bits
.CONST $USB2_TX_DATA_FETCH_RAM_DBG_READ_VALUE 0xFFF71F; //  R  16 bits
.CONST $_USB2_TX_DATA_FETCH_RAM_DBG_READ_VALUE $USB2_TX_DATA_FETCH_RAM_DBG_READ_VALUE; //  R  16 bits
.CONST $UART_BCSP_RX_SEQ_MODE_IS_PER_PROT_ID 0xFFF720; // RW   1 bits
.CONST $_UART_BCSP_RX_SEQ_MODE_IS_PER_PROT_ID $UART_BCSP_RX_SEQ_MODE_IS_PER_PROT_ID; // RW   1 bits
.CONST $USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE_READ 0xFFF720; //  R   6 bits
.CONST $_USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE_READ $USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE_READ; //  R   6 bits
.CONST $UART_BCSP_RX_LAST_SEQ_NUM_WRITE     0xFFF721; // RW   7 bits
.CONST $_UART_BCSP_RX_LAST_SEQ_NUM_WRITE     $UART_BCSP_RX_LAST_SEQ_NUM_WRITE; // RW   7 bits
.CONST $USB2_EP_CONFIG_ENABLES_READ         0xFFF721; //  R   8 bits
.CONST $_USB2_EP_CONFIG_ENABLES_READ         $USB2_EP_CONFIG_ENABLES_READ; //  R   8 bits
.CONST $UART_BCSP_RX_PROT_ID_READ_SELECT    0xFFF722; // RW   4 bits
.CONST $_UART_BCSP_RX_PROT_ID_READ_SELECT    $UART_BCSP_RX_PROT_ID_READ_SELECT; // RW   4 bits
.CONST $USB2_EP_CONFIG_STATUS               0xFFF722; //  R   3 bits
.CONST $_USB2_EP_CONFIG_STATUS               $USB2_EP_CONFIG_STATUS; //  R   3 bits
.CONST $UART_BCSP_RX_LAST_SEQ_NUM_READ      0xFFF723; //  R   7 bits
.CONST $_UART_BCSP_RX_LAST_SEQ_NUM_READ      $UART_BCSP_RX_LAST_SEQ_NUM_READ; //  R   7 bits
.CONST $USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER_READ 0xFFF723; //  R  12 bits
.CONST $_USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER_READ $USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER_READ; //  R  12 bits
.CONST $UART_RX_IDLE_TIMEOUT                0xFFF724; // RW  10 bits
.CONST $_UART_RX_IDLE_TIMEOUT                $UART_RX_IDLE_TIMEOUT; // RW  10 bits
.CONST $USB2_EP_CONFIG_PROTOCOL_READ        0xFFF724; //  R   2 bits
.CONST $_USB2_EP_CONFIG_PROTOCOL_READ        $USB2_EP_CONFIG_PROTOCOL_READ; //  R   2 bits
.CONST $UART_RX_FORCE_END_OF_PACKET         0xFFF725; //  W   1 bits
.CONST $_UART_RX_FORCE_END_OF_PACKET         $UART_RX_FORCE_END_OF_PACKET; //  W   1 bits
.CONST $USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE_READ 0xFFF725; //  R   8 bits
.CONST $_USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE_READ $USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE_READ; //  R   8 bits
.CONST $UART_TX_TDQ0_DISABLE                0xFFF726; // RW  16 bits
.CONST $_UART_TX_TDQ0_DISABLE                $UART_TX_TDQ0_DISABLE; // RW  16 bits
.CONST $USB2_EP_CONFIG_RX_FREE_SPACE_IN_BUFFER 0xFFF726; //  R  24 bits
.CONST $_USB2_EP_CONFIG_RX_FREE_SPACE_IN_BUFFER $USB2_EP_CONFIG_RX_FREE_SPACE_IN_BUFFER; //  R  24 bits
.CONST $UART_TX_TDQ1_DISABLE                0xFFF727; // RW  16 bits
.CONST $_UART_TX_TDQ1_DISABLE                $UART_TX_TDQ1_DISABLE; // RW  16 bits
.CONST $UART_NO_ACTIVITY_DETECTOR           0xFFF728; // RW  16 bits
.CONST $_UART_NO_ACTIVITY_DETECTOR           $UART_NO_ACTIVITY_DETECTOR; // RW  16 bits
.CONST $USB2_EP_CONFIG_MAX_PACKET_SIZE_READ 0xFFF728; //  R  12 bits
.CONST $_USB2_EP_CONFIG_MAX_PACKET_SIZE_READ $USB2_EP_CONFIG_MAX_PACKET_SIZE_READ; //  R  12 bits
.CONST $UART_NO_ACTIVITY_COUNTDOWN          0xFFF729; //  R  16 bits
.CONST $_UART_NO_ACTIVITY_COUNTDOWN          $UART_NO_ACTIVITY_COUNTDOWN; //  R  16 bits
.CONST $USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS_READ 0xFFF729; //  R   2 bits
.CONST $_USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS_READ $USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS_READ; //  R   2 bits
.CONST $USB2_EP_CONFIG_TX_TD_BUFFER_READ    0xFFF72A; //  R   8 bits
.CONST $_USB2_EP_CONFIG_TX_TD_BUFFER_READ    $USB2_EP_CONFIG_TX_TD_BUFFER_READ; //  R   8 bits
.CONST $USB2_EP_CONFIG_SSID_READ            0xFFF72B; //  R   4 bits
.CONST $_USB2_EP_CONFIG_SSID_READ            $USB2_EP_CONFIG_SSID_READ; //  R   4 bits
.CONST $USB2_EP_CONFIG_DEVICE_ADDRESS_READ  0xFFF72C; //  R   7 bits
.CONST $_USB2_EP_CONFIG_DEVICE_ADDRESS_READ  $USB2_EP_CONFIG_DEVICE_ADDRESS_READ; //  R   7 bits
.CONST $SDIO_STATUS_BUFF                    0xFFF730; // RW   8 bits
.CONST $_SDIO_STATUS_BUFF                    $SDIO_STATUS_BUFF; // RW   8 bits
.CONST $UART_EVENT_REPORTING_ERROR_STATUS   0xFFF730; //  R  13 bits
.CONST $_UART_EVENT_REPORTING_ERROR_STATUS   $UART_EVENT_REPORTING_ERROR_STATUS; //  R  13 bits
.CONST $SDIO_HOST_INT                       0xFFF731; // RW   1 bits
.CONST $_SDIO_HOST_INT                       $SDIO_HOST_INT; // RW   1 bits
.CONST $UART_EVENT_REPORTING_ERROR_STATUS_CLEAR 0xFFF731; // RW   1 bits
.CONST $_UART_EVENT_REPORTING_ERROR_STATUS_CLEAR $UART_EVENT_REPORTING_ERROR_STATUS_CLEAR; // RW   1 bits
.CONST $SDIO_HOST_INT_STATUS                0xFFF732; //  R   1 bits
.CONST $_SDIO_HOST_INT_STATUS                $SDIO_HOST_INT_STATUS; //  R   1 bits
.CONST $UART_EVENT_REPORTING_SOFT_RESET     0xFFF732; // RW   1 bits
.CONST $_UART_EVENT_REPORTING_SOFT_RESET     $UART_EVENT_REPORTING_SOFT_RESET; // RW   1 bits
.CONST $SDIO_AUTO_ACK_BUFF                  0xFFF733; // RW   8 bits
.CONST $_SDIO_AUTO_ACK_BUFF                  $SDIO_AUTO_ACK_BUFF; // RW   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH0         0xFFF734; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH0         $SDIO_GEN_FROM_HOST_SCRATCH0; //  R   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH1         0xFFF735; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH1         $SDIO_GEN_FROM_HOST_SCRATCH1; //  R   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH2         0xFFF736; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH2         $SDIO_GEN_FROM_HOST_SCRATCH2; //  R   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH3         0xFFF737; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH3         $SDIO_GEN_FROM_HOST_SCRATCH3; //  R   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH4         0xFFF738; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH4         $SDIO_GEN_FROM_HOST_SCRATCH4; //  R   8 bits
.CONST $UART_SEARCH_SEQUENCE_0              0xFFF738; // RW   8 bits
.CONST $_UART_SEARCH_SEQUENCE_0              $UART_SEARCH_SEQUENCE_0; // RW   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH5         0xFFF739; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH5         $SDIO_GEN_FROM_HOST_SCRATCH5; //  R   8 bits
.CONST $UART_SEARCH_SEQUENCE_1              0xFFF739; // RW   8 bits
.CONST $_UART_SEARCH_SEQUENCE_1              $UART_SEARCH_SEQUENCE_1; // RW   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH6         0xFFF73A; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH6         $SDIO_GEN_FROM_HOST_SCRATCH6; //  R   8 bits
.CONST $UART_SEARCH_SEQUENCE_2              0xFFF73A; // RW   8 bits
.CONST $_UART_SEARCH_SEQUENCE_2              $UART_SEARCH_SEQUENCE_2; // RW   8 bits
.CONST $SDIO_GEN_FROM_HOST_SCRATCH7         0xFFF73B; //  R   8 bits
.CONST $_SDIO_GEN_FROM_HOST_SCRATCH7         $SDIO_GEN_FROM_HOST_SCRATCH7; //  R   8 bits
.CONST $UART_SEARCH_SEQUENCE_3              0xFFF73B; // RW   8 bits
.CONST $_UART_SEARCH_SEQUENCE_3              $UART_SEARCH_SEQUENCE_3; // RW   8 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH0           0xFFF73C; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH0           $SDIO_GEN_TO_HOST_SCRATCH0; // RW   8 bits
.CONST $UART_SEARCH_SEQUENCE_LENGTH         0xFFF73C; // RW   3 bits
.CONST $_UART_SEARCH_SEQUENCE_LENGTH         $UART_SEARCH_SEQUENCE_LENGTH; // RW   3 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH1           0xFFF73D; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH1           $SDIO_GEN_TO_HOST_SCRATCH1; // RW   8 bits
.CONST $UART_RX_PACKET_TIMEOUT              0xFFF73D; // RW  16 bits
.CONST $_UART_RX_PACKET_TIMEOUT              $UART_RX_PACKET_TIMEOUT; // RW  16 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH2           0xFFF73E; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH2           $SDIO_GEN_TO_HOST_SCRATCH2; // RW   8 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH3           0xFFF73F; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH3           $SDIO_GEN_TO_HOST_SCRATCH3; // RW   8 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH4           0xFFF740; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH4           $SDIO_GEN_TO_HOST_SCRATCH4; // RW   8 bits
.CONST $UART_RX_ENABLE                      0xFFF740; // RW   1 bits
.CONST $_UART_RX_ENABLE                      $UART_RX_ENABLE; // RW   1 bits
.CONST $USB2_TDQ_CONTROL                    0xFFF740; // RW   8 bits
.CONST $_USB2_TDQ_CONTROL                    $USB2_TDQ_CONTROL; // RW   8 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH5           0xFFF741; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH5           $SDIO_GEN_TO_HOST_SCRATCH5; // RW   8 bits
.CONST $UART_RX_PROTOCOL                    0xFFF741; // RW   2 bits
.CONST $_UART_RX_PROTOCOL                    $UART_RX_PROTOCOL; // RW   2 bits
.CONST $USB2_EP_CONFIG_CLEAR                0xFFF741; // RW   1 bits
.CONST $_USB2_EP_CONFIG_CLEAR                $USB2_EP_CONFIG_CLEAR; // RW   1 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH6           0xFFF742; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH6           $SDIO_GEN_TO_HOST_SCRATCH6; // RW   8 bits
.CONST $UART_RX_DEFAULT_SSID                0xFFF742; // RW   4 bits
.CONST $_UART_RX_DEFAULT_SSID                $UART_RX_DEFAULT_SSID; // RW   4 bits
.CONST $USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE 0xFFF742; // RW   6 bits
.CONST $_USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE $USB2_EP_CONFIG_ENDPOINT_NUMBER_AND_TYPE; // RW   6 bits
.CONST $SDIO_GEN_TO_HOST_SCRATCH7           0xFFF743; // RW   8 bits
.CONST $_SDIO_GEN_TO_HOST_SCRATCH7           $SDIO_GEN_TO_HOST_SCRATCH7; // RW   8 bits
.CONST $UART_RX_SOFT_RESET                  0xFFF743; // RW   1 bits
.CONST $_UART_RX_SOFT_RESET                  $UART_RX_SOFT_RESET; // RW   1 bits
.CONST $USB2_EP_CONFIG_ENABLES              0xFFF743; // RW  16 bits
.CONST $_USB2_EP_CONFIG_ENABLES              $USB2_EP_CONFIG_ENABLES; // RW  16 bits
.CONST $SDIO_MMU_DATA_ERROR_STATUS          0xFFF744; //  R  16 bits
.CONST $_SDIO_MMU_DATA_ERROR_STATUS          $SDIO_MMU_DATA_ERROR_STATUS; //  R  16 bits
.CONST $UART_RX_PROTOCOL_NONE_TRANSFER_LENGTH 0xFFF744; // RW  16 bits
.CONST $_UART_RX_PROTOCOL_NONE_TRANSFER_LENGTH $UART_RX_PROTOCOL_NONE_TRANSFER_LENGTH; // RW  16 bits
.CONST $USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE 0xFFF744; // RW   8 bits
.CONST $_USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE $USB2_EP_CONFIG_RX_MMU_BUFFER_HANDLE; // RW   8 bits
.CONST $SDIO_MMU_STATUS_ERROR_STATUS        0xFFF745; //  R  16 bits
.CONST $_SDIO_MMU_STATUS_ERROR_STATUS        $SDIO_MMU_STATUS_ERROR_STATUS; //  R  16 bits
.CONST $USB2_EP_CONFIG_RX_ADD_BUFFER_SPACE  0xFFF745; // RW  16 bits
.CONST $_USB2_EP_CONFIG_RX_ADD_BUFFER_SPACE  $USB2_EP_CONFIG_RX_ADD_BUFFER_SPACE; // RW  16 bits
.CONST $SDIO_GEN_POWER_STATUS               0xFFF746; //  R   8 bits
.CONST $_SDIO_GEN_POWER_STATUS               $SDIO_GEN_POWER_STATUS; //  R   8 bits
.CONST $USB2_EP_CONFIG_MAX_PACKET_SIZE      0xFFF746; // RW  12 bits
.CONST $_USB2_EP_CONFIG_MAX_PACKET_SIZE      $USB2_EP_CONFIG_MAX_PACKET_SIZE; // RW  12 bits
.CONST $SDIO_NO_WRITE_BUFF                  0xFFF747; // RW   8 bits
.CONST $_SDIO_NO_WRITE_BUFF                  $SDIO_NO_WRITE_BUFF; // RW   8 bits
.CONST $USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS 0xFFF747; // RW   2 bits
.CONST $_USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS $USB2_EP_CONFIG_TX_ISOCH_MAX_PACKETS; // RW   2 bits
.CONST $SDIO_GEN_FIFO_ERROR_STATUS          0xFFF748; //  R   4 bits
.CONST $_SDIO_GEN_FIFO_ERROR_STATUS          $SDIO_GEN_FIFO_ERROR_STATUS; //  R   4 bits
.CONST $USB2_EP_CONFIG_PROTOCOL             0xFFF748; // RW   2 bits
.CONST $_USB2_EP_CONFIG_PROTOCOL             $USB2_EP_CONFIG_PROTOCOL; // RW   2 bits
.CONST $USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER 0xFFF749; // RW  12 bits
.CONST $_USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER $USB2_EP_CONFIG_RX_PACKETS_PER_TRANSFER; // RW  12 bits
.CONST $USB2_EP_CONFIG_DATA_SEQUENCE        0xFFF74A; // RW   1 bits
.CONST $_USB2_EP_CONFIG_DATA_SEQUENCE        $USB2_EP_CONFIG_DATA_SEQUENCE; // RW   1 bits
.CONST $USB2_EP_CONFIG_DEVICE_ADDRESS       0xFFF74B; // RW   7 bits
.CONST $_USB2_EP_CONFIG_DEVICE_ADDRESS       $USB2_EP_CONFIG_DEVICE_ADDRESS; // RW   7 bits
.CONST $USB2_EP_CONFIG_TX_TD_BUFFER         0xFFF74C; // RW   8 bits
.CONST $_USB2_EP_CONFIG_TX_TD_BUFFER         $USB2_EP_CONFIG_TX_TD_BUFFER; // RW   8 bits
.CONST $UART_TX_ENABLE                      0xFFF750; // RW   1 bits
.CONST $_UART_TX_ENABLE                      $UART_TX_ENABLE; // RW   1 bits
.CONST $UART_TX_SOFT_RESET                  0xFFF751; // RW   1 bits
.CONST $_UART_TX_SOFT_RESET                  $UART_TX_SOFT_RESET; // RW   1 bits
.CONST $UART_TX_TD_CTRL                     0xFFF752; // RW   4 bits
.CONST $_UART_TX_TD_CTRL                     $UART_TX_TD_CTRL; // RW   4 bits
.CONST $UART_TX_TD_GLOBAL_CTRL              0xFFF753; // RW   2 bits
.CONST $_UART_TX_TD_GLOBAL_CTRL              $UART_TX_TD_GLOBAL_CTRL; // RW   2 bits
.CONST $SDIO_BT_FIXED_BUFF_HANDLE_OFFSETS   0xFFF760; // RW   8 bits
.CONST $_SDIO_BT_FIXED_BUFF_HANDLE_OFFSETS   $SDIO_BT_FIXED_BUFF_HANDLE_OFFSETS; // RW   8 bits
.CONST $UART_PROTOCOL_MAPPING_00            0xFFF760; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_00            $UART_PROTOCOL_MAPPING_00; // RW  15 bits
.CONST $SDIO_BT_BUFF_HANDLE_OFFSETS         0xFFF761; // RW  16 bits
.CONST $_SDIO_BT_BUFF_HANDLE_OFFSETS         $SDIO_BT_BUFF_HANDLE_OFFSETS; // RW  16 bits
.CONST $UART_PROTOCOL_MAPPING_01            0xFFF761; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_01            $UART_PROTOCOL_MAPPING_01; // RW  15 bits
.CONST $SDIO_BT_ACL_MAX_STREAM_BUFF         0xFFF762; // RW  12 bits
.CONST $_SDIO_BT_ACL_MAX_STREAM_BUFF         $SDIO_BT_ACL_MAX_STREAM_BUFF; // RW  12 bits
.CONST $UART_PROTOCOL_MAPPING_02            0xFFF762; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_02            $UART_PROTOCOL_MAPPING_02; // RW  15 bits
.CONST $SDIO_BT_ACL_MIN_STREAM_BUFF         0xFFF763; // RW  12 bits
.CONST $_SDIO_BT_ACL_MIN_STREAM_BUFF         $SDIO_BT_ACL_MIN_STREAM_BUFF; // RW  12 bits
.CONST $UART_PROTOCOL_MAPPING_03            0xFFF763; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_03            $UART_PROTOCOL_MAPPING_03; // RW  15 bits
.CONST $SDIO_BT_SCO_MAX_STREAM_BUFF         0xFFF764; // RW  12 bits
.CONST $_SDIO_BT_SCO_MAX_STREAM_BUFF         $SDIO_BT_SCO_MAX_STREAM_BUFF; // RW  12 bits
.CONST $UART_PROTOCOL_MAPPING_04            0xFFF764; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_04            $UART_PROTOCOL_MAPPING_04; // RW  15 bits
.CONST $SDIO_BT_SCO_MIN_STREAM_BUFF         0xFFF765; // RW  12 bits
.CONST $_SDIO_BT_SCO_MIN_STREAM_BUFF         $SDIO_BT_SCO_MIN_STREAM_BUFF; // RW  12 bits
.CONST $UART_PROTOCOL_MAPPING_05            0xFFF765; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_05            $UART_PROTOCOL_MAPPING_05; // RW  15 bits
.CONST $SDIO_BT_PACKET_READ_REQ             0xFFF766; // RW   1 bits
.CONST $_SDIO_BT_PACKET_READ_REQ             $SDIO_BT_PACKET_READ_REQ; // RW   1 bits
.CONST $UART_PROTOCOL_MAPPING_06            0xFFF766; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_06            $UART_PROTOCOL_MAPPING_06; // RW  15 bits
.CONST $SDIO_BT_PACKET_READ_STATUS          0xFFF767; //  R   5 bits
.CONST $_SDIO_BT_PACKET_READ_STATUS          $SDIO_BT_PACKET_READ_STATUS; //  R   5 bits
.CONST $UART_PROTOCOL_MAPPING_07            0xFFF767; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_07            $UART_PROTOCOL_MAPPING_07; // RW  15 bits
.CONST $SDIO_BT_READ_CMD_BUFF               0xFFF768; // RW   8 bits
.CONST $_SDIO_BT_READ_CMD_BUFF               $SDIO_BT_READ_CMD_BUFF; // RW   8 bits
.CONST $UART_PROTOCOL_MAPPING_08            0xFFF768; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_08            $UART_PROTOCOL_MAPPING_08; // RW  15 bits
.CONST $SDIO_BT_STATUS_BUFF                 0xFFF769; // RW   8 bits
.CONST $_SDIO_BT_STATUS_BUFF                 $SDIO_BT_STATUS_BUFF; // RW   8 bits
.CONST $UART_PROTOCOL_MAPPING_09            0xFFF769; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_09            $UART_PROTOCOL_MAPPING_09; // RW  15 bits
.CONST $SDIO_HCI_CMD_BUFF                   0xFFF76A; // RW   8 bits
.CONST $_SDIO_HCI_CMD_BUFF                   $SDIO_HCI_CMD_BUFF; // RW   8 bits
.CONST $UART_PROTOCOL_MAPPING_10            0xFFF76A; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_10            $UART_PROTOCOL_MAPPING_10; // RW  15 bits
.CONST $SDIO_BT_DATA_ERROR_STATUS           0xFFF76B; //  R  16 bits
.CONST $_SDIO_BT_DATA_ERROR_STATUS           $SDIO_BT_DATA_ERROR_STATUS; //  R  16 bits
.CONST $UART_PROTOCOL_MAPPING_11            0xFFF76B; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_11            $UART_PROTOCOL_MAPPING_11; // RW  15 bits
.CONST $SDIO_BT_STATUS_CMD_ERROR_STATUS     0xFFF76C; //  R  16 bits
.CONST $_SDIO_BT_STATUS_CMD_ERROR_STATUS     $SDIO_BT_STATUS_CMD_ERROR_STATUS; //  R  16 bits
.CONST $UART_PROTOCOL_MAPPING_12            0xFFF76C; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_12            $UART_PROTOCOL_MAPPING_12; // RW  15 bits
.CONST $SDIO_BT_POWER_STATUS                0xFFF76D; //  R   8 bits
.CONST $_SDIO_BT_POWER_STATUS                $SDIO_BT_POWER_STATUS; //  R   8 bits
.CONST $UART_PROTOCOL_MAPPING_13            0xFFF76D; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_13            $UART_PROTOCOL_MAPPING_13; // RW  15 bits
.CONST $SDIO_BT_ACL_SID                     0xFFF76E; // RW   5 bits
.CONST $_SDIO_BT_ACL_SID                     $SDIO_BT_ACL_SID; // RW   5 bits
.CONST $UART_PROTOCOL_MAPPING_14            0xFFF76E; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_14            $UART_PROTOCOL_MAPPING_14; // RW  15 bits
.CONST $SDIO_BT_SCO_READ_SID                0xFFF76F; // RW   5 bits
.CONST $_SDIO_BT_SCO_READ_SID                $SDIO_BT_SCO_READ_SID; // RW   5 bits
.CONST $UART_PROTOCOL_MAPPING_15            0xFFF76F; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_15            $UART_PROTOCOL_MAPPING_15; // RW  15 bits
.CONST $SDIO_BT_SCO_WRITE_SID               0xFFF770; // RW   5 bits
.CONST $_SDIO_BT_SCO_WRITE_SID               $SDIO_BT_SCO_WRITE_SID; // RW   5 bits
.CONST $UART_PROTOCOL_MAPPING_16            0xFFF770; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_16            $UART_PROTOCOL_MAPPING_16; // RW  15 bits
.CONST $SDIO_BT_FIFO_ERROR_STATUS           0xFFF771; //  R   4 bits
.CONST $_SDIO_BT_FIFO_ERROR_STATUS           $SDIO_BT_FIFO_ERROR_STATUS; //  R   4 bits
.CONST $UART_PROTOCOL_MAPPING_17            0xFFF771; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_17            $UART_PROTOCOL_MAPPING_17; // RW  15 bits
.CONST $UART_PROTOCOL_MAPPING_18            0xFFF772; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_18            $UART_PROTOCOL_MAPPING_18; // RW  15 bits
.CONST $UART_PROTOCOL_MAPPING_19            0xFFF773; // RW  15 bits
.CONST $_UART_PROTOCOL_MAPPING_19            $UART_PROTOCOL_MAPPING_19; // RW  15 bits
.CONST $USB2_BT_RX_ACL_HOST_BUFFER_BASE     0xFFF780; // RW   8 bits
.CONST $_USB2_BT_RX_ACL_HOST_BUFFER_BASE     $USB2_BT_RX_ACL_HOST_BUFFER_BASE; // RW   8 bits
.CONST $USB2_BT_RX_SCO_HOST_BUFFER_BASE     0xFFF781; // RW   8 bits
.CONST $_USB2_BT_RX_SCO_HOST_BUFFER_BASE     $USB2_BT_RX_SCO_HOST_BUFFER_BASE; // RW   8 bits
.CONST $USB2_BT_RX_ACL_BCAST_ACTIVE_OFFSET  0xFFF782; // RW   8 bits
.CONST $_USB2_BT_RX_ACL_BCAST_ACTIVE_OFFSET  $USB2_BT_RX_ACL_BCAST_ACTIVE_OFFSET; // RW   8 bits
.CONST $USB2_BT_RX_ACL_BCAST_ALL_OFFSET     0xFFF783; // RW   8 bits
.CONST $_USB2_BT_RX_ACL_BCAST_ALL_OFFSET     $USB2_BT_RX_ACL_BCAST_ALL_OFFSET; // RW   8 bits
.CONST $USB2_BT_RX_ACL_BCAST_RSVD_OFFSET    0xFFF784; // RW   8 bits
.CONST $_USB2_BT_RX_ACL_BCAST_RSVD_OFFSET    $USB2_BT_RX_ACL_BCAST_RSVD_OFFSET; // RW   8 bits
.CONST $USB2_BT_RX_ACL_MIN_STREAM_HANDLE    0xFFF785; // RW  12 bits
.CONST $_USB2_BT_RX_ACL_MIN_STREAM_HANDLE    $USB2_BT_RX_ACL_MIN_STREAM_HANDLE; // RW  12 bits
.CONST $USB2_BT_RX_ACL_MAX_STREAM_HANDLE    0xFFF786; // RW  12 bits
.CONST $_USB2_BT_RX_ACL_MAX_STREAM_HANDLE    $USB2_BT_RX_ACL_MAX_STREAM_HANDLE; // RW  12 bits
.CONST $USB2_BT_RX_SCO_MIN_STREAM_HANDLE    0xFFF787; // RW  12 bits
.CONST $_USB2_BT_RX_SCO_MIN_STREAM_HANDLE    $USB2_BT_RX_SCO_MIN_STREAM_HANDLE; // RW  12 bits
.CONST $USB2_BT_RX_SCO_MAX_STREAM_HANDLE    0xFFF788; // RW  12 bits
.CONST $_USB2_BT_RX_SCO_MAX_STREAM_HANDLE    $USB2_BT_RX_SCO_MAX_STREAM_HANDLE; // RW  12 bits
.CONST $USB2_BT_RX_SCO_CONN_HANDLE1         0xFFF789; // RW  12 bits
.CONST $_USB2_BT_RX_SCO_CONN_HANDLE1         $USB2_BT_RX_SCO_CONN_HANDLE1; // RW  12 bits
.CONST $USB2_BT_RX_SCO_CONN_HANDLE2         0xFFF78A; // RW  12 bits
.CONST $_USB2_BT_RX_SCO_CONN_HANDLE2         $USB2_BT_RX_SCO_CONN_HANDLE2; // RW  12 bits
.CONST $USB2_BT_RX_SCO_CONN_HANDLE3         0xFFF78B; // RW  12 bits
.CONST $_USB2_BT_RX_SCO_CONN_HANDLE3         $USB2_BT_RX_SCO_CONN_HANDLE3; // RW  12 bits
.CONST $USB2_BT_RX_SCO_PAYLOAD_LENGTHS      0xFFF78C; // RW  16 bits
.CONST $_USB2_BT_RX_SCO_PAYLOAD_LENGTHS      $USB2_BT_RX_SCO_PAYLOAD_LENGTHS; // RW  16 bits
.CONST $USB2_BT_RX_SCO_ALTERNATIVE_SS       0xFFF78D; // RW   5 bits
.CONST $_USB2_BT_RX_SCO_ALTERNATIVE_SS       $USB2_BT_RX_SCO_ALTERNATIVE_SS; // RW   5 bits
.CONST $USB2_ENDPOINT_SELECT                0xFFF790; // RW   6 bits
.CONST $_USB2_ENDPOINT_SELECT                $USB2_ENDPOINT_SELECT; // RW   6 bits
.CONST $USB2_PER_SS_INTERRUPT_ENABLE        0xFFF791; // RW  16 bits
.CONST $_USB2_PER_SS_INTERRUPT_ENABLE        $USB2_PER_SS_INTERRUPT_ENABLE; // RW  16 bits
.CONST $USB2_PER_SS_EVT_DESC_ENABLE         0xFFF792; // RW  16 bits
.CONST $_USB2_PER_SS_EVT_DESC_ENABLE         $USB2_PER_SS_EVT_DESC_ENABLE; // RW  16 bits
.CONST $USB2_TX_STATUS_BUFFER               0xFFF793; // RW   8 bits
.CONST $_USB2_TX_STATUS_BUFFER               $USB2_TX_STATUS_BUFFER; // RW   8 bits
.CONST $USB2_RX_STATUS_BUFFER               0xFFF794; // RW   8 bits
.CONST $_USB2_RX_STATUS_BUFFER               $USB2_RX_STATUS_BUFFER; // RW   8 bits
.CONST $USB2_CONTROL_EP_STATUS_BUFFER       0xFFF795; // RW   8 bits
.CONST $_USB2_CONTROL_EP_STATUS_BUFFER       $USB2_CONTROL_EP_STATUS_BUFFER; // RW   8 bits
.CONST $USB2_DEBUG_SELECT                   0xFFF796; // RW   6 bits
.CONST $_USB2_DEBUG_SELECT                   $USB2_DEBUG_SELECT; // RW   6 bits
.CONST $USB2_DEBUG_STATUS                   0xFFF797; //  R  16 bits
.CONST $_USB2_DEBUG_STATUS                   $USB2_DEBUG_STATUS; //  R  16 bits
.CONST $UART_RX_DEFAULT_BUFFER              0xFFF7C0; // RW   8 bits
.CONST $_UART_RX_DEFAULT_BUFFER              $UART_RX_DEFAULT_BUFFER; // RW   8 bits
.CONST $UART_RX_STATUS_BUFFER               0xFFF7C1; // RW   8 bits
.CONST $_UART_RX_STATUS_BUFFER               $UART_RX_STATUS_BUFFER; // RW   8 bits
.CONST $UART_TX_STATUS_BUFFER               0xFFF7C2; // RW   8 bits
.CONST $_UART_TX_STATUS_BUFFER               $UART_TX_STATUS_BUFFER; // RW   8 bits
.CONST $UART_INTERRUPT_ENABLE               0xFFF7C3; // RW  12 bits
.CONST $_UART_INTERRUPT_ENABLE               $UART_INTERRUPT_ENABLE; // RW  12 bits
.CONST $UART_EVENT_DESC_ENABLE              0xFFF7C4; // RW  12 bits
.CONST $_UART_EVENT_DESC_ENABLE              $UART_EVENT_DESC_ENABLE; // RW  12 bits
.CONST $UART_TX_TD_BUFFER0                  0xFFF7C5; // RW  10 bits
.CONST $_UART_TX_TD_BUFFER0                  $UART_TX_TD_BUFFER0; // RW  10 bits
.CONST $UART_TX_TD_BUFFER1                  0xFFF7C6; // RW  10 bits
.CONST $_UART_TX_TD_BUFFER1                  $UART_TX_TD_BUFFER1; // RW  10 bits
.CONST $UART_TX_PENDING_TDS_Q0              0xFFF7C7; //  R   5 bits
.CONST $_UART_TX_PENDING_TDS_Q0              $UART_TX_PENDING_TDS_Q0; //  R   5 bits
.CONST $UART_TX_PENDING_TDS_Q1              0xFFF7C8; //  R   5 bits
.CONST $_UART_TX_PENDING_TDS_Q1              $UART_TX_PENDING_TDS_Q1; //  R   5 bits
.CONST $UART_SRU_SSID_READ                  0xFFF7D0; //  R   4 bits
.CONST $_UART_SRU_SSID_READ                  $UART_SRU_SSID_READ; //  R   4 bits
.CONST $UART_RX_HCI_ACL_MIN_STREAM_BUFFER   0xFFF7F0; // RW  12 bits
.CONST $_UART_RX_HCI_ACL_MIN_STREAM_BUFFER   $UART_RX_HCI_ACL_MIN_STREAM_BUFFER; // RW  12 bits
.CONST $UART_RX_HCI_ACL_MAX_STREAM_BUFFER   0xFFF7F1; // RW  12 bits
.CONST $_UART_RX_HCI_ACL_MAX_STREAM_BUFFER   $UART_RX_HCI_ACL_MAX_STREAM_BUFFER; // RW  12 bits
.CONST $UART_RX_HCI_SCO_MIN_STREAM_BUFFER   0xFFF7F2; // RW  12 bits
.CONST $_UART_RX_HCI_SCO_MIN_STREAM_BUFFER   $UART_RX_HCI_SCO_MIN_STREAM_BUFFER; // RW  12 bits
.CONST $UART_RX_HCI_SCO_MAX_STREAM_BUFFER   0xFFF7F3; // RW  12 bits
.CONST $_UART_RX_HCI_SCO_MAX_STREAM_BUFFER   $UART_RX_HCI_SCO_MAX_STREAM_BUFFER; // RW  12 bits
.CONST $UART_RX_HCI_ACL_BUFFER_OFFSET       0xFFF7F4; // RW   8 bits
.CONST $_UART_RX_HCI_ACL_BUFFER_OFFSET       $UART_RX_HCI_ACL_BUFFER_OFFSET; // RW   8 bits
.CONST $UART_RX_HCI_SCO_BUFFER_OFFSET       0xFFF7F5; // RW   8 bits
.CONST $_UART_RX_HCI_SCO_BUFFER_OFFSET       $UART_RX_HCI_SCO_BUFFER_OFFSET; // RW   8 bits
.CONST $UART_RX_HCI_ACL_BCAST_ALL_BUFFER    0xFFF7F6; // RW   8 bits
.CONST $_UART_RX_HCI_ACL_BCAST_ALL_BUFFER    $UART_RX_HCI_ACL_BCAST_ALL_BUFFER; // RW   8 bits
.CONST $SDIO_SS_INT_CLEAR                   0xFFF7F7; // RW  16 bits
.CONST $_SDIO_SS_INT_CLEAR                   $SDIO_SS_INT_CLEAR; // RW  16 bits
.CONST $UART_RX_HCI_ACL_BCAST_RSVD_BUFFER   0xFFF7F7; // RW   8 bits
.CONST $_UART_RX_HCI_ACL_BCAST_RSVD_BUFFER   $UART_RX_HCI_ACL_BCAST_RSVD_BUFFER; // RW   8 bits
.CONST $SDIO_SS_INT_MASK                    0xFFF7F8; // RW  16 bits
.CONST $_SDIO_SS_INT_MASK                    $SDIO_SS_INT_MASK; // RW  16 bits
.CONST $UART_RX_HCI_ACL_BCAST_ACTIVE_BUFFER 0xFFF7F8; // RW   8 bits
.CONST $_UART_RX_HCI_ACL_BCAST_ACTIVE_BUFFER $UART_RX_HCI_ACL_BCAST_ACTIVE_BUFFER; // RW   8 bits
.CONST $SDIO_SS_INT_STATUS                  0xFFF7F9; //  R  16 bits
.CONST $_SDIO_SS_INT_STATUS                  $SDIO_SS_INT_STATUS; //  R  16 bits
.CONST $UART_RX_HCI_ACL_BUFFER              0xFFF7F9; // RW   8 bits
.CONST $_UART_RX_HCI_ACL_BUFFER              $UART_RX_HCI_ACL_BUFFER; // RW   8 bits
.CONST $UART_RX_HCI_SCO_BUFFER              0xFFF7FA; // RW   8 bits
.CONST $_UART_RX_HCI_SCO_BUFFER              $UART_RX_HCI_SCO_BUFFER; // RW   8 bits
.CONST $UART_RX_HCI_SCO_SSID                0xFFF7FB; // RW   4 bits
.CONST $_UART_RX_HCI_SCO_SSID                $UART_RX_HCI_SCO_SSID; // RW   4 bits
.CONST $DM_BREAK0_START_ADDR                0xFFFF80; // RW  24 bits
.CONST $_DM_BREAK0_START_ADDR                $DM_BREAK0_START_ADDR; // RW  24 bits
.CONST $DM_BREAK0_END_ADDR                  0xFFFF81; // RW  24 bits
.CONST $_DM_BREAK0_END_ADDR                  $DM_BREAK0_END_ADDR; // RW  24 bits
.CONST $DM_BREAK1_START_ADDR                0xFFFF82; // RW  24 bits
.CONST $_DM_BREAK1_START_ADDR                $DM_BREAK1_START_ADDR; // RW  24 bits
.CONST $DM_BREAK1_END_ADDR                  0xFFFF83; // RW  24 bits
.CONST $_DM_BREAK1_END_ADDR                  $DM_BREAK1_END_ADDR; // RW  24 bits
.CONST $PM_BREAK0_ADDR                      0xFFFF84; // RW  24 bits
.CONST $_PM_BREAK0_ADDR                      $PM_BREAK0_ADDR; // RW  24 bits
.CONST $PM_BREAK1_ADDR                      0xFFFF85; // RW  24 bits
.CONST $_PM_BREAK1_ADDR                      $PM_BREAK1_ADDR; // RW  24 bits
.CONST $PM_BREAK2_ADDR                      0xFFFF86; // RW  24 bits
.CONST $_PM_BREAK2_ADDR                      $PM_BREAK2_ADDR; // RW  24 bits
.CONST $PM_BREAK3_ADDR                      0xFFFF87; // RW  24 bits
.CONST $_PM_BREAK3_ADDR                      $PM_BREAK3_ADDR; // RW  24 bits
.CONST $PM_BREAK4_ADDR                      0xFFFF88; // RW  24 bits
.CONST $_PM_BREAK4_ADDR                      $PM_BREAK4_ADDR; // RW  24 bits
.CONST $PM_BREAK5_ADDR                      0xFFFF89; // RW  24 bits
.CONST $_PM_BREAK5_ADDR                      $PM_BREAK5_ADDR; // RW  24 bits
.CONST $PM_BREAK6_ADDR                      0xFFFF8A; // RW  24 bits
.CONST $_PM_BREAK6_ADDR                      $PM_BREAK6_ADDR; // RW  24 bits
.CONST $PM_BREAK7_ADDR                      0xFFFF8B; // RW  24 bits
.CONST $_PM_BREAK7_ADDR                      $PM_BREAK7_ADDR; // RW  24 bits
.CONST $DEBUG                               0xFFFF8C; // RW  15 bits
.CONST $_DEBUG                               $DEBUG; // RW  15 bits
.CONST $STATUS                              0xFFFF8D; //  R  16 bits
.CONST $_STATUS                              $STATUS; //  R  16 bits
.CONST $REGFILE_PC                          0xFFFFC0; // RW  24 bits
.CONST $_REGFILE_PC                          $REGFILE_PC; // RW  24 bits
.CONST $REGFILE_RMAC2                       0xFFFFC1; // RW  24 bits
.CONST $_REGFILE_RMAC2                       $REGFILE_RMAC2; // RW  24 bits
.CONST $REGFILE_RMAC1                       0xFFFFC2; // RW  24 bits
.CONST $_REGFILE_RMAC1                       $REGFILE_RMAC1; // RW  24 bits
.CONST $REGFILE_RMAC0                       0xFFFFC3; // RW  24 bits
.CONST $_REGFILE_RMAC0                       $REGFILE_RMAC0; // RW  24 bits
.CONST $REGFILE_RMAC24                      0xFFFFC4; // RW  24 bits
.CONST $_REGFILE_RMAC24                      $REGFILE_RMAC24; // RW  24 bits
.CONST $REGFILE_R0                          0xFFFFC5; // RW  24 bits
.CONST $_REGFILE_R0                          $REGFILE_R0; // RW  24 bits
.CONST $REGFILE_R1                          0xFFFFC6; // RW  24 bits
.CONST $_REGFILE_R1                          $REGFILE_R1; // RW  24 bits
.CONST $REGFILE_R2                          0xFFFFC7; // RW  24 bits
.CONST $_REGFILE_R2                          $REGFILE_R2; // RW  24 bits
.CONST $REGFILE_R3                          0xFFFFC8; // RW  24 bits
.CONST $_REGFILE_R3                          $REGFILE_R3; // RW  24 bits
.CONST $REGFILE_R4                          0xFFFFC9; // RW  24 bits
.CONST $_REGFILE_R4                          $REGFILE_R4; // RW  24 bits
.CONST $REGFILE_R5                          0xFFFFCA; // RW  24 bits
.CONST $_REGFILE_R5                          $REGFILE_R5; // RW  24 bits
.CONST $REGFILE_R6                          0xFFFFCB; // RW  24 bits
.CONST $_REGFILE_R6                          $REGFILE_R6; // RW  24 bits
.CONST $REGFILE_R7                          0xFFFFCC; // RW  24 bits
.CONST $_REGFILE_R7                          $REGFILE_R7; // RW  24 bits
.CONST $REGFILE_R8                          0xFFFFCD; // RW  24 bits
.CONST $_REGFILE_R8                          $REGFILE_R8; // RW  24 bits
.CONST $REGFILE_R9                          0xFFFFCE; // RW  24 bits
.CONST $_REGFILE_R9                          $REGFILE_R9; // RW  24 bits
.CONST $REGFILE_R10                         0xFFFFCF; // RW  24 bits
.CONST $_REGFILE_R10                         $REGFILE_R10; // RW  24 bits
.CONST $REGFILE_RLINK                       0xFFFFD0; // RW  24 bits
.CONST $_REGFILE_RLINK                       $REGFILE_RLINK; // RW  24 bits
.CONST $REGFILE_RFLAGS                      0xFFFFD1; // RW  24 bits
.CONST $_REGFILE_RFLAGS                      $REGFILE_RFLAGS; // RW  24 bits
.CONST $REGFILE_RMACB24                     0xFFFFD2; // RW  24 bits
.CONST $_REGFILE_RMACB24                     $REGFILE_RMACB24; // RW  24 bits
.CONST $REGFILE_I0                          0xFFFFD3; // RW  24 bits
.CONST $_REGFILE_I0                          $REGFILE_I0; // RW  24 bits
.CONST $REGFILE_I1                          0xFFFFD4; // RW  24 bits
.CONST $_REGFILE_I1                          $REGFILE_I1; // RW  24 bits
.CONST $REGFILE_I2                          0xFFFFD5; // RW  24 bits
.CONST $_REGFILE_I2                          $REGFILE_I2; // RW  24 bits
.CONST $REGFILE_I3                          0xFFFFD6; // RW  24 bits
.CONST $_REGFILE_I3                          $REGFILE_I3; // RW  24 bits
.CONST $REGFILE_I4                          0xFFFFD7; // RW  24 bits
.CONST $_REGFILE_I4                          $REGFILE_I4; // RW  24 bits
.CONST $REGFILE_I5                          0xFFFFD8; // RW  24 bits
.CONST $_REGFILE_I5                          $REGFILE_I5; // RW  24 bits
.CONST $REGFILE_I6                          0xFFFFD9; // RW  24 bits
.CONST $_REGFILE_I6                          $REGFILE_I6; // RW  24 bits
.CONST $REGFILE_I7                          0xFFFFDA; // RW  24 bits
.CONST $_REGFILE_I7                          $REGFILE_I7; // RW  24 bits
.CONST $REGFILE_M0                          0xFFFFDB; // RW  24 bits
.CONST $_REGFILE_M0                          $REGFILE_M0; // RW  24 bits
.CONST $REGFILE_M1                          0xFFFFDC; // RW  24 bits
.CONST $_REGFILE_M1                          $REGFILE_M1; // RW  24 bits
.CONST $REGFILE_M2                          0xFFFFDD; // RW  24 bits
.CONST $_REGFILE_M2                          $REGFILE_M2; // RW  24 bits
.CONST $REGFILE_M3                          0xFFFFDE; // RW  24 bits
.CONST $_REGFILE_M3                          $REGFILE_M3; // RW  24 bits
.CONST $REGFILE_L0                          0xFFFFDF; // RW  24 bits
.CONST $_REGFILE_L0                          $REGFILE_L0; // RW  24 bits
.CONST $REGFILE_L1                          0xFFFFE0; // RW  24 bits
.CONST $_REGFILE_L1                          $REGFILE_L1; // RW  24 bits
.CONST $REGFILE_L4                          0xFFFFE1; // RW  24 bits
.CONST $_REGFILE_L4                          $REGFILE_L4; // RW  24 bits
.CONST $REGFILE_L5                          0xFFFFE2; // RW  24 bits
.CONST $_REGFILE_L5                          $REGFILE_L5; // RW  24 bits
.CONST $REGFILE_NUM_RUNCLKS                 0xFFFFE3; //  R  24 bits
.CONST $_REGFILE_NUM_RUNCLKS                 $REGFILE_NUM_RUNCLKS; //  R  24 bits
.CONST $REGFILE_NUM_INSTRS                  0xFFFFE4; //  R  24 bits
.CONST $_REGFILE_NUM_INSTRS                  $REGFILE_NUM_INSTRS; //  R  24 bits
.CONST $REGFILE_NUM_CORE_STALLS             0xFFFFE5; //  R  24 bits
.CONST $_REGFILE_NUM_CORE_STALLS             $REGFILE_NUM_CORE_STALLS; //  R  24 bits
.CONST $REGFILE_RMACB2                      0xFFFFE6; // RW  24 bits
.CONST $_REGFILE_RMACB2                      $REGFILE_RMACB2; // RW  24 bits
.CONST $REGFILE_RMACB1                      0xFFFFE7; // RW  24 bits
.CONST $_REGFILE_RMACB1                      $REGFILE_RMACB1; // RW  24 bits
.CONST $REGFILE_RMACB0                      0xFFFFE8; // RW  24 bits
.CONST $_REGFILE_RMACB0                      $REGFILE_RMACB0; // RW  24 bits
.CONST $REGFILE_B0                          0xFFFFE9; // RW  24 bits
.CONST $_REGFILE_B0                          $REGFILE_B0; // RW  24 bits
.CONST $REGFILE_B1                          0xFFFFEA; // RW  24 bits
.CONST $_REGFILE_B1                          $REGFILE_B1; // RW  24 bits
.CONST $REGFILE_B4                          0xFFFFEB; // RW  24 bits
.CONST $_REGFILE_B4                          $REGFILE_B4; // RW  24 bits
.CONST $REGFILE_B5                          0xFFFFEC; // RW  24 bits
.CONST $_REGFILE_B5                          $REGFILE_B5; // RW  24 bits
.CONST $REGFILE_FP                          0xFFFFED; // RW  24 bits
.CONST $_REGFILE_FP                          $REGFILE_FP; // RW  24 bits
.CONST $REGFILE_SP                          0xFFFFEE; // RW  24 bits
.CONST $_REGFILE_SP                          $REGFILE_SP; // RW  24 bits

