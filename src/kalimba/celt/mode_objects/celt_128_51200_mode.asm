// *****************************************************************************
// Copyright (c) 2017 Qualcomm Technologies International, Ltd.        
// All Rights Reserved. 
// Notifications and licenses (if any) are retained for attribution purposes only.     
// Part of ADK_CSR867x.WIN. 4.4
//
// *****************************************************************************

#ifndef CELT_MODE_128_51200_INCLUDED
#define CELT_MODE_128_51200_INCLUDED

#include "../celt_library.h"
// *****************************************************************************
// MODULE:
//    $celt.celt_128_51200_mode 
//
// DESCRIPTION:
//    Mode object for N=240 and fs = 48000Hz
//
// *****************************************************************************
.MODULE $M.celt.mode.celt_128_51200_mode;
.DATASEGMENT DM;
   // -- Definition of mode object
   .VAR $celt.mode.celt_128_51200_mode[$celt.mode.STRUC_SIZE] = 
      48000,             // Fs
      64,                // overlap
      128,                // mdctSize
      14,                // nbEBands
      10,                 // pitchEnd
      0.8,               // ePredCoef
      12,                // nbAllocVectors
      2,                 // nbShortMdcts
      64,                // shortMdctSize
      &eBands,           // eBands_addr
      &allocVectors,     // allocVectors_addr
      &window,           // window_addr
      &prob,             // prob_addr
      &bits,             // bits_addr
      &ebands_dif_sqrt,  // ebands_dif_sqrt_addr
      &trig,             // trig_addr;
      0,
      0,
      0,
      0;            

  
   // -- start frequency bin of eBANDs 
   .VAR eBands[16] =  0, 3, 6, 9, 12, 15, 18, 22, 27, 32, 39, 48, 60, 78, 100, 128;
   
   // -- Allocation vectors
   .VAR allocVectors[168] =       
          2,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          5,     2,     1,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          5,     4,     3,     5,     5,     4,     3,     2,     0,     0,     0,     0,     0,     0, 
          7,     6,     4,     6,     6,     5,     4,     3,     2,     0,     0,     0,     0,     0, 
          8,     8,     6,     7,     7,     5,     4,     3,     2,     3,     2,     0,     0,     0, 
         10,    12,     9,     8,     7,     6,     5,     3,     2,     3,     2,     2,     1,     0, 
         13,    14,    11,     9,     8,     6,     5,     5,     4,     6,     5,     5,     1,     0, 
         17,    14,    12,    11,     8,     6,    10,     7,     7,     8,    10,     9,     5,     0, 
         21,    17,    15,    15,    14,    13,    16,    16,    18,    20,    19,    19,    18,     0, 
         22,    20,    21,    22,    22,    18,    20,    21,    17,    22,    25,    28,    27,    15, 
         23,    25,    31,    29,    28,    26,    29,    30,    27,    33,    31,    35,    42,    30, 
         29,    39,    45,    43,    42,    37,    41,    47,    41,    49,    45,    44,    52,    45;
      
   // -- Window
   .VAR/DM2 window[64] =			
      0.000236547246459, 0.002128068823367, 0.005906525533646, 0.011562654748559, 0.019082345068455, 0.028446374461055, 0.039630092680454, 0.052603043615818, 
      0.067328527569771, 0.083763174712658, 0.101856485009193, 0.121550410985947, 0.142778933048248, 0.165467798709869, 0.189534202218056, 0.214886710047722, 
      0.241425260901451, 0.269041210412979, 0.297617793083191, 0.327030390501022, 0.357147336006165, 0.387830615043640, 0.418936938047409, 0.450318813323975, 
      0.481825917959213, 0.513306438922882, 0.544608652591705, 0.575582623481750, 0.606081604957581, 0.635963976383209, 0.665094733238220, 0.693347036838531, 
      0.720603823661804, 0.746758997440338, 0.771718740463257, 0.795402467250824, 0.817743599414825, 0.838690280914307, 0.858205378055573, 0.876266956329346, 
      0.892867803573608, 0.908015310764313, 0.921730637550354, 0.934048056602478, 0.945013821125031, 0.954685091972351, 0.963128685951233, 0.970419406890869, 
      0.976638972759247, 0.981874108314514, 0.986215174198151, 0.989754617214203, 0.992585241794586, 0.994799077510834, 0.996485710144043, 0.997730851173401, 
      0.998615503311157, 0.999214410781860, 0.999595344066620, 0.999817907810211, 0.999933123588562, 0.999982535839081, 0.999997735023499, 1.000000000000000;
 
   // -- Prob vector     
   .VAR prob[56] =			
          6000,    15200,     5800,    15632, 
          5600,    16072,     5400,    16522, 
          5200,    16978,     5000,    17444, 
          4800,    17918,     4600,    18400, 
          4400,    18892,     4200,    19394, 
          4000,    19906,     3800,    20428, 
          3600,    20962,     3400,    21504, 
          9000,     9530,     8760,     9934, 
          8520,    10346,     8280,    10766, 
          8040,    11194,     7800,    11630, 
          7560,    12074,     7320,    12528, 
          7080,    12992,     6840,    13466, 
          6600,    13948,     6360,    14440, 
          6120,    14944,     5880,    15458;
     
   // -- bits verctors      
   .BLOCK/DM bits;
      .VAR bits_offset[14] =     14, 14,   14,  14,  14,  14,  54,  94,  94, 134, 174, 214, 254, 294;
      .VAR bits_0[40]  =     0,  42,  67,  84,  97, 107, 116, 123, 129, 134, 139, 143, 147, 151, 154, 158, 161, 166, 171, 175, 179, 183, 186, 190, 193, 198, 203, 207, 211, 215, 218, 222, 225, 230, 235, 239, 243, 247, 250, 254;
      .VAR bits_6[40]  =     0,  48,  80, 104, 122, 136, 148, 159, 168, 176, 183, 190, 196, 201, 206, 211, 215, 223, 231, 237, 243, 249, 254, 259, 263, 271, 279, 285, 291, 297, 302, 307, 311, 319, 327, 333, 339, 345, 350, 355;
      .VAR bits_7[40]  =     0,  54,  91, 119, 142, 160, 176, 189, 201, 211, 221, 229, 237, 245, 251, 258, 264, 274, 284, 293, 301, 308, 315, 321, 327, 338, 348, 357, 365, 372, 379, 385, 391, 402, 412, 421, 429, 436, 443, 449;
      .VAR bits_9[40]  =     0,  61, 106, 142, 172, 197, 219, 238, 254, 270, 283, 296, 307, 318, 328, 337, 346, 362, 377, 390, 401, 412, 423, 432, 441, 457, 472, 485, 497, 508, 536, 545, 555, 572, 586, 599, 611, 622, 632, 641;
      .VAR bits_10[40] =     0,  67, 118, 159, 195, 225, 252, 275, 297, 316, 334, 350, 365, 379, 392, 404, 415, 436, 455, 472, 488, 503, 538, 550, 561, 584, 602, 620, 636, 650, 664, 677, 689, 711, 730, 748, 764, 779, 793, 805;
      .VAR bits_11[40] =     0,  74, 131, 179, 221, 258, 290, 320, 347, 371, 394, 415, 435, 453, 470, 486, 502, 552, 579, 603, 623, 643, 662, 680, 695, 724, 750, 774, 796, 817, 836, 853, 870, 900, 926, 950, 972, 992,1012,1029;
      .VAR bits_12[40] =     0,  83, 150, 207, 258, 304, 346, 384, 419, 452, 483, 512, 564, 588, 613, 636, 660, 700, 739, 773, 805, 835, 862, 888, 911, 956, 996,1041,1083,1118,1170,1195,1220,1268,1307,1345,1379,1409,1438,1466;
      .VAR bits_13[40] =     0,  88, 159, 221, 277, 327, 373, 416, 456, 493, 552, 585, 618, 646, 675, 702, 730, 778, 823, 863, 901, 937, 970,1011,1047,1108,1180,1224,1266,1304,1340,1373,1403,1460,1509,1555,1598,1637,1674,1706;
   .ENDBLOCK;

   // -- square root of band widths (just for accuracy)
   .VAR ebands_dif_sqrt[14+2] = 
      -2,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.250000000000000,
      0.279508497187474,
      0.279508497187474,
      0.330718913883074,
      0.375000000000000,
      0.433012701892219,
      0.530330085889911,
      0.586301969977929,
      0.661437827766148;
      
   // -- trig data (used in MDCT/IMDCT pre-post rotation)
   .VAR/DM2 trig[12*2] = 
        0.793700525984100,//long block data
        0.707106781186547,
        0.999698818696204,
        0.024541228522912,
        0.999995293809576,
        0.003067956762966,
        0.922701128333879,
        0.385516053843919,
        0.704934080375905,
        0.709272826438866,
        0.379847208924051,
        0.925049240782678,
        
        0.757858283255199,//short block data
        0.757858283255199,
        0.998795456205172,
        0.049067674327418,
        0.999981175282601,
        0.006135884649154,
        0.921514039342042,
        0.388345046698826,
        0.702754744457225,
        0.711432195745216,
        0.377007410216418,
        0.926210242138311;
        
   // -- decoder scratch memory allocation (DM1)
   .VAR $celt.dec.celt_128_51200_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =
      0,    //BITS1
      19,   //BITS2
      512,  //ALG_UNQUANT_ST
      640,  //UVECTOR
      0,    //NORM_FREQ
      512,  //BAND_E
      512,  //IMDCT_OUTPUT
      768,  //SHORT_HIST
      896,  //TEMP_FFT
      0,    //PLC_EXC
      0,    //PLC_PITCH_BUF
      512,  //PLC_XLP4 
      1024, //PLC_AC
      0;    //TRANSIENT_PROC
      
   // -- decoder scratch memory allocation (DM2)
   .VAR $celt.dec.celt_128_51200_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      0,    //PULSES
      19,   //FINE_QUANT
      38,   //FINE_PRIORITY
      640,  //NORM
      0,    //FREQ
      256,  //FREQ2
      512,  //SHORT_FREQ
      0,    //PLC_EXC_COPY
      0,    //PLC_E
      0,    //PLC_YLP4
      512,  //PLC_MEM_LPC
      576,  //PLC_XCORR
      896;  //TEMP_VECT
      
   // -- encoder scratch memory allocation (DM1)
   .VAR $celt.enc.celt_128_51200_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =               
      768,  //BITS1
      787,  //BITS2
      512,  //ALG_QUANT_ST
      640,  //UVECTOR_FIELD
      0,    //NORM_FREQ
      806,  //BANDE
      384,  //MDCT_INPUT_IMAG
      0,    //PREEMPH_LEFT_AUDIO
      896,  //LOG_BANDE_
      960,  //BAND_ERROR
      384,  //TRANSIENT
      0 ...;
      
   // -- encoder scratch memory allocation (DM2)
   .VAR $celt.enc.celt_128_51200_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      768,  //PULSES
      787,  //FINE_QUANT
      806,  //FINE_PRIORITY
      256,  //NORM
      256,  //FREQ
      512,  //FREQ2
      0,    //SHORT_FREQ
      768,  //MDCT_INPUT_REAL
      1024, //PREEMPH_RIGHT_AUDIO
      512,  //ABS_NORM
      0 ...;
.ENDMODULE;
#endif
