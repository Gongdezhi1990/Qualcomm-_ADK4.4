// *****************************************************************************
// Copyright (c) 2017 Qualcomm Technologies International, Ltd.        
// All Rights Reserved. 
// Notifications and licenses (if any) are retained for attribution purposes only.     
// Part of ADK_CSR867x.WIN. 4.4
//
// *****************************************************************************

#ifndef CELT_MODE_512_48000_INCLUDED
#define CELT_MODE_512_48000_INCLUDED

#include "../celt_library.h"
// *****************************************************************************
// MODULE:
//    $celt.celt_512_48000_mode 
//
// DESCRIPTION:
//    Mode object for N=256 and fs = 48000Hz
//
// *****************************************************************************
.MODULE $M.celt.mode.celt_512_48000_mode;
.DATASEGMENT DM;
   // -- Definition of mode object
   .VAR $celt.mode.celt_512_48000_mode[$celt.mode.STRUC_SIZE] = 
      48000,             // Fs
      128,               // overlap
      512,               // mdctSize
      24,                // nbEBands
      42,                // pitchEnd
      0.8,               // ePredCoef
      12,                // nbAllocVectors
      4,                 // nbShortMdcts
      128,               // shortMdctSize
      &eBands,           // eBands_addr
      &allocVectors,     // allocVectors_addr
      &window,           // window_addr
      &prob,             // prob_addr
      &bits,             // bits_addr
      &ebands_dif_sqrt,  // ebands_dif_sqrt_addr
      &trig,             // trig_addr;
      0,
      0,
      0,
      0;            

   // -- start frequency bin of eBANDs 
   .VAR eBands[26] =  0,  3,  6,  9,  12,  15,  18,  21,  24,  27,  31,  36,  42,  49,  57,  67,  79,  94, 113, 136, 164, 202, 255, 330, 426, 512;
   
   // -- Allocation vectors
   .VAR allocVectors[288] = 			
      8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
      6,   4,   3,   5,   3,   2,   2,   2,   1,   2,   2,   2,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
      6,   6,   4,   5,   4,   4,   4,   3,   3,   4,   4,   8,   10,  14,  15,  14,  10,  8,   0,   0,   0,   0,   0,   0, 
      6,   6,   6,   7,   7,   6,   5,   5,   4,   5,   6,   10,  12,  16,  17,  16,  12,  10,  8,   0,   0,   0,   0,   0, 
      8,   6,   6,   8,   9,   8,   7,   7,   6,   7,   8,   12,  14,  18,  19,  18,  14,  12,  10,  10,  10,  0,   0,   0, 
      8,   8,   11,  11,  12,  12,  11,  10,  9,   11,  14,  14,  19,  20,  21,  20,  18,  12,  10,  10,  10,  10,  2,   0, 
      10,  8,   12,  16,  15,  14,  13,  12,  10,  14,  18,  18,  18,  22,  21,  20,  18,  18,  16,  22,  20,  20,  2,   0, 
      14,  14,  17,  17,  15,  14,  14,  13,  12,  16,  20,  20,  25,  24,  23,  23,  34,  24,  30,  30,  40,  36,  20,  2, 
      18,  20,  20,  20,  17,  16,  15,  16,  15,  20,  24,  28,  35,  36,  44,  45,  54,  58,  77,  75,  75,  80,  70,  2, 
      20,  20,  22,  20,  20,  19,  18,  18,  19,  25,  35,  40,  49,  56,  67,  65,  70,  75,  75,  85,  99,  118, 109, 62, 
      23,  23,  22,  21,  21,  21,  24,  26,  30,  39,  49,  57,  62,  69,  88,  94,  100, 109, 118, 125, 123, 144, 165, 124, 
      25,  25,  28,  31,  30,  32,  36,  41,  45,  58,  69,  81,  92,  109, 130, 135, 141, 168, 177, 186, 183, 184, 205, 184;
      
   // -- Window
   .VAR/DM2 window[128] =			
      0.000059139038058, 0.000532197882421, 0.001478030113503, 0.002896063495427, 0.004785436205566, 0.007144992705435, 0.009973277337849, 0.013268529437482, 
      0.017028674483299, 0.021251311525702, 0.025933710858226, 0.031072795391083, 0.036665130406618, 0.042706914246082, 0.049193959683180, 0.056121692061424, 
      0.063485108315945, 0.071278803050518, 0.079496912658215, 0.088133141398430, 0.097180701792240, 0.106632351875305, 0.116480343043804, 0.126716434955597, 
      0.137331858277321, 0.148317337036133, 0.159663051366806, 0.171358674764633, 0.183393299579620, 0.195755511522293, 0.208433344960213, 0.221414253115654, 
      0.234685227274895, 0.248232662677765, 0.262042462825775, 0.276100039482117, 0.290390282869339, 0.304897606372833, 0.319605946540833, 0.334498882293701, 
      0.349559515714645, 0.364770591259003, 0.380114465951920, 0.395573228597641, 0.411128699779511, 0.426762402057648, 0.442455708980560, 0.458189755678177, 
      0.473945677280426, 0.489704459905624, 0.505447089672089, 0.521154582500458, 0.536808073520660, 0.552388727664948, 0.567878007888794, 0.583257555961609, 
      0.598509252071381, 0.613615453243256, 0.628558754920959, 0.643322288990021, 0.657889604568481, 0.672244906425476, 0.686372935771942, 0.700258910655975, 
      0.713888943195343, 0.727249741554260, 0.740328788757324, 0.753114342689514, 0.765595495700836, 0.777762115001678, 0.789605021476746, 0.801115870475769, 
      0.812287271022797, 0.823112726211548, 0.833586633205414, 0.843704402446747, 0.853462278842926, 0.862857580184937, 0.871888458728790, 0.880554080009460, 
      0.888854384422302, 0.896790385246277, 0.904363751411438, 0.911577284336090, 0.918434441089630, 0.924939453601837, 0.931097447872162, 0.936914145946503, 
      0.942396163940430, 0.947550535202026, 0.952385127544403, 0.956908285617828, 0.961128890514374, 0.965056359767914, 0.968700468540192, 0.972071409225464, 
      0.975179851055145, 0.978036582469940, 0.980652749538422, 0.983039617538452, 0.985208690166473, 0.987171590328217, 0.988939821720123, 0.990525066852570, 
      0.991939008235931, 0.993192970752716, 0.994298517704010, 0.995266735553741, 0.996108710765839, 0.996835112571716, 0.997456431388855, 0.997982800006866, 
      0.998423933982849, 0.998789250850677, 0.999087631702423, 0.999327600002289, 0.999517142772675, 0.999663650989532, 0.999774158000946, 0.999854981899261, 
      0.999911963939667, 0.999950289726257, 0.999974489212036, 0.999988555908203, 0.999995827674866, 0.999998927116394, 0.999999880790710, 1.000000000000000;
      
   // -- Prob vector     
   .VAR prob[96] =			
          6000,    15200,     5800,    15632, 
          5600,    16072,     5400,    16522, 
          5200,    16978,     5000,    17444, 
          4800,    17918,     4600,    18400, 
          4400,    18892,     4200,    19394, 
          4000,    19906,     3800,    20428, 
          3600,    20962,     3400,    21504, 
          3200,    22058,     3000,    22624, 
          2800,    23202,     2600,    23792, 
          2400,    24394,     2200,    25008, 
          2000,    25638,     1800,    26280, 
          1600,    26936,     1400,    27608, 
          9000,     9530,     8760,     9934, 
          8520,    10346,     8280,    10766, 
          8040,    11194,     7800,    11630, 
          7560,    12074,     7320,    12528, 
          7080,    12992,     6840,    13466, 
          6600,    13948,     6360,    14440, 
          6120,    14944,     5880,    15458, 
          5640,    15984,     5400,    16522, 
          5160,    17070,     4920,    17632, 
          4680,    18206,     4440,    18794, 
          4200,    19394,     3960,    20010, 
          3720,    20640,     3480,    21286;
      
   // -- bits verctors      
   .BLOCK/DM bits;
      .VAR bits_offset[24] =  24,  24,  24,  24,  24,  24,  24,  24,  24,  64, 104, 144, 184, 224, 264, 304, 344, 384, 424, 464, 504, 544, 584, 624;
      .VAR bits_0[40]  =  0,  42,  67,  84,  97, 107, 116, 123, 129, 134, 139, 143, 147, 151, 154, 158, 161, 166, 171, 175, 179, 183, 186, 190, 193, 198, 203, 207, 211, 215, 218, 222, 225, 230, 235, 239, 243, 247, 250, 254;
      .VAR bits_9[40]  =  0,  48,  80, 104, 122, 136, 148, 159, 168, 176, 183, 190, 196, 201, 206, 211, 215, 223, 231, 237, 243, 249, 254, 259, 263, 271, 279, 285, 291, 297, 302, 307, 311, 319, 327, 333, 339, 345, 350, 355;
      .VAR bits_10[40] =  0,  54,  91, 119, 142, 160, 176, 189, 201, 211, 221, 229, 237, 245, 251, 258, 264, 274, 284, 293, 301, 308, 315, 321, 327, 338, 348, 357, 365, 372, 379, 385, 391, 402, 412, 421, 429, 436, 443, 449;
      .VAR bits_11[40] =  0,  58,  99, 132, 158, 180, 199, 215, 229, 242, 254, 265, 274, 283, 292, 300, 307, 320, 332, 343, 353, 362, 371, 379, 386, 400, 412, 423, 433, 442, 451, 459, 466, 480, 492, 503, 528, 538, 547, 555;
      .VAR bits_12[40] =  0,  61, 106, 142, 172, 197, 219, 238, 254, 270, 283, 296, 307, 318, 328, 337, 346, 362, 377, 390, 401, 412, 423, 432, 441, 457, 472, 485, 497, 508, 536, 545, 555, 572, 586, 599, 611, 622, 632, 641;
      .VAR bits_13[40] =  0,  64, 112, 151, 184, 212, 236, 258, 277, 294, 310, 324, 337, 350, 361, 372, 382, 401, 417, 432, 446, 459, 471, 482, 492, 511, 548, 562, 576, 590, 602, 613, 623, 642, 660, 675, 689, 702, 714, 725;
      .VAR bits_14[40] =  0,  70, 123, 167, 204, 237, 266, 292, 315, 336, 356, 373, 390, 405, 420, 433, 446, 470, 491, 510, 549, 567, 581, 596, 609, 632, 654, 674, 692, 709, 724, 737, 751, 777, 798, 818, 836, 852, 868, 882;
      .VAR bits_15[40] =  0,  74, 131, 179, 221, 258, 290, 320, 347, 371, 394, 415, 435, 453, 470, 486, 502, 552, 579, 603, 623, 643, 662, 680, 695, 724, 750, 774, 796, 817, 836, 853, 870, 900, 926, 950, 972, 992,1012,1029;
      .VAR bits_16[40] =  0,  79, 142, 195, 241, 283, 321, 355, 387, 416, 443, 468, 492, 538, 559, 579, 598, 632, 665, 693, 721, 745, 768, 790, 810, 847, 881, 911, 939, 965, 998,1025,1049,1089,1122,1152,1192,1222,1249,1270;
      .VAR bits_17[40] =  0,  84, 152, 211, 263, 310, 353, 393, 429, 463, 495, 549, 578, 605, 630, 654, 678, 721, 761, 797, 830, 862, 890, 918, 943,1003,1052,1092,1129,1179,1213,1242,1268,1316,1360,1399,1436,1468,1498,1526;
      .VAR bits_18[40] =  0,  89, 161, 224, 281, 332, 379, 423, 464, 502, 562, 596, 629, 660, 689, 717, 745, 794, 841, 884, 923, 970,1011,1048,1080,1158,1213,1259,1301,1342,1380,1414,1447,1504,1557,1604,1649,1690,1728,1763;
      .VAR bits_19[40] =  0,  93, 170, 238, 299, 355, 406, 455, 500, 564, 606, 644, 682, 716, 751, 782, 814, 872, 927, 986,1042,1090,1156,1193,1229,1300,1360,1418,1468,1518,1562,1603,1643,1716,1782,1840,1892,1942,1990,2031;
      .VAR bits_20[40] =  0, 100, 184, 259, 327, 390, 449, 504, 577, 627, 676, 721, 766, 807, 849, 886, 925,1010,1083,1171,1231,1287,1338,1388,1437,1526,1608,1682,1750,1816,1874,1931,1990,2106,2206,2290,2378,2467,2537,2595;
      .VAR bits_21[40] =  0, 108, 200, 282, 358, 428, 495, 577, 639, 697, 753, 805, 857, 910, 966,1017,1066,1174,1259,1335,1409,1478,1544,1608,1670,1784,1901,2006,2104,2203,2303,2389,2486,2618,2739,2848,2950,3044,3128,3209;
      .VAR bits_22[40] =  0, 116, 216, 306, 390, 468, 561, 632, 703, 769, 833, 894, 962,1025,1085,1140,1215,1317,1417,1509,1600,1685,1767,1849,1931,2095,2258,2393,2538,2650,2753,2854,2953,3133,3296,3445,3582,3713,3831,3948;
      .VAR bits_23[40] =  0, 122, 227, 323, 413, 497, 595, 672, 749, 820, 891, 967,1037,1102,1183,1245,1308,1420,1531,1633,1735,1830,1931,2026,2127,2322,2516,2658,2800,2932,3062,3181,3299,3508,3710,3892,4069,4245,4422,4596;
   .ENDBLOCK;

   // -- square root of band widths (just for accuracy)
   .VAR ebands_dif_sqrt[24+2] = 
      -3, 
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.108253175473055,
      0.125000000000000,
      0.139754248593737,
      0.153093108923949,
      0.165359456941537,
      0.176776695296637,
      0.197642353760524,
      0.216506350946110,
      0.242061459137964,
      0.272431183971292,
      0.299739470207045,
      0.330718913883074,
      0.385275875185561,
      0.455006868080032,
      0.541265877365274,
      0.612372435695794,
      0.579601155968482;

   // -- trig data (used in MDCT/IMDCT pre-post rotation)
   .VAR/DM2 trig[12*2] = 
        0.840896415253715,//long block data
        0.648419777325505,
        0.999981175282601,
        0.006135884649154,
        0.999999705862882,
        0.000766990318743,
        0.923585746276257,
        0.383391926460809,
        0.706564229144710,
        0.707648917255684,
        0.381974713146567,
        0.924172775251791, 
               
        0.793700525984100,//short block data
        0.707106781186547, 
        0.999698818696204, 
        0.024541228522912, 
        0.999995293809576, 
        0.003067956762966, 
        0.922701128333879, 
        0.385516053843919, 
        0.704934080375905, 
        0.709272826438866, 
        0.379847208924051, 
        0.925049240782678;
        
   // -- decoder scratch memory allocation (DM1)
   .VAR $celt.dec.celt_512_48000_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =
      0,    //BITS1
      25,   //BITS2
      1024,  //ALG_UNQUANT_ST
      1152,  //UVECTOR
      0,    //NORM_FREQ
      1024,  //BAND_E
      0,  //IMDCT_OUTPUT
      640,  //SHORT_HIST
      768,  //TEMP_FFT
      0,    //PLC_EXC
      0,    //PLC_PITCH_BUF
      512,  //PLC_XLP4 
      1024, //PLC_AC
      0;    //TRANSIENT_PROC
      
   // -- decoder scratch memory allocation (DM2)
   .VAR $celt.dec.celt_512_48000_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      0,    //PULSES
      25,   //FINE_QUANT
      50,   //FINE_PRIORITY
      640,  //NORM
      0,    //FREQ
      512,  //FREQ2
      1024,  //SHORT_FREQ
      0,    //PLC_EXC_COPY
      0,    //PLC_E
      0,    //PLC_YLP4
      512,  //PLC_MEM_LPC
      576,  //PLC_XCORR
      896;  //TEMP_VECT
      
   // -- encoder scratch memory allocation (DM1)
   .VAR $celt.enc.celt_512_48000_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =               
      1280,  //BITS1
      1305,  //BITS2
      1024,  //ALG_QUANT_ST
      1152,  //UVECTOR_FIELD
      0,    //NORM_FREQ
      1024,  //BANDE
      0,    //MDCT_INPUT_IMAG
      640,    //PREEMPH_LEFT_AUDIO
      1152,  //LOG_BANDE_
      1216,  //BAND_ERROR
      0 ...;  //TRANSIENT
      
   // -- encoder scratch memory allocation (DM2)
   .VAR $celt.enc.celt_512_48000_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      1024, //PULSES
      1050,  //FINE_QUANT
      1088,  //FINE_PRIORITY
      0,     //NORM
      0,     //FREQ
      512,   //FREQ2
      1024,  //SHORT_FREQ
      1536,  //MDCT_INPUT_REAL
      1792,  //PREEMPH_RIGHT_AUDIO
      512,   //ABS_NORM
      0 ...;
.ENDMODULE;
#endif
