// *****************************************************************************
// Copyright (c) 2017 Qualcomm Technologies International, Ltd.        
// All Rights Reserved. 
// Notifications and licenses (if any) are retained for attribution purposes only.     
// Part of ADK_CSR867x.WIN. 4.4
//
// *****************************************************************************

#ifndef CELT_MODE_256_51200_INCLUDED
#define CELT_MODE_256_51200_INCLUDED

#include "../celt_library.h"
// *****************************************************************************
// MODULE:
//    $celt.celt_256_51200_mode 
//
// DESCRIPTION:
//    Mode object for N=256 and fs = 51200Hz
//
// *****************************************************************************               
.MODULE $M.celt.mode.celt_256_51200_mode;
.DATASEGMENT DM;
   // -- Definition of mode object
   .VAR $celt.mode.celt_256_51200_mode[$celt.mode.STRUC_SIZE] = 
      51200,          // Fs
      128,            // overlap
      256,            // mdctSize
      19,             // nbEBands
      20,             // pitchEnd
      0.8,            // ePredCoef
      12,             // nbAllocVectors
      2,              // nbShortMdcts
      128,            // shortMdctSize
      &eBands,        // eBands_addr
      &allocVectors,  // allocVectors_addr
      &window,        // window_addr
      &prob,          // prob_addr
      &bits,          // bits_addr
      &ebands_dif_sqrt,  // ebands_dif_sqrt_addr
      &trig,           // trig_addr;
      0, 
      0, 
      0, 
      0;            
 
   // -- start frequency bin of eBANDs 
   .VAR eBands[19+2] = 0,  3,  6,  9,  12,  15,  18,  21,  24,  27,  32,  37,  44,  53,  64,  77,  95,  120,  155,  200,  256;

   // -- Allocation vectors
   .VAR allocVectors[228] = 						
      4,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    
      5,     5,     2,     2,     1,     1,     1,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,    
      6,     5,     4,     4,     3,     3,     4,     5,     6,     8,     6,     5,     4,     0,     0,     0,     0,     0,     0,  
      6,     7,     6,     5,     4,     4,     5,     6,     6,     9,     7,     6,     5,     4,     0,     0,     0,     0,     0,    
      7,     8,     8,     7,     6,     5,     6,     7,     7,    10,     8,     7,     6,     5,     5,     5,     0,     0,     0,    
      9,     12,    12,    11,    9,     8,     8,     8,     8,    11,     9,     9,     6,     5,     5,     5,     5,     1,     0,    
      10,    15,    15,    12,    11,    11,    9,     9,     9,    11,     9,     9,     9,     8,     11,    10,    10,    1,     0,    
      15,    18,    15,    14,    13,    12,    11,    11,    9,    12,     10,    17,    12,    15,    15,    20,    18,    10,    1,    
      20,    21,    17,    16,    16,    15,    15,    15,    14,    23,    20,    27,    29,    39,    37,    38,    40,    35,    1,    
      21,    22,    21,    20,    20,    22,    22,    22,    22,    35,    29,    35,    38,    38,    42,    50,    59,    54,    31,    
      24,    23,    23,    28,    31,    31,    29,    28,    28,    46,    42,    50,    55,    60,    62,    62,    72,    82,    62,    
      27,    32,    34,    43,    46,    44,    43,    43,    43,    68,    60,    70,    85,    90,    92,    92,    92,    102,   92;
   // -- Window
   .VAR window[128] = 			
      0.000059139038058,  0.000532197882421,  0.001478030113503,  0.002896063495427,  0.004785436205566,  0.007144992705435,  0.009973277337849,  0.013268529437482,  
      0.017028674483299,  0.021251311525702,  0.025933710858226,  0.031072795391083,  0.036665130406618,  0.042706914246082,  0.049193959683180,  0.056121692061424,  
      0.063485108315945,  0.071278803050518,  0.079496912658215,  0.088133141398430,  0.097180701792240,  0.106632351875305,  0.116480343043804,  0.126716434955597,  
      0.137331858277321,  0.148317337036133,  0.159663051366806,  0.171358674764633,  0.183393299579620,  0.195755511522293,  0.208433344960213,  0.221414253115654,  
      0.234685227274895,  0.248232662677765,  0.262042462825775,  0.276100039482117,  0.290390282869339,  0.304897606372833,  0.319605946540833,  0.334498882293701,  
      0.349559515714645,  0.364770591259003,  0.380114465951920,  0.395573228597641,  0.411128699779511,  0.426762402057648,  0.442455708980560,  0.458189755678177,  
      0.473945677280426,  0.489704459905624,  0.505447089672089,  0.521154582500458,  0.536808073520660,  0.552388727664948,  0.567878007888794,  0.583257555961609,  
      0.598509252071381,  0.613615453243256,  0.628558754920959,  0.643322288990021,  0.657889604568481,  0.672244906425476,  0.686372935771942,  0.700258910655975,  
      0.713888943195343,  0.727249741554260,  0.740328788757324,  0.753114342689514,  0.765595495700836,  0.777762115001678,  0.789605021476746,  0.801115870475769,  
      0.812287271022797,  0.823112726211548,  0.833586633205414,  0.843704402446747,  0.853462278842926,  0.862857580184937,  0.871888458728790,  0.880554080009460,  
      0.888854384422302,  0.896790385246277,  0.904363751411438,  0.911577284336090,  0.918434441089630,  0.924939453601837,  0.931097447872162,  0.936914145946503,  
      0.942396163940430,  0.947550535202026,  0.952385127544403,  0.956908285617828,  0.961128890514374,  0.965056359767914,  0.968700468540192,  0.972071409225464,  
      0.975179851055145,  0.978036582469940,  0.980652749538422,  0.983039617538452,  0.985208690166473,  0.987171590328217,  0.988939821720123,  0.990525066852570,  
      0.991939008235931,  0.993192970752716,  0.994298517704010,  0.995266735553741,  0.996108710765839,  0.996835112571716,  0.997456431388855,  0.997982800006866,  
      0.998423933982849,  0.998789250850677,  0.999087631702423,  0.999327600002289,  0.999517142772675,  0.999663650989532,  0.999774158000946,  0.999854981899261,  
      0.999911963939667,  0.999950289726257,  0.999974489212036,  0.999988555908203,  0.999995827674866,  0.999998927116394,  0.999999880790710,  1.000000000000000;

   // -- Prob vector     
   .VAR prob[76] = 			
      6000,   15200,   5800,   15632,  
      5600,   16072,   5400,   16522,  
      5200,   16978,   5000,   17444,  
      4800,   17918,   4600,   18400,  
      4400,   18892,   4200,   19394,  
      4000,   19906,   3800,   20428,  
      3600,   20962,   3400,   21504,  
      3200,   22058,   3000,   22624,  
      2800,   23202,   2600,   23792,  
      2400,   24394,   9000,    9530,  
      8760,   9934,    8520,   10346,  
      8280,   10766,   8040,   11194,  
      7800,   11630,   7560,   12074,  
      7320,   12528,   7080,   12992,  
      6840,   13466,   6600,   13948,  
      6360,   14440,   6120,   14944,  
      5880,   15458,   5640,   15984,  
      5400,   16522,   5160,   17070,  
      4920,   17632,   4680,   18206;

   // -- bits verctors      
   .BLOCK bits;
   .VAR bits_vector_offset[19] =   19,  19,  19,        19,        19,        19,        19,        19,        19,        59,        99,       139,       179,       219,       259,       299,       339,       379,       419;
   .VAR bits_vector_0[40] =   0,     42,     67,     84,     97,    107,    116,    123,    129,    134,    139,    143,    147,    151,    154,    158,    161,    166,    171,    175,    179,    183,    186,    190,    193,    198,    203,    207,    211,    215,    218,    222,    225,    230,    235,    239,    243,    247,    250,    254;
   .VAR bits_vector_9[40] =   0,     54,     91,    119,    142,    160,    176,    189,    201,    211,    221,    229,    237,    245,    251,    258,    264,    274,    284,    293,    301,    308,    315,    321,    327,    338,    348,    357,    365,    372,    379,    385,    391,    402,    412,    421,    429,    436,    443,    449;
   .VAR bits_vector_10[40] =  0,     54,     91,    119,    142,    160,    176,    189,    201,    211,    221,    229,    237,    245,    251,    258,    264,    274,    284,    293,    301,    308,    315,    321,    327,    338,    348,    357,    365,    372,    379,    385,    391,    402,    412,    421,    429,    436,    443,    449;
   .VAR bits_vector_11[40] =  0,     61,    106,    142,    172,    197,    219,    238,    254,    270,    283,    296,    307,    318,    328,    337,    346,    362,    377,    390,    401,    412,    423,    432,    441,    457,    472,    485,    497,    508,    536,    545,    555,    572,    586,    599,    611,    622,    632,    641;
   .VAR bits_vector_12[40] =  0,     67,    118,    159,    195,    225,    252,    275,    297,    316,    334,    350,    365,    379,    392,    404,    415,    436,    455,    472,    488,    503,    538,    550,    561,    584,    602,    620,    636,    650,    664,    677,    689,    711,    730,    748,    764,    779,    793,    805;
   .VAR bits_vector_13[40] =  0,     72,    127,    173,    213,    248,    279,    306,    332,    355,    376,    395,    413,    430,    446,    461,    475,    501,    547,    568,    588,    606,    623,    639,    653,    680,    703,    725,    746,    764,    782,    797,    812,    839,    863,    885,    905,    924,    941,    956;
   .VAR bits_vector_14[40] =  0,     76,    135,    185,    228,    267,    301,    332,    361,    387,    411,    434,    455,    475,    493,    510,    551,    580,    609,    634,    658,    679,    698,    718,    735,    768,    796,    822,    846,    868,    889,    907,    925,    958,    995,   1028,   1055,   1077,   1098,   1117;
   .VAR bits_vector_15[40] =  0,     83,    150,    207,    258,    304,    346,    384,    419,    452,    483,    512,    564,    588,    613,    636,    660,    700,    739,    773,    805,    835,    862,    888,    911,    956,    996,   1041,   1083,   1118,   1170,   1195,   1220,   1268,   1307,   1345,   1379,   1409,   1438,   1466;
   .VAR bits_vector_16[40] =  0,     91,    165,    230,    288,    342,    391,    436,    479,    542,    581,    617,    651,    683,    715,    745,    774,    826,    876,    922,    973,   1022,   1064,   1101,   1134,   1217,   1274,   1325,   1372,   1414,   1455,   1493,   1530,   1593,   1649,   1701,   1749,   1794,   1836,   1872;
   .VAR bits_vector_17[40] =  0,     99,    181,    253,    319,    380,    437,    491,    562,    611,    657,    701,    744,    783,    822,    858,    894,    970,   1044,   1107,   1187,   1238,   1287,   1336,   1381,   1464,   1540,   1609,   1673,   1733,   1788,   1839,   1888,   1978,   2066,   2155,   2237,   2323,   2383,   2434;
   .VAR bits_vector_18[40] =  0,    104,    192,    271,    343,    409,    472,    550,    609,    663,    715,    764,    812,    857,    902,    953,   1001,   1086,   1185,   1254,   1322,   1384,   1442,   1500,   1556,   1657,   1750,   1836,   1924,   2004,   2079,   2154,   2225,   2367,   2497,   2588,   2674,   2755,   2830,   2898;
   .ENDBLOCK;  
   

   // -- square root of band widths (just for accuracy)
   .VAR ebands_dif_sqrt[19+2] =
      -2, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.216506350946110, 
      0.279508497187474, 
      0.279508497187474, 
      0.330718913883074, 
      0.375000000000000, 
      0.414578098794425, 
      0.450693909432999, 
      0.530330085889911, 
      0.625000000000000, 
      0.739509972887452, 
      0.838525491562421, 
      0.935414346693485;

   // -- trig data (used in MDCT/IMDCT pre-post rotation)
   .VAR/DM2   trig[12*2] = 
        0.820335356007638, //long block data
        0.672950096316178, 
        0.999924701839145,      
        0.012271538285720,  
        0.999998823451702,  
        0.001533980186285,  
        0.923291416719528,  
        0.384100195016935,  
        0.706021261449340,  
        0.708190637033195,  
        0.381265769222162,  
        0.924465474325263,  
               
        0.793700525984100, //short block data
        0.707106781186547,  
        0.999698818696204,  
        0.024541228522912,  
        0.999995293809576,  
        0.003067956762966,  
        0.922701128333879,  
        0.385516053843919,  
        0.704934080375905,  
        0.709272826438866,  
        0.379847208924051,  
        0.925049240782678;

   // -- decoder scratch memory allocation (DM1)
   .VAR $celt.dec.celt_256_51200_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =
      0,  //BITS1
      19,    //BITS2
      512,   //ALG_UNQUANT_ST
      640,   //UVECTOR
      0,  //NORM_FREQ
      512,   //BAND_E
      512,   //IMDCT_OUTPUT
      768,   //SHORT_HIST
      896,   //TEMP_FFT
      0,  //PLC_EXC
      0,  //PLC_PITCH_BUF
      512,   //PLC_XLP4 
      1024,  //PLC_AC
      0;    //TRANSIENT_PROC
  
   // -- decoder scratch memory allocation (DM2)
   .VAR $celt.dec.celt_256_51200_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      0,    //PULSES
      19,   //FINE_QUANT
      38,   //FINE_PRIORITY
      640,  //NORM
      0,    //FREQ
      256,  //FREQ2
      512,  //SHORT_FREQ
      0,    //PLC_EXC_COPY
      0,    //PLC_E
      0,    //PLC_YLP4
      512,  //PLC_MEM_LPC
      576,  //PLC_XCORR
      896;  //TEMP_VECT
      
   // -- encoder scratch memory allocation (DM1)
   .VAR $celt.enc.celt_256_51200_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =
      768,   //BITS1
      787,   //BITS2
      512,   //ALG_QUANT_ST
      640,   //UVECTOR_FIELD
      0,     //NORM_FREQ
      806,   //BANDE
      384,   //MDCT_INPUT_IMAG
      0,     //PREEMPH_LEFT_AUDIO
      896,   //LOG_BANDE_
      960,   //BAND_ERROR
      384,   //TRANSIENT
      0 ...;
  
   // -- encoder scratch memory allocation (DM2)
   .VAR $celt.enc.celt_256_51200_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
       768,  //PULSES
       787,  //FINE_QUANT
       806,  //FINE_PRIORITY
       256,  //NORM
       256,  //FREQ
       512,  //FREQ2
       0,    //SHORT_FREQ
       768,  //MDCT_INPUT_REAL
       1024, //PREEMPH_RIGHT_AUDIO
       512,  //ABS_NORM
       0 ...;
.ENDMODULE;
#endif