// *****************************************************************************
// Copyright (c) 2017 Qualcomm Technologies International, Ltd.        
// All Rights Reserved. 
// Notifications and licenses (if any) are retained for attribution purposes only.     
// Part of ADK_CSR867x.WIN. 4.4
//
// *****************************************************************************

#ifndef CELT_MODE_128_48000_INCLUDED
#define CELT_MODE_128_48000_INCLUDED
#include "../celt_library.h"

// *****************************************************************************
// MODULE:
//    $celt.celt_128_48000_mode 
//
// DESCRIPTION:
//    Mode object for N=240 and fs = 48000Hz
//
// *****************************************************************************
.MODULE $M.celt.mode.celt_128_48000_mode;
.DATASEGMENT DM;
   // -- Definition of mode object
   .VAR $celt.mode.celt_128_48000_mode[$celt.mode.STRUC_SIZE] = 
      48000,             // Fs
      64,                // overlap
      128,                // mdctSize
      15,                // nbEBands
      10,                 // pitchEnd
      0.8,               // ePredCoef
      12,                // nbAllocVectors
      2,                 // nbShortMdcts
      64,                // shortMdctSize
      &eBands,           // eBands_addr
      &allocVectors,     // allocVectors_addr
      &window,           // window_addr
      &prob,             // prob_addr
      &bits,             // bits_addr
      &ebands_dif_sqrt,  // ebands_dif_sqrt_addr
      &trig,             // trig_addr;
      0,
      0,
      0,
      0;            

  
   // -- start frequency bin of eBANDs 
   .VAR eBands[17] =  0,  3,  6,  9,  12,  15,  18,  21,  24,  28,  34,  41,  51,  64,  83, 106, 128;
   
   // -- Allocation vectors
   .VAR allocVectors[180] =       
          2,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          4,     2,     1,     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          5,     4,     3,     4,     5,     4,     3,     2,     2,     0,     0,     0,     0,     0,     0, 
          6,     6,     4,     5,     6,     5,     3,     2,     2,     2,     0,     0,     0,     0,     0, 
          7,     8,     5,     6,     6,     5,     4,     3,     3,     3,     3,     2,     0,     0,     0, 
         10,    11,     8,     8,     7,     6,     4,     3,     3,     3,     3,     3,     2,     0,     0, 
         12,    13,    11,     9,     8,     6,     4,     3,     4,     4,     6,     5,     5,     0,     0, 
         16,    14,    12,    10,     9,     6,     6,     6,     5,     8,     8,    10,     9,     5,     0, 
         19,    16,    15,    15,    14,    12,    11,    11,    12,    20,    19,    20,    19,    17,     0, 
         20,    19,    20,    21,    21,    19,    15,    14,    16,    19,    21,    26,    29,    27,    15, 
         22,    23,    30,    27,    26,    25,    22,    20,    23,    31,    31,    32,    35,    41,    30, 
         27,    35,    43,    40,    40,    37,    31,    28,    36,    46,    46,    47,    45,    52,    45;
      
   // -- Window
   .VAR/DM2 window[64] =			
      0.000236547246459, 0.002128068823367, 0.005906525533646, 0.011562654748559, 0.019082345068455, 0.028446374461055, 0.039630092680454, 0.052603043615818, 
      0.067328527569771, 0.083763174712658, 0.101856485009193, 0.121550410985947, 0.142778933048248, 0.165467798709869, 0.189534202218056, 0.214886710047722, 
      0.241425260901451, 0.269041210412979, 0.297617793083191, 0.327030390501022, 0.357147336006165, 0.387830615043640, 0.418936938047409, 0.450318813323975, 
      0.481825917959213, 0.513306438922882, 0.544608652591705, 0.575582623481750, 0.606081604957581, 0.635963976383209, 0.665094733238220, 0.693347036838531, 
      0.720603823661804, 0.746758997440338, 0.771718740463257, 0.795402467250824, 0.817743599414825, 0.838690280914307, 0.858205378055573, 0.876266956329346, 
      0.892867803573608, 0.908015310764313, 0.921730637550354, 0.934048056602478, 0.945013821125031, 0.954685091972351, 0.963128685951233, 0.970419406890869, 
      0.976638972759247, 0.981874108314514, 0.986215174198151, 0.989754617214203, 0.992585241794586, 0.994799077510834, 0.996485710144043, 0.997730851173401, 
      0.998615503311157, 0.999214410781860, 0.999595344066620, 0.999817907810211, 0.999933123588562, 0.999982535839081, 0.999997735023499, 1.000000000000000;
 
   // -- Prob vector     
   .VAR prob[60] =			
          6000,    15200,     5800,    15632, 
          5600,    16072,     5400,    16522, 
          5200,    16978,     5000,    17444, 
          4800,    17918,     4600,    18400, 
          4400,    18892,     4200,    19394, 
          4000,    19906,     3800,    20428, 
          3600,    20962,     3400,    21504, 
          3200,    22058,     9000,     9530, 
          8760,     9934,     8520,    10346, 
          8280,    10766,     8040,    11194, 
          7800,    11630,     7560,    12074, 
          7320,    12528,     7080,    12992, 
          6840,    13466,     6600,    13948, 
          6360,    14440,     6120,    14944, 
          5880,    15458,     5640,    15984;
     
   // -- bits verctors      
   .BLOCK/DM bits;
      .VAR bits_offset[15] = 15,  15,  15,  15,  15,  15,  15,  15,  55,  95,  135, 175, 215, 255, 295;
      .VAR bits_0[40]  = 0,  42,  67,  84,  97,  107, 116, 123, 129, 134, 139, 143, 147, 151, 154, 158, 161, 166, 171, 175, 179, 183, 186, 190, 193, 198, 203, 207, 211, 215, 218, 222, 225, 230, 235, 239, 243, 247, 250, 254;
      .VAR bits_8[40]  = 0,  48,  80,  104, 122, 136, 148, 159, 168, 176, 183, 190, 196, 201, 206, 211, 215, 223, 231, 237, 243, 249, 254, 259, 263, 271, 279, 285, 291, 297, 302, 307, 311, 319, 327, 333, 339, 345, 350, 355;
      .VAR bits_9[40]  = 0,  58,  99,  132, 158, 180, 199, 215, 229, 242, 254, 265, 274, 283, 292, 300, 307, 320, 332, 343, 353, 362, 371, 379, 386, 400, 412, 423, 433, 442, 451, 459, 466, 480, 492, 503, 528, 538, 547, 555;
      .VAR bits_10[40] = 0,  61,  106, 142, 172, 197, 219, 238, 254, 270, 283, 296, 307, 318, 328, 337, 346, 362, 377, 390, 401, 412, 423, 432, 441, 457, 472, 485, 497, 508, 536, 545, 555, 572, 586, 599, 611, 622, 632, 641;
      .VAR bits_11[40] = 0,  70,  123, 167, 204, 237, 266, 292, 315, 336, 356, 373, 390, 405, 420, 433, 446, 470, 491, 510, 549, 567, 581, 596, 609, 632, 654, 674, 692, 709, 724, 737, 751, 777, 798, 818, 836, 852, 868, 882;
      .VAR bits_12[40] = 0,  76,  135, 185, 228, 267, 301, 332, 361, 387, 411, 434, 455, 475, 493, 510, 551, 580, 609, 634, 658, 679, 698, 718, 735, 768, 796, 822, 846, 868, 889, 907, 925, 958, 995,1028,1055,1077,1098,1117;
      .VAR bits_13[40] = 0,  84,  152, 211, 263, 310, 353, 393, 429, 463, 495, 549, 578, 605, 630, 654, 678, 721, 761, 797, 830, 862, 890, 918, 943,1003,1052,1092,1129,1179,1213,1242,1268,1316,1360,1399,1436,1468,1498,1526;
      .VAR bits_14[40] = 0,  89,  161, 224, 281, 332, 379, 423, 464, 502, 562, 596, 629, 660, 689, 717, 745, 794, 841, 884, 923, 970,1011,1048,1080,1158,1213,1259,1301,1342,1380,1414,1447,1504,1557,1604,1649,1690,1728,1763;
   .ENDBLOCK;

   // -- square root of band widths (just for accuracy)
   .VAR ebands_dif_sqrt[15+2] = 
      -2,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.216506350946110,
      0.250000000000000,
      0.306186217847897,
      0.330718913883074,
      0.395284707521047,
      0.450693909432999,
      0.544862367942584,
      0.599478940414090,
      0.586301969977929;
      
   // -- trig data (used in MDCT/IMDCT pre-post rotation)
   .VAR/DM2 trig[12*2] = 
        0.793700525984100,//long block data
        0.707106781186547,
        0.999698818696204,
        0.024541228522912,
        0.999995293809576,
        0.003067956762966,
        0.922701128333879,
        0.385516053843919,
        0.704934080375905,
        0.709272826438866,
        0.379847208924051,
        0.925049240782678,
        
        0.757858283255199,//short block data
        0.757858283255199,
        0.998795456205172,
        0.049067674327418,
        0.999981175282601,
        0.006135884649154,
        0.921514039342042,
        0.388345046698826,
        0.702754744457225,
        0.711432195745216,
        0.377007410216418,
        0.926210242138311;
        
   // -- decoder scratch memory allocation (DM1)
   .VAR $celt.dec.celt_128_48000_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =
      0,    //BITS1
      19,   //BITS2
      512,  //ALG_UNQUANT_ST
      640,  //UVECTOR
      0,    //NORM_FREQ
      512,  //BAND_E
      512,  //IMDCT_OUTPUT
      768,  //SHORT_HIST
      896,  //TEMP_FFT
      0,    //PLC_EXC
      0,    //PLC_PITCH_BUF
      512,  //PLC_XLP4 
      1024, //PLC_AC
      0;    //TRANSIENT_PROC
      
   // -- decoder scratch memory allocation (DM2)
   .VAR $celt.dec.celt_128_48000_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      0,    //PULSES
      19,   //FINE_QUANT
      38,   //FINE_PRIORITY
      640,  //NORM
      0,    //FREQ
      256,  //FREQ2
      512,  //SHORT_FREQ
      0,    //PLC_EXC_COPY
      0,    //PLC_E
      0,    //PLC_YLP4
      512,  //PLC_MEM_LPC
      576,  //PLC_XCORR
      896;  //TEMP_VECT
      
   // -- encoder scratch memory allocation (DM1)
   .VAR $celt.enc.celt_128_48000_mode.dm1scratch_alloc[$celt.dec.DM1_SCRATCH_FIELDS_LENGTH] =               
      768,  //BITS1
      787,  //BITS2
      512,  //ALG_QUANT_ST
      640,  //UVECTOR_FIELD
      0,    //NORM_FREQ
      806,  //BANDE
      384,  //MDCT_INPUT_IMAG
      0,    //PREEMPH_LEFT_AUDIO
      896,  //LOG_BANDE_
      960,  //BAND_ERROR
      384,  //TRANSIENT
      0 ...;
      
   // -- encoder scratch memory allocation (DM2)
   .VAR $celt.enc.celt_128_48000_mode.dm2scratch_alloc[$celt.dec.DM2_SCRATCH_FIELDS_LENGTH] =
      768,  //PULSES
      787,  //FINE_QUANT
      806,  //FINE_PRIORITY
      256,  //NORM
      256,  //FREQ
      512,  //FREQ2
      0,    //SHORT_FREQ
      768,  //MDCT_INPUT_REAL
      1024,    //PREEMPH_RIGHT_AUDIO
      512,   //ABS_NORM
      0 ...;
.ENDMODULE;
#endif
